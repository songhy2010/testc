// Decompiled with JetBrains decompiler
// Type: smartMain.CLS.wnDm
// Assembly: smartMain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D2CC3615-8674-4A2E-AE78-B541A9F4EDDB
// Assembly location: E:\Work\smart 장터지기\smartMain.exe

using System;
using System.Data;
using System.Data.SqlClient;
using System.Text;

namespace smartMain.CLS
{
    public class wnDm
    {
        private wnAdo wAdo = new wnAdo();

        public DataTable fn_어플사용자수_체크(string p1, string p2, string sConnMain)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_업체정보 a ");
            stringBuilder.AppendLine("     inner join T_업체모바일 b on b.사업자번호 = a.사업자번호 and b.사원폰번호 <> @p_2 ");
            stringBuilder.AppendLine(" where a.사업자번호 = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            sCommand.Parameters.AddWithValue("@p_2", (object)p2);
            return this.wAdo.SqlCommandSelect(sCommand, sConnMain);
        }

        public DataTable fn_폰번호_체크(string p1, string p2, string sConnMain)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_업체모바일 a ");
            stringBuilder.AppendLine(" where a.사원폰번호 <> @p_1 ");
            stringBuilder.AppendLine("     and a.사원폰번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            sCommand.Parameters.AddWithValue("@p_2", (object)p2);
            return this.wAdo.SqlCommandSelect(sCommand, sConnMain);
        }

        public DataTable root_폰번호_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.사원폰번호 ");
            stringBuilder.AppendLine("     , a.인증코드 ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine("     , substring(a.사업자번호, 1, 3) + '-' + substring(a.사업자번호, 4, 2) + '-' + substring(a.사업자번호, 6, 5) as V사업자번호 ");
            stringBuilder.AppendLine(" from T_업체모바일 a   ");
            stringBuilder.AppendLine("      left outer join T_업체정보 b on b.사업자번호 = a.사업자번호 ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.사원폰번호 asc, a.사업자번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_데이터베이스_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select               ");
            stringBuilder.AppendLine("     a.*             ");
            stringBuilder.AppendLine(" from T_데이터베이스 a ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.디비순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_데이터베이스_Detail(string p1, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select               ");
            stringBuilder.AppendLine("     a.*             ");
            stringBuilder.AppendLine(" from T_데이터베이스 a ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("     and a.디비순번 = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_사업자_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_업체정보 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.상호명 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_창고_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from P_창고 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_계정_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from P_계정 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_부서_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from P_부서 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_직위_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from P_직위 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_사원정보_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_사용자정보 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.사원번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_거래처유형_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from P_거래처유형 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_거래처지역_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from P_지역코드 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_배송담당_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from P_배송차량 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_단가구분_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from P_단가구분 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_제조사_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from P_제조사 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품유형_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from P_상품유형 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable root_로그인일시_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select distinct a.사업자번호, a.지점코드, a.사원번호 ");
            stringBuilder.AppendLine(" from T_로그인일시 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.사업자번호 asc, a.지점코드 asc, a.사원번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable root_업체정보_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine("     , substring(a.사업자번호, 1, 3) + '-' + substring(a.사업자번호, 4, 2) + '-' + substring(a.사업자번호, 6, 5) as V사업자번호 ");
            stringBuilder.AppendLine("     , convert(nvarchar(19), b.로그인일시, 120) as 로그인일시 ");
            stringBuilder.AppendLine("     , c.명칭 as 수량등록방식명 ");
            stringBuilder.AppendLine(" from T_업체정보 a   ");
            stringBuilder.AppendLine("     left outer join (select 사업자번호, max(로그인일시) as 로그인일시 from T_로그인일시 group by 사업자번호) b on b.사업자번호 = a.사업자번호 ");
            stringBuilder.AppendLine("     left outer join C_수량등록방식 c on c.코드 = a.수량등록방식코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.상호명 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_업체정보_Using(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select count(*) from ( ");
            stringBuilder.AppendLine(" select top 1 사업자번호 ");
            stringBuilder.AppendLine(" from T_사용자정보 ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + " and 사원번호 <> '100'  ");
            stringBuilder.AppendLine("     and 지점코드 = '0' ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 사업자번호 ");
            stringBuilder.AppendLine(" from T_거래처정보 ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine("     and 지점코드 = '0' ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 사업자번호 ");
            stringBuilder.AppendLine(" from T_상품정보 ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine("     and 지점코드 = '0' ");
            stringBuilder.AppendLine(" ) z ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable root_업체정보_Detail(string p1, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine("     , substring(a.사업자번호, 1, 3) + '-' + substring(a.사업자번호, 4, 2) + '-' + substring(a.사업자번호, 6, 5) as 사업자번호2 ");
            stringBuilder.AppendLine("     , s.명칭 as 수량등록방식 ");
            stringBuilder.AppendLine("     , db.디비주소 ");
            stringBuilder.AppendLine("     , db.디비명 ");
            stringBuilder.AppendLine("     , db.디비계정 ");
            stringBuilder.AppendLine("     , db.디비암호 ");
            stringBuilder.AppendLine(" from T_업체정보 a   ");
            stringBuilder.AppendLine("      left outer join C_수량등록방식 s on s.코드 = a.수량등록방식코드 ");
            stringBuilder.AppendLine("      left outer join T_데이터베이스 db on db.디비순번 = a.디비순번 ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("     and a.사업자번호 = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_공지사항_List(string sConnMain)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select top 1 a.* ");
            stringBuilder.AppendLine(" from T_공지사항 a ");
            stringBuilder.AppendLine(" where a.시작일시 <= getdate() ");
            stringBuilder.AppendLine("     and a.종료일시 >= getdate() ");
            stringBuilder.AppendLine("     and a.삭제 = '0' ");
            stringBuilder.AppendLine(" order by a.공지번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConnMain);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_공지사항_확인(
          string sSeq,
          string sUserNo,
          string sGubun,
          string sIP,
          string sSerial,
          string sConnMain)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , isnull(b.공지확인, '0') as 공지확인 ");
            stringBuilder.AppendLine(" from T_공지사항 a ");
            stringBuilder.AppendLine("     inner join T_공지응답 b on b.공지번호 = a.공지번호 and b.사업자번호 = '" + Common.p_strCompID + "' and b.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and b.사원번호 = @p_1 and b.입력방법 = @p_2 and b.번호아이피 = @p_3 and b.기기시리얼 = @p_4 ");
            stringBuilder.AppendLine(" where a.공지번호 = @p_0 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_0", (object)sSeq);
            sCommand.Parameters.AddWithValue("@p_1", (object)sUserNo);
            sCommand.Parameters.AddWithValue("@p_2", (object)sGubun);
            sCommand.Parameters.AddWithValue("@p_3", (object)sIP);
            sCommand.Parameters.AddWithValue("@p_4", (object)sSerial);
            return this.wAdo.SqlCommandSelect(sCommand, sConnMain);
        }

        public DataTable fn_공지사항_List(string condition, string sConnMain)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , convert(nvarchar(19), a.시작일시, 120) as 시작일시2 ");
            stringBuilder.AppendLine("     , convert(nvarchar(19), a.종료일시, 120) as 종료일시2 ");
            stringBuilder.AppendLine(" from T_공지사항 a ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.공지번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConnMain);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_공지사항_Detail(string sSeq, string sConnMain)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , convert(nvarchar(19), a.시작일시, 120) as 시작일시2 ");
            stringBuilder.AppendLine("     , convert(nvarchar(19), a.종료일시, 120) as 종료일시2 ");
            stringBuilder.AppendLine("     , convert(nvarchar(10), a.시작일시, 120) as 시작일자 ");
            stringBuilder.AppendLine("     , convert(nvarchar(10), a.종료일시, 120) as 종료일자 ");
            stringBuilder.AppendLine("     , substring(convert(nvarchar(19), a.시작일시, 120), 12, 2) as 시작시 ");
            stringBuilder.AppendLine("     , substring(convert(nvarchar(19), a.시작일시, 120), 15, 2) as 시작분 ");
            stringBuilder.AppendLine("     , substring(convert(nvarchar(19), a.종료일시, 120), 12, 2) as 종료시 ");
            stringBuilder.AppendLine("     , substring(convert(nvarchar(19), a.종료일시, 120), 15, 2) as 종료분 ");
            stringBuilder.AppendLine("     , convert(nvarchar(19), a.작성일시, 120) as 작성일시2 ");
            stringBuilder.AppendLine(" from T_공지사항 a ");
            stringBuilder.AppendLine(" where a.공지번호 = @p_0 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_0", (object)sSeq);
            return this.wAdo.SqlCommandSelect(sCommand, sConnMain);
        }

        public DataTable fn_업체정보_Detail(string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine("     , substring(a.사업자번호, 1, 3) + '-' + substring(a.사업자번호, 4, 2) + '-' + substring(a.사업자번호, 6, 5) as 사업자번호2 ");
            stringBuilder.AppendLine(" from T_업체정보 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_업체자기정보_Check(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select               ");
            stringBuilder.AppendLine("     a.사업자번호    ");
            stringBuilder.AppendLine("     , a.상호명      ");
            stringBuilder.AppendLine("     , a.대표자      ");
            stringBuilder.AppendLine("     , a.업태        ");
            stringBuilder.AppendLine("     , a.종목        ");
            stringBuilder.AppendLine("     , a.계좌순번    ");
            stringBuilder.AppendLine("     , a.사용여부    ");
            stringBuilder.AppendLine(" from T_업체정보 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.사업자번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_업체계좌_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select               ");
            stringBuilder.AppendLine("     a.사업자번호    ");
            stringBuilder.AppendLine("     , a.계좌순번    ");
            stringBuilder.AppendLine("     , a.계좌번호    ");
            stringBuilder.AppendLine("     , a.은행명      ");
            stringBuilder.AppendLine("     , a.예금주      ");
            stringBuilder.AppendLine("     , a.계좌별칭    ");
            stringBuilder.AppendLine(" from T_업체계좌 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.계좌순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_업체계좌_Detail(string p1, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select               ");
            stringBuilder.AppendLine("     a.사업자번호    ");
            stringBuilder.AppendLine("     , a.계좌순번    ");
            stringBuilder.AppendLine("     , a.계좌번호    ");
            stringBuilder.AppendLine("     , a.은행명      ");
            stringBuilder.AppendLine("     , a.예금주      ");
            stringBuilder.AppendLine("     , a.계좌별칭    ");
            stringBuilder.AppendLine(" from T_업체계좌 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계좌순번 = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_업체카드_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select               ");
            stringBuilder.AppendLine("     a.사업자번호    ");
            stringBuilder.AppendLine("     , a.카드순번    ");
            stringBuilder.AppendLine("     , a.카드번호    ");
            stringBuilder.AppendLine("     , a.카드명      ");
            stringBuilder.AppendLine("     , a.명의자      ");
            stringBuilder.AppendLine("     , a.카드별칭    ");
            stringBuilder.AppendLine(" from T_업체카드 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.카드순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_업체카드_Detail(string p1, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select               ");
            stringBuilder.AppendLine("     a.사업자번호    ");
            stringBuilder.AppendLine("     , a.카드순번    ");
            stringBuilder.AppendLine("     , a.카드번호    ");
            stringBuilder.AppendLine("     , a.카드명      ");
            stringBuilder.AppendLine("     , a.명의자      ");
            stringBuilder.AppendLine("     , a.카드별칭    ");
            stringBuilder.AppendLine(" from T_업체카드 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.카드순번 = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_거래처중복_List(string sSaup, string sGubun, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select z.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select 거래처명, COUNT(*) as cnt ");
            stringBuilder.AppendLine("     from T_거래처정보 ");
            stringBuilder.AppendLine("     where 사업자번호 = '" + sSaup + "' and 지점코드 = '0' and 거래처구분 = '" + sGubun + "' ");
            stringBuilder.AppendLine("     group by 거래처명   ");
            stringBuilder.AppendLine(" ) z where z.cnt > 1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품규격중복_List(string sSaup, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select z.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select 상품규격, COUNT(*) as cnt ");
            stringBuilder.AppendLine("     from T_상품정보 ");
            stringBuilder.AppendLine("     where 사업자번호 = '" + sSaup + "' and 지점코드 = '0' ");
            stringBuilder.AppendLine("     group by 상품규격   ");
            stringBuilder.AppendLine(" ) z where z.cnt > 1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_거래처_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine(" from T_거래처정보 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.거래처명 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_거래처_BakList(string condition, string sDay2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매출 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매출현재 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매입 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매입현재 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 현수금합계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp수금현재 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 현지급합계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp지급현재 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , case when a.거래처구분 in ('1', '3') then isnull(a.초기잔고, 0) + isnull(k.현매출, 0) - isnull(m.현수금합계, 0) - isnull(h.현매입, 0) + isnull(p.현지급합계, 0) ");
            stringBuilder.AppendLine("         else isnull(a.초기잔고, 0) - isnull(k.현매출, 0) + isnull(m.현수금합계, 0) + isnull(h.현매입, 0) - isnull(p.현지급합계, 0) end as 현잔고 ");
            stringBuilder.AppendLine(" from T_거래처정보 a ");
            stringBuilder.AppendLine("     left outer join #Tmp매출현재 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join #Tmp매입현재 h on h.사업자번호 = a.사업자번호 and h.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join #Tmp수금현재 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join #Tmp지급현재 p on p.사업자번호 = a.사업자번호 and p.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" order by a.거래처코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_거래처_Using(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select count(*) from ( ");
            stringBuilder.AppendLine(" select top 1 거래처코드 ");
            stringBuilder.AppendLine(" from T_견적 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 거래처코드 ");
            stringBuilder.AppendLine(" from T_계산서매입 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 거래처코드 ");
            stringBuilder.AppendLine(" from T_계산서매출 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 거래처코드 ");
            stringBuilder.AppendLine(" from T_매입 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 거래처코드 ");
            stringBuilder.AppendLine(" from T_매출 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 거래처코드 ");
            stringBuilder.AppendLine(" from T_발주 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 거래처코드 ");
            stringBuilder.AppendLine(" from T_방문계획 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 거래처코드 ");
            stringBuilder.AppendLine(" from T_수금 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 거래처코드 ");
            stringBuilder.AppendLine(" from T_장비대여 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 거래처코드 ");
            stringBuilder.AppendLine(" from T_주문 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 거래처코드 ");
            stringBuilder.AppendLine(" from T_지급 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" ) z ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public string sql_거래처_List_Bind(string condition)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select  ");
            stringBuilder.AppendLine("     a.거래처코드 ");
            stringBuilder.AppendLine("     , a.거래처명  ");
            stringBuilder.AppendLine("     , a.정식명칭  ");
            stringBuilder.AppendLine("     , c1.명칭 as 거래처구분 ");
            stringBuilder.AppendLine("     , a.거래처담당자 as 담당자  ");
            stringBuilder.AppendLine("     , a.대표자명  ");
            stringBuilder.AppendLine("     , a.거래처사업자번호 as 사업자번호  ");
            stringBuilder.AppendLine("     , a.업태    ");
            stringBuilder.AppendLine("     , a.종목    ");
            stringBuilder.AppendLine("     , a.거래개시일 ");
            stringBuilder.AppendLine("     , c2.사용자명 as 담당사원 ");
            stringBuilder.AppendLine("     , c3.명칭 as 거래처유형 ");
            stringBuilder.AppendLine("     , c4.명칭 as 지역명 ");
            stringBuilder.AppendLine("     , a.우편번호  ");
            stringBuilder.AppendLine("     , a.주소    ");
            stringBuilder.AppendLine("     , a.상세주소  ");
            stringBuilder.AppendLine("     , a.이메일   ");
            stringBuilder.AppendLine("     , a.폰번호 ");
            stringBuilder.AppendLine("     , a.전화번호 ");
            stringBuilder.AppendLine("     , a.팩스번호 ");
            stringBuilder.AppendLine("     , c5.명칭 as 부가세구분 ");
            stringBuilder.AppendLine("     , case when isnull(a.계산서여부, 'Y') = 'Y' then '발행' else '미발행' end as 계산서여부 ");
            stringBuilder.AppendLine("     , a.발행율   ");
            stringBuilder.AppendLine("     , c6.계좌별칭 as 계좌정보 ");
            stringBuilder.AppendLine("     , round(a.여신, 0) as 여신 ");
            stringBuilder.AppendLine("     , c7.명칭 as 사용여부 ");
            stringBuilder.AppendLine(" from T_거래처정보 a ");
            stringBuilder.AppendLine("     left outer join C_거래처구분 c1 on c1.코드 = a.거래처구분 ");
            stringBuilder.AppendLine("     left outer join T_사용자정보 c2 on c2.사원번호 = a.사원번호 and c2.사업자번호 = a.사업자번호 and c2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join P_거래처유형 c3 on c3.코드 = a.유형코드 and c3.사업자번호 = a.사업자번호 and c3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join P_지역코드 c4 on c4.코드 = a.지역코드 and c4.사업자번호 = a.사업자번호 and c4.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join C_부가세코드 c5 on c5.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("     left outer join T_업체계좌 c6 on c6.계좌순번 = a.계좌순번 and c6.사업자번호 = a.사업자번호 and c6.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join C_거래처여부 c7 on c7.코드 = a.사용여부 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.거래처명 asc ");
            return stringBuilder.ToString();
        }

        public DataTable fn_거래처_List_Bind_Count(
          string sGubun,
          string sTxt,
          string sUsed,
          string sManNo,
          string sVat,
          string sSheet,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.거래처코드 ");
            stringBuilder.AppendLine(" from T_거래처정보 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sManNo != "")
                stringBuilder.AppendLine("     and a.사원번호 = '" + sManNo + "' ");
            if (sVat != "")
                stringBuilder.AppendLine("     and a.부가세코드 = '" + sVat + "' ");
            if (sSheet != "")
                stringBuilder.AppendLine("     and a.계산서여부 = '" + sSheet + "' ");
            if (sGubun != "")
            {
                if (sGubun == "4")
                    stringBuilder.AppendLine("     and a.거래처구분 in ('1', '3') ");
                else if (sGubun == "5")
                    stringBuilder.AppendLine("     and a.거래처구분 in ('2', '3') ");
                else
                    stringBuilder.AppendLine("     and a.거래처구분 = '" + sGubun + "' ");
            }
            if (sTxt != "")
            {
                stringBuilder.AppendLine("     and (a.거래처명 like '" + sTxt + "%' ");
                stringBuilder.AppendLine("         or a.정식명칭 like '" + sTxt + "%' ");
                stringBuilder.AppendLine("         or a.대표자명 like '" + sTxt + "%' ");
                stringBuilder.AppendLine("         or a.거래처담당자 like '" + sTxt + "%' ");
                stringBuilder.AppendLine("         or a.거래처사업자번호 like '" + sTxt + "%') ");
            }
            if (sUsed != "")
                stringBuilder.AppendLine(" and a.사용여부 = '" + sUsed + "' ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_거래처_List_Bind_Page(
          string sGubun,
          string sTxt,
          string sUsed,
          string sManNo,
          string sVat,
          string sSheet,
          int pageSize,
          int skipSize,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select TOP " + pageSize.ToString() + " ");
            stringBuilder.AppendLine("     a.거래처코드 ");
            stringBuilder.AppendLine("     , a.거래처명  ");
            stringBuilder.AppendLine("     , a.정식명칭  ");
            stringBuilder.AppendLine("     , c1.명칭 as 거래처구분 ");
            stringBuilder.AppendLine("     , a.거래처담당자 as 담당자  ");
            stringBuilder.AppendLine("     , a.대표자명  ");
            stringBuilder.AppendLine("     , a.거래처사업자번호 as 사업자번호  ");
            stringBuilder.AppendLine("     , a.업태    ");
            stringBuilder.AppendLine("     , a.종목    ");
            stringBuilder.AppendLine("     , a.거래개시일 ");
            stringBuilder.AppendLine("     , c2.사용자명 as 담당사원 ");
            stringBuilder.AppendLine("     , (case when isnull(a.단가구분, '') = '' then '(최종단가)' when isnull(a.단가구분, '') = '_F_' then '(마스터단가)' else c8.명칭 end) as 적용단가 ");
            stringBuilder.AppendLine("     , c3.명칭 as 거래처유형 ");
            stringBuilder.AppendLine("     , c4.명칭 as 지역명 ");
            stringBuilder.AppendLine("     , a.우편번호  ");
            stringBuilder.AppendLine("     , a.주소    ");
            stringBuilder.AppendLine("     , a.상세주소  ");
            stringBuilder.AppendLine("     , a.이메일   ");
            stringBuilder.AppendLine("     , a.폰번호 ");
            stringBuilder.AppendLine("     , a.전화번호 ");
            stringBuilder.AppendLine("     , a.팩스번호 ");
            stringBuilder.AppendLine("     , c5.명칭 as 부가세구분 ");
            stringBuilder.AppendLine("     , case when isnull(a.계산서여부, 'Y') = 'Y' then '발행' else '미발행' end as 계산서여부 ");
            stringBuilder.AppendLine("     , a.발행율   ");
            stringBuilder.AppendLine("     , c6.계좌별칭 as 계좌정보 ");
            stringBuilder.AppendLine("     , round(a.여신, 0) as 여신 ");
            stringBuilder.AppendLine("     , c7.명칭 as 사용여부 ");
            stringBuilder.AppendLine(" from T_거래처정보 a ");
            stringBuilder.AppendLine("     left outer join C_거래처구분 c1 on c1.코드 = a.거래처구분 ");
            stringBuilder.AppendLine("     left outer join T_사용자정보 c2 on c2.사원번호 = a.사원번호 and c2.사업자번호 = a.사업자번호 and c2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join P_거래처유형 c3 on c3.코드 = a.유형코드 and c3.사업자번호 = a.사업자번호 and c3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join P_지역코드 c4 on c4.코드 = a.지역코드 and c4.사업자번호 = a.사업자번호 and c4.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join C_부가세코드 c5 on c5.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("     left outer join T_업체계좌 c6 on c6.계좌순번 = a.계좌순번 and c6.사업자번호 = a.사업자번호 and c6.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join C_거래처여부 c7 on c7.코드 = a.사용여부 ");
            stringBuilder.AppendLine("     left outer join P_단가구분 c8 on c8.코드 = a.단가구분 and c8.사업자번호 = a.사업자번호 and c8.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sManNo != "")
                stringBuilder.AppendLine("     and a.사원번호 = '" + sManNo + "' ");
            if (sVat != "")
                stringBuilder.AppendLine("     and a.부가세코드 = '" + sVat + "' ");
            if (sSheet != "")
                stringBuilder.AppendLine("     and a.계산서여부 = '" + sSheet + "' ");
            if (sGubun != "")
            {
                if (sGubun == "4")
                    stringBuilder.AppendLine("     and a.거래처구분 in ('1', '3') ");
                else if (sGubun == "5")
                    stringBuilder.AppendLine("     and a.거래처구분 in ('2', '3') ");
                else
                    stringBuilder.AppendLine("     and a.거래처구분 = '" + sGubun + "' ");
            }
            if (sTxt != "")
            {
                stringBuilder.AppendLine(" and (a.거래처명 like '" + sTxt + "%' ");
                stringBuilder.AppendLine("     or a.정식명칭 like '" + sTxt + "%' ");
                stringBuilder.AppendLine("     or a.대표자명 like '" + sTxt + "%' ");
                stringBuilder.AppendLine("     or a.거래처담당자 like '" + sTxt + "%' ");
                stringBuilder.AppendLine("     or a.거래처사업자번호 like '" + sTxt + "%') ");
            }
            if (sUsed != "")
                stringBuilder.AppendLine("     and a.사용여부 = '" + sUsed + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 not in (select TOP " + skipSize.ToString() + " 거래처코드 ");
            stringBuilder.AppendLine("                                 from T_거래처정보  ");
            stringBuilder.AppendLine("                                 where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                                     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sGubun != "")
                stringBuilder.AppendLine("                                     and 거래처구분 = '" + sGubun + "' ");
            if (sTxt != "")
            {
                stringBuilder.AppendLine("                                     and (거래처명 like '" + sTxt + "%' ");
                stringBuilder.AppendLine("                                         or 정식명칭 like '" + sTxt + "%' ");
                stringBuilder.AppendLine("                                         or 대표자명 like '" + sTxt + "%' ");
                stringBuilder.AppendLine("                                         or 거래처담당자 like '" + sTxt + "%' ");
                stringBuilder.AppendLine("                                         or 거래처사업자번호 like '" + sTxt + "%') ");
            }
            if (sUsed != "")
                stringBuilder.AppendLine("                                     and 사용여부 = '" + sUsed + "' ");
            stringBuilder.AppendLine("                                 order by 거래처명 asc)  ");
            stringBuilder.AppendLine(" order by a.거래처명 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_거래처_List_방문(string condition, string strAllFlag, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select  ");
            stringBuilder.AppendLine("     a.거래처코드 ");
            stringBuilder.AppendLine("     , a.거래처명  ");
            stringBuilder.AppendLine("     , a.정식명칭  ");
            stringBuilder.AppendLine("     , c1.명칭 as 거래처구분 ");
            stringBuilder.AppendLine("     , a.거래처담당자 as 담당자  ");
            stringBuilder.AppendLine("     , a.대표자명  ");
            stringBuilder.AppendLine("     , a.거래처사업자번호 as 사업자번호  ");
            stringBuilder.AppendLine("     , a.업태    ");
            stringBuilder.AppendLine("     , a.종목    ");
            stringBuilder.AppendLine("     , a.거래개시일 ");
            stringBuilder.AppendLine("     , c2.사용자명 as 담당사원 ");
            stringBuilder.AppendLine("     , (case when isnull(a.단가구분, '') = '' then '(최종단가)' when isnull(a.단가구분, '') = '_F_' then '(마스터단가)' else c8.명칭 end) as 적용단가 ");
            stringBuilder.AppendLine("     , c3.명칭 as 거래처유형 ");
            stringBuilder.AppendLine("     , c4.명칭 as 지역명 ");
            stringBuilder.AppendLine("     , a.우편번호  ");
            stringBuilder.AppendLine("     , a.주소    ");
            stringBuilder.AppendLine("     , a.상세주소  ");
            stringBuilder.AppendLine("     , a.이메일   ");
            stringBuilder.AppendLine("     , a.폰번호 ");
            stringBuilder.AppendLine("     , a.전화번호 ");
            stringBuilder.AppendLine("     , a.팩스번호 ");
            stringBuilder.AppendLine("     , c5.명칭 as 부가세구분 ");
            stringBuilder.AppendLine("     , case when isnull(a.계산서여부, 'Y') = 'Y' then '발행' else '미발행' end as 계산서여부 ");
            stringBuilder.AppendLine("     , a.발행율   ");
            stringBuilder.AppendLine("     , c6.계좌별칭 as 계좌정보 ");
            stringBuilder.AppendLine("     , round(a.여신, 0) as 여신 ");
            stringBuilder.AppendLine("     , c7.명칭 as 사용여부 ");
            stringBuilder.AppendLine(" from dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') a ");
            stringBuilder.AppendLine("     left outer join C_거래처구분 c1 on c1.코드 = a.거래처구분 ");
            stringBuilder.AppendLine("     left outer join T_사용자정보 c2 on c2.사원번호 = a.사원번호 and c2.사업자번호 = a.사업자번호 and c2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join P_거래처유형 c3 on c3.코드 = a.유형코드 and c3.사업자번호 = a.사업자번호 and c3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join P_지역코드 c4 on c4.코드 = a.지역코드 and c4.사업자번호 = a.사업자번호 and c4.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join C_부가세코드 c5 on c5.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("     left outer join T_업체계좌 c6 on c6.계좌순번 = a.계좌순번 and c6.사업자번호 = a.사업자번호 and c6.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join C_거래처여부 c7 on c7.코드 = a.사용여부 ");
            stringBuilder.AppendLine("     left outer join P_단가구분 c8 on c8.코드 = a.단가구분 and c8.사업자번호 = a.사업자번호 and c8.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.거래처명 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_거래처_List_Bind(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select  ");
            stringBuilder.AppendLine("     a.거래처코드 ");
            stringBuilder.AppendLine("     , a.거래처명  ");
            stringBuilder.AppendLine("     , a.정식명칭  ");
            stringBuilder.AppendLine("     , c1.명칭 as 거래처구분 ");
            stringBuilder.AppendLine("     , a.거래처담당자 as 담당자  ");
            stringBuilder.AppendLine("     , a.대표자명  ");
            stringBuilder.AppendLine("     , a.거래처사업자번호 as 사업자번호  ");
            stringBuilder.AppendLine("     , a.업태    ");
            stringBuilder.AppendLine("     , a.종목    ");
            stringBuilder.AppendLine("     , a.거래개시일 ");
            stringBuilder.AppendLine("     , c2.사용자명 as 담당사원 ");
            stringBuilder.AppendLine("     , (case when isnull(a.단가구분, '') = '' then '(최종단가)' when isnull(a.단가구분, '') = '_F_' then '(마스터단가)' else c8.명칭 end) as 적용단가 ");
            stringBuilder.AppendLine("     , c3.명칭 as 거래처유형 ");
            stringBuilder.AppendLine("     , c4.명칭 as 지역명 ");
            stringBuilder.AppendLine("     , a.우편번호  ");
            stringBuilder.AppendLine("     , a.주소    ");
            stringBuilder.AppendLine("     , a.상세주소  ");
            stringBuilder.AppendLine("     , a.이메일   ");
            stringBuilder.AppendLine("     , a.폰번호 ");
            stringBuilder.AppendLine("     , a.전화번호 ");
            stringBuilder.AppendLine("     , a.팩스번호 ");
            stringBuilder.AppendLine("     , c5.명칭 as 부가세구분 ");
            stringBuilder.AppendLine("     , case when isnull(a.계산서여부, 'Y') = 'Y' then '발행' else '미발행' end as 계산서여부 ");
            stringBuilder.AppendLine("     , a.발행율   ");
            stringBuilder.AppendLine("     , c6.계좌별칭 as 계좌정보 ");
            stringBuilder.AppendLine("     , round(a.여신, 0) as 여신 ");
            stringBuilder.AppendLine("     , c7.명칭 as 사용여부 ");
            //stringBuilder.AppendLine("     , a.현재잔고 as 현재잔고_개발중 ");
            stringBuilder.AppendLine("     , a.현재잔고 as 현재잔고 ");
            stringBuilder.AppendLine(" from T_거래처정보 a ");
            stringBuilder.AppendLine("     left outer join C_거래처구분 c1 on c1.코드 = a.거래처구분 ");
            stringBuilder.AppendLine("     left outer join T_사용자정보 c2 on c2.사원번호 = a.사원번호 and c2.사업자번호 = a.사업자번호 and c2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join P_거래처유형 c3 on c3.코드 = a.유형코드 and c3.사업자번호 = a.사업자번호 and c3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join P_지역코드 c4 on c4.코드 = a.지역코드 and c4.사업자번호 = a.사업자번호 and c4.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join C_부가세코드 c5 on c5.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("     left outer join T_업체계좌 c6 on c6.계좌순번 = a.계좌순번 and c6.사업자번호 = a.사업자번호 and c6.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join C_거래처여부 c7 on c7.코드 = a.사용여부 ");
            stringBuilder.AppendLine("     left outer join P_단가구분 c8 on c8.코드 = a.단가구분 and c8.사업자번호 = a.사업자번호 and c8.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.거래처명 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_거래처_List_팝업(string condition, string strAllFlag, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select   ");
            stringBuilder.AppendLine("     a.거래처코드 as 코드 ");
            stringBuilder.AppendLine("     , a.Old_Code as 별칭코드 ");
            stringBuilder.AppendLine("     , a.거래처명  ");
            stringBuilder.AppendLine("     , c7.명칭 as 상태 ");
            stringBuilder.AppendLine("     , a.정식명칭  ");
            stringBuilder.AppendLine("     , c1.명칭 as 거래처구분 ");
            stringBuilder.AppendLine("     , a.거래처담당자 as 담당자  ");
            stringBuilder.AppendLine("     , a.대표자명  ");
            stringBuilder.AppendLine("     , a.거래처사업자번호 as 사업자번호  ");
            stringBuilder.AppendLine("     , a.업태    ");
            stringBuilder.AppendLine("     , a.종목    ");
            stringBuilder.AppendLine("     , a.거래개시일 ");
            stringBuilder.AppendLine("     , c2.사용자명 as 담당사원 ");
            stringBuilder.AppendLine("     , c3.명칭 as 거래처유형 ");
            stringBuilder.AppendLine("     , c4.명칭 as 지역명 ");
            stringBuilder.AppendLine("     , a.우편번호  ");
            stringBuilder.AppendLine("     , a.주소    ");
            stringBuilder.AppendLine("     , a.상세주소  ");
            stringBuilder.AppendLine("     , a.이메일   ");
            stringBuilder.AppendLine("     , a.폰번호 ");
            stringBuilder.AppendLine("     , a.전화번호 ");
            stringBuilder.AppendLine("     , a.팩스번호 ");
            stringBuilder.AppendLine("     , (case when isnull(a.단가구분, '') = '' then '(최종단가)' when isnull(a.단가구분, '') = '_F_' then '(마스터단가)' else c8.명칭 end) as 적용단가 ");
            stringBuilder.AppendLine("     , c5.명칭 as 부가세구분 ");
            stringBuilder.AppendLine("     , case when isnull(a.계산서여부, 'Y') = 'Y' then '발행' else '미발행' end as 계산서여부 ");
            stringBuilder.AppendLine("     , a.발행율   ");
            stringBuilder.AppendLine("     , c6.계좌별칭 as 계좌정보 ");
            stringBuilder.AppendLine("     , round(a.여신, 0) as 여신 ");
            stringBuilder.AppendLine("     , c7.명칭 as 사용여부 ");
            stringBuilder.AppendLine(" from dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') a ");
            stringBuilder.AppendLine("     left outer join C_거래처구분 c1 on c1.코드 = a.거래처구분 ");
            stringBuilder.AppendLine("     left outer join T_사용자정보 c2 on c2.사원번호 = a.사원번호 and c2.사업자번호 = a.사업자번호 and c2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join P_거래처유형 c3 on c3.코드 = a.유형코드 and c3.사업자번호 = a.사업자번호 and c3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join P_지역코드 c4 on c4.코드 = a.지역코드 and c4.사업자번호 = a.사업자번호 and c4.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join C_부가세코드 c5 on c5.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("     left outer join T_업체계좌 c6 on c6.계좌순번 = a.계좌순번 and c6.사업자번호 = a.사업자번호 and c6.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join C_거래처여부 c7 on c7.코드 = a.사용여부 ");
            stringBuilder.AppendLine("     left outer join P_단가구분 c8 on c8.코드 = a.단가구분 and c8.사업자번호 = a.사업자번호 and c8.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.거래처명 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_거래처_Detail(string p1, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , case when isnull(a.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(a.거래처사업자번호, 1, 3) + '-' + substring(a.거래처사업자번호, 4, 2) + '-' + substring(a.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , f.사용자명 as 담당사원 ");
            stringBuilder.AppendLine("     , f.부서코드 ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("     , isnull((select 창고코드 from T_사용자정보 where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 사원번호 = '" + Common.p_strUserNo + "'), '000') as 창고코드 ");
            else
                stringBuilder.AppendLine("     , f.창고코드 ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , ff.개인사업자번호 as 대체사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(ff.개인사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(ff.개인사업자번호, 1, 3) + '-' + substring(ff.개인사업자번호, 4, 2) + '-' + substring(ff.개인사업자번호, 6, 5) end as 대체사업자번호2 ");
            stringBuilder.AppendLine("     , ff.대표자명 as 대체대표자 ");
            stringBuilder.AppendLine("     , ff.상호명 as 대체상호명 ");
            stringBuilder.AppendLine("     , ff.이메일 as 대체이메일 ");
            stringBuilder.AppendLine("     , ff.업태 as 대체업태 ");
            stringBuilder.AppendLine("     , ff.종목 as 대체종목 ");
            stringBuilder.AppendLine("     , ff.사업우편번호 as 대체우편번호 ");
            stringBuilder.AppendLine("     , ff.사업주소 + ' ' + ff.사업상세주소 as 대체주소 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 + ' / ' + f.사용자명 as 대체연락처 ");
            stringBuilder.AppendLine("     , ff.직인 as 대체직인 ");
            stringBuilder.AppendLine("     , '' as 대체직인파일 ");
            stringBuilder.AppendLine("     , ff.직인형식 as 대체직인형식 ");
            stringBuilder.AppendLine("     , g.명칭 as 부서명 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , c6.계좌별칭 ");
            stringBuilder.AppendLine("     , md.UID ");
            stringBuilder.AppendLine("     , md.UPW ");
            stringBuilder.AppendLine("     , md.어플여부 ");
            stringBuilder.AppendLine("     , md.폰번호 as 모바일번호 ");
            stringBuilder.AppendLine(" from T_거래처정보 a ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = a.사업자번호 and f.사원번호 = a.사원번호 and f.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 ff on ff.사업자번호 = a.사업자번호 and ff.사원번호 = a.사원번호 and ff.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("      left outer join P_부서 g on g.사업자번호 = f.사업자번호 and g.코드 = f.부서코드 and g.지점코드 = f.지점코드 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("      left outer join T_업체계좌 c6 on c6.계좌순번 = a.계좌순번 and c6.사업자번호 = a.사업자번호 and c6.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 md on md.사업자번호 = a.사업자번호 and md.사원번호 = '100' and md.지점코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_거래처_Detail_별칭코드(string p1, string s거래처구분, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine(" from T_거래처정보 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.Old_Code = @p_1 ");
            stringBuilder.AppendLine("     and a.거래처구분 = @거래처구분 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            sCommand.Parameters.AddWithValue("@거래처구분", (object)s거래처구분);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_거래처잔고_Summary(
          string in_Str,
          string sCust,
          string sDay,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select sum(z.현재잔고) as 현재잔고 ");
            stringBuilder.AppendLine("     , sum(z.매출액) as 매출액 ");
            stringBuilder.AppendLine("     , sum(z.반품액) as 반품액 ");
            stringBuilder.AppendLine("     , sum(z.수금액) as 수금액 ");
            stringBuilder.AppendLine("     , sum(z.매입액) as 매입액 ");
            stringBuilder.AppendLine("     , sum(z.매입반품액) as 매입반품액 ");
            stringBuilder.AppendLine("     , sum(z.지급액) as 지급액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select isnull(a.현재잔고, 0) as 현재잔고 ");
            stringBuilder.AppendLine("     , isnull(s.매출액, 0) as 매출액 ");
            stringBuilder.AppendLine("     , isnull(s.매출반품액, 0) as 반품액 ");
            stringBuilder.AppendLine("     , isnull(w.합계금액, 0) as 수금액 ");
            stringBuilder.AppendLine("     , isnull(p.매입액, 0) as 매입액 ");
            stringBuilder.AppendLine("     , isnull(p.매입반품액, 0) as 매입반품액 ");
            stringBuilder.AppendLine("     , isnull(v.합계금액, 0) as 지급액 ");
            stringBuilder.AppendLine(" from T_거래처정보 a ");
            stringBuilder.AppendLine("      left outer join dbo.TBF특정거래처매출_미래('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_2, 0, '" + sCust + "') s on s.거래처코드 = a.거래처코드");
            stringBuilder.AppendLine("      left outer join dbo.TBF특정거래처매입_미래('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_2, 0, '" + sCust + "') p on p.거래처코드 = a.거래처코드");
            stringBuilder.AppendLine("      left outer join dbo.TBF특정거래처수금_미래('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_2, 0, '" + sCust + "') w on w.거래처코드 = a.거래처코드");
            stringBuilder.AppendLine("      left outer join dbo.TBF특정거래처지급_미래('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_2, 0, '" + sCust + "') v on v.거래처코드 = a.거래처코드");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (in_Str != "")
                stringBuilder.AppendLine("     and a.거래처구분 in (" + in_Str + ") ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" ) z ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_2", (object)sDay);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_거래처_방문계획(string p1, string sMonth, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , substring(a.계획일자, 9, 2) as 계획일 ");
            stringBuilder.AppendLine(" from T_방문계획 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = @p_1 ");
            stringBuilder.AppendLine("     and substring(a.계획일자, 1, 7) = @p_2 ");
            stringBuilder.AppendLine(" order by a.계획일자 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sMonth);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_주문_마감(string sMonth, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , substring(a.주문일자, 9, 2) as 일자 ");
            stringBuilder.AppendLine(" from T_주문마감 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and substring(a.주문일자, 1, 7) = @p_2 ");
            stringBuilder.AppendLine(" order by a.주문일자 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_2", (object)sMonth);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_주문_마감_체크(string sDay, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , substring(a.주문일자, 9, 2) as 일자 ");
            stringBuilder.AppendLine(" from T_주문마감 a   ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.주문일자 = @p_2 ");
            stringBuilder.AppendLine(" order by a.주문일자 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_2", (object)sDay);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_상품_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품_Using(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select count(*) from ( ");
            stringBuilder.AppendLine(" select top 1 상품코드 ");
            stringBuilder.AppendLine(" from T_견적항목 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 상품코드 ");
            stringBuilder.AppendLine(" from T_계산서매입항목 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 상품코드 ");
            stringBuilder.AppendLine(" from T_계산서매출항목 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 상품코드 ");
            stringBuilder.AppendLine(" from T_매입항목 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 상품코드 ");
            stringBuilder.AppendLine(" from T_매출항목 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 상품코드 ");
            stringBuilder.AppendLine(" from T_발주항목 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 상품코드 ");
            stringBuilder.AppendLine(" from T_주문항목 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 상품코드 ");
            stringBuilder.AppendLine(" from T_창고이동항목 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" ) z ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품_List_Bind(
          string condition,
          string s납품분여부,
          string s매입매출,
          string sCust,
          bool bOrdNum,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     a.상품코드 ");
            stringBuilder.AppendLine("     , a.상품명 ");
            stringBuilder.AppendLine("     , a.규격 ");
            stringBuilder.AppendLine("     , a.정렬순서 ");
            if (Common.p_strEgg == "Y")
            {
                if (Common.p_strBox == "1" || Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.낱개기본판매수량 as 알_기본판매수량");
                    stringBuilder.AppendLine("     , a.낱개입고단가 as 알_입고단가");
                    stringBuilder.AppendLine("     , a.낱개판매단가 as 알_판매단가");
                    stringBuilder.AppendLine("     , a.낱개도매단가 as 알_중상입고단가");
                    stringBuilder.AppendLine("     , a.낱개바코드 as 알_바코드");
                }
                if (Common.p_strBox == "2" || Common.p_strBox == "3")
                    stringBuilder.AppendLine("     , a.입수수량 ");
                if (Common.p_strBox == "2" || Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.박스기본판매수량 as 판_기본판매수량");
                    stringBuilder.AppendLine("     , a.박스입고단가 as 판_입고단가");
                    stringBuilder.AppendLine("     , a.박스판매단가 as 판_판매단가");
                    stringBuilder.AppendLine("     , a.박스도매단가 as 판_중상입고단가");
                    stringBuilder.AppendLine("     , a.박스바코드 as 판_바코드");
                }
            }
            else
            {
                if (Common.p_strBox == "1" || Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.낱개기본판매수량 ");
                    stringBuilder.AppendLine("     , a.낱개입고단가 ");
                    stringBuilder.AppendLine("     , a.낱개판매단가 ");
                    stringBuilder.AppendLine("     , a.낱개도매단가 as 낱개중상입고단가 ");
                    stringBuilder.AppendLine("     , a.낱개바코드 ");
                }
                if (Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.중간입수수량 ");
                    stringBuilder.AppendLine("     , a.중간기본판매수량 ");
                    stringBuilder.AppendLine("     , a.중간바코드 ");
                }
                if (Common.p_strBox == "2" || Common.p_strBox == "3")
                    stringBuilder.AppendLine("     , a.입수수량 ");
                if (Common.p_strBox == "2" || Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.박스기본판매수량 ");
                    stringBuilder.AppendLine("     , a.박스입고단가 ");
                    stringBuilder.AppendLine("     , a.박스판매단가 ");
                    stringBuilder.AppendLine("     , a.박스도매단가 as 박스중상입고단가 ");
                    stringBuilder.AppendLine("     , a.박스바코드 ");
                }
            }
            stringBuilder.AppendLine("     , c1.명칭 as 상품구분 ");
            stringBuilder.AppendLine("     , c2.명칭 as 과세구분 ");
            stringBuilder.AppendLine("     , c3.명칭 as 상품유형 ");
            stringBuilder.AppendLine("     , c4.명칭 as 제조사 ");
            stringBuilder.AppendLine("     , convert(nvarchar(10), a.유통기간) + ' 개월' as 유통기간 ");
            stringBuilder.AppendLine("     , a.출고위치 ");
            stringBuilder.AppendLine("     , a.안전재고 ");
            stringBuilder.AppendLine("     , case when isnull(a.사입품, 'N') = 'Y' then 'Y' else '' end 사입품 ");
            stringBuilder.AppendLine("     , d.거래처명 as 주매입처 ");
            stringBuilder.AppendLine("     , c5.명칭 as 사용여부 ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine("     left outer join C_상품구분 c1 on c1.코드 = a.상품구분 ");
            stringBuilder.AppendLine("     left outer join C_과세구분 c2 on c2.코드 = a.과세구분 ");
            stringBuilder.AppendLine("     left outer join P_상품유형 c3 on c3.코드 = a.상품유형코드 and c3.사업자번호 = a.사업자번호 and c3.지점코드 = '0' ");
            stringBuilder.AppendLine("     left outer join P_제조사   c4 on c4.코드 = a.제조사코드 and c4.사업자번호 = a.사업자번호 and c4.지점코드 = '0' ");
            stringBuilder.AppendLine("     left outer join C_상품여부 c5 on c5.코드 = a.사용여부 ");
            stringBuilder.AppendLine("     left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.주매입처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            if (s납품분여부 == "Y")
            {
                if (s매입매출 == "매입")
                    stringBuilder.Append(" and a.상품코드 in (select distinct 상품코드 from T_매입단가표 where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 거래처코드 = '" + sCust + "') ");
                else
                    stringBuilder.Append(" and a.상품코드 in (select distinct 상품코드 from T_매출단가표 where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 거래처코드 = '" + sCust + "') ");
            }
            if (bOrdNum)
                stringBuilder.AppendLine(" order by a.정렬순서 asc, a.상품코드 asc ");
            else
                stringBuilder.AppendLine(" order by a.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품_List_Popup(
          string condition,
          string s납품분여부,
          string s매입매출,
          string sCust,
          bool bOrdNum,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.총수량) as 매입총수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스낱개) as 매입서비스낱개수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스박스) as 매입서비스박스수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp매입 ");
            stringBuilder.AppendLine("\t\t                    from T_매입 x ");
            stringBuilder.AppendLine("\t\t\t                    inner join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t                    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.창고코드 = @p_1 ");
            stringBuilder.AppendLine("\t\t\t                    and x.매입일자 > convert(nvarchar(10), getdate(), 120) ");
            stringBuilder.AppendLine("\t\t                    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.총수량) as 매출총수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스낱개) as 매출서비스낱개수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스박스) as 매출서비스박스수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp매출 ");
            stringBuilder.AppendLine("\t\t                    from T_매출 x ");
            stringBuilder.AppendLine("\t\t\t                    inner join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t\t                        and y.매출구분 <> '4' ");
            stringBuilder.AppendLine("\t\t                    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.창고코드 = @p_1 ");
            stringBuilder.AppendLine("\t\t\t                    and x.매출일자 > convert(nvarchar(10), getdate(), 120) ");
            stringBuilder.AppendLine("\t\t                    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.입고창고코드, y.상품코드, sum(y.총수량) as 입고총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp창고입고 ");
            stringBuilder.AppendLine("                         from T_창고이동 x ");
            stringBuilder.AppendLine("                             inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("                         where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.입고창고코드 = @p_1 ");
            stringBuilder.AppendLine("                             and x.수불일자 > convert(nvarchar(10), getdate(), 120) ");
            stringBuilder.AppendLine("                         group by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.출고창고코드, y.상품코드, sum(y.총수량) as 출고총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp창고출고 ");
            stringBuilder.AppendLine("                         from T_창고이동 x ");
            stringBuilder.AppendLine("                             inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("                         where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.출고창고코드 = @p_1 ");
            stringBuilder.AppendLine("                             and x.수불일자 > convert(nvarchar(10), getdate(), 120) ");
            stringBuilder.AppendLine("                         group by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     a.상품코드 ");
            stringBuilder.AppendLine("     , a.Old_Code as 별칭코드 ");
            stringBuilder.AppendLine("     , a.상품명 ");
            stringBuilder.AppendLine("     , a.규격 ");
            stringBuilder.AppendLine("     , isnull(c.현재재고, 0) - isnull(q.매입총수량, 0) - isnull(q.매입서비스낱개수량, 0) - isnull(q.매입서비스박스수량, 0) - isnull(s.입고총수량, 0) ");
            stringBuilder.AppendLine("         + isnull(r.매출총수량, 0) + isnull(r.매출서비스낱개수량, 0) + isnull(r.매출서비스박스수량, 0) + isnull(w.출고총수량, 0) as 현재고 ");
            if (Common.p_strEgg == "Y")
            {
                if (Common.p_strBox == "2" || Common.p_strBox == "3")
                    stringBuilder.AppendLine("     , a.입수수량 ");
                if (Common.p_strBox == "2" || Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.박스바코드 as 판_바코드");
                    stringBuilder.AppendLine("     , a.박스입고단가 as 판_입고단가");
                    stringBuilder.AppendLine("     , a.박스판매단가 as 판_판매단가");
                    stringBuilder.AppendLine("     , a.박스도매단가 as 판_중상입고단가");
                }
                if (Common.p_strBox == "1" || Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.낱개바코드 as 알_바코드");
                    stringBuilder.AppendLine("     , a.낱개입고단가 as 알_입고단가");
                    stringBuilder.AppendLine("     , a.낱개판매단가 as 알_판매단가");
                    stringBuilder.AppendLine("     , a.낱개도매단가 as 알_중상입고단가");
                }
            }
            else
            {
                if (Common.p_strBox == "2" || Common.p_strBox == "3")
                    stringBuilder.AppendLine("     , a.입수수량 ");
                if (Common.p_strBox == "2" || Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.박스바코드 ");
                    stringBuilder.AppendLine("     , a.박스입고단가 ");
                    stringBuilder.AppendLine("     , a.박스판매단가 ");
                    stringBuilder.AppendLine("     , a.박스도매단가 as 박스중상입고단가 ");
                }
                if (Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.중간입수수량 ");
                    stringBuilder.AppendLine("     , a.중간바코드 ");
                }
                if (Common.p_strBox == "1" || Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.낱개바코드 ");
                    stringBuilder.AppendLine("     , a.낱개입고단가 ");
                    stringBuilder.AppendLine("     , a.낱개판매단가 ");
                    stringBuilder.AppendLine("     , a.낱개도매단가 as 낱개중상입고단가 ");
                }
            }
            stringBuilder.AppendLine("     , c1.명칭 as 상품구분 ");
            stringBuilder.AppendLine("     , c2.명칭 as 과세구분 ");
            stringBuilder.AppendLine("     , c3.명칭 as 상품유형 ");
            stringBuilder.AppendLine("     , c4.명칭 as 제조사 ");
            stringBuilder.AppendLine("     , convert(nvarchar(10), a.유통기간) + ' 개월' as 유통기간 ");
            stringBuilder.AppendLine("     , c5.명칭 as 사용여부 ");
            stringBuilder.AppendLine("     , a.정렬순서 ");
            stringBuilder.AppendLine("     , isnull(uu.상품코드, '') as 납품납입분 ");
            stringBuilder.AppendLine("     , '0' as 선택 ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine("     left outer join C_상품구분 c1 on c1.코드 = a.상품구분 ");
            stringBuilder.AppendLine("     left outer join C_과세구분 c2 on c2.코드 = a.과세구분 ");
            stringBuilder.AppendLine("     left outer join P_상품유형 c3 on c3.코드 = a.상품유형코드 and c3.사업자번호 = a.사업자번호 and c3.지점코드 = '0' ");
            stringBuilder.AppendLine("     left outer join P_제조사   c4 on c4.코드 = a.제조사코드 and c4.사업자번호 = a.사업자번호 and c4.지점코드 = '0' ");
            stringBuilder.AppendLine("     left outer join C_상품여부 c5 on c5.코드 = a.사용여부 ");
            if (s매입매출 == "매입")
            {
                stringBuilder.AppendLine("     left outer join ( ");
                stringBuilder.AppendLine("         select 사업자번호, 지점코드, 거래처코드, 상품코드 ");
                stringBuilder.AppendLine("         from T_매입단가표 ");
                stringBuilder.AppendLine("         where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 거래처코드 = '" + sCust + "' ");
                stringBuilder.AppendLine("         group by 사업자번호, 지점코드, 거래처코드, 상품코드 ");
                stringBuilder.AppendLine("         ) uu on uu.사업자번호 = a.사업자번호 and uu.지점코드 = a.지점코드 and uu.거래처코드 = '" + sCust + "' and uu.상품코드 = a.상품코드 ");
            }
            else
            {
                stringBuilder.AppendLine("     left outer join ( ");
                stringBuilder.AppendLine("         select 사업자번호, 지점코드, 거래처코드, 상품코드 ");
                stringBuilder.AppendLine("         from T_매출단가표 ");
                stringBuilder.AppendLine("         where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 거래처코드 = '" + sCust + "' ");
                stringBuilder.AppendLine("         group by 사업자번호, 지점코드, 거래처코드, 상품코드 ");
                stringBuilder.AppendLine("         ) uu on uu.사업자번호 = a.사업자번호 and uu.지점코드 = a.지점코드 and uu.거래처코드 = '" + sCust + "' and uu.상품코드 = a.상품코드 ");
            }
            stringBuilder.AppendLine("     left outer join P_창고 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.코드 = @p_1");
            stringBuilder.AppendLine("     left outer join T_상품창고별재고 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.상품코드 = a.상품코드 and c.창고코드 = b.코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp매입 q on q.상품코드 = a.상품코드 and q.창고코드 = b.코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp매출 r on r.상품코드 = a.상품코드 and r.창고코드 = b.코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp창고입고 s on s.상품코드 = a.상품코드 and s.입고창고코드 = b.코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp창고출고 w on w.상품코드 = a.상품코드 and w.출고창고코드 = b.코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            if (s납품분여부 == "Y")
            {
                if (s매입매출 == "매입")
                    stringBuilder.Append(" and a.상품코드 in (select distinct 상품코드 from T_매입단가표 where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 거래처코드 = '" + sCust + "') ");
                else
                    stringBuilder.Append(" and a.상품코드 in (select distinct 상품코드 from T_매출단가표 where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 거래처코드 = '" + sCust + "') ");
            }
            if (bOrdNum)
                stringBuilder.AppendLine(" order by a.정렬순서 asc, a.상품코드 asc ");
            else
                stringBuilder.AppendLine(" order by a.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)"000");
            sCommand.Parameters.AddWithValue("@p_day", (object)DateTime.Now.ToString("yyyy-MM-dd"));
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_상품정렬_List_Popup(
          string condition,
          string s납품분여부,
          string s매입매출,
          string sCust,
          bool bOrdNum,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.총수량) as 매입총수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스낱개) as 매입서비스낱개수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스박스) as 매입서비스박스수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp매입 ");
            stringBuilder.AppendLine("\t\t                    from T_매입 x ");
            stringBuilder.AppendLine("\t\t\t                    inner join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t                    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.창고코드 = @p_1 ");
            stringBuilder.AppendLine("\t\t\t                    and x.매입일자 > convert(nvarchar(10), getdate(), 120) ");
            stringBuilder.AppendLine("\t\t                    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.총수량) as 매출총수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스낱개) as 매출서비스낱개수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스박스) as 매출서비스박스수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp매출 ");
            stringBuilder.AppendLine("\t\t                    from T_매출 x ");
            stringBuilder.AppendLine("\t\t\t                    inner join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t\t                        and y.매출구분 <> '4' ");
            stringBuilder.AppendLine("\t\t                    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.창고코드 = @p_1 ");
            stringBuilder.AppendLine("\t\t\t                    and x.매출일자 > convert(nvarchar(10), getdate(), 120) ");
            stringBuilder.AppendLine("\t\t                    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.입고창고코드, y.상품코드, sum(y.총수량) as 입고총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp창고입고 ");
            stringBuilder.AppendLine("                         from T_창고이동 x ");
            stringBuilder.AppendLine("                             inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("                         where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.입고창고코드 = @p_1 ");
            stringBuilder.AppendLine("                             and x.수불일자 > convert(nvarchar(10), getdate(), 120) ");
            stringBuilder.AppendLine("                         group by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.출고창고코드, y.상품코드, sum(y.총수량) as 출고총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp창고출고 ");
            stringBuilder.AppendLine("                         from T_창고이동 x ");
            stringBuilder.AppendLine("                             inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("                         where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.출고창고코드 = @p_1 ");
            stringBuilder.AppendLine("                             and x.수불일자 > convert(nvarchar(10), getdate(), 120) ");
            stringBuilder.AppendLine("                         group by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     a.상품코드 ");
            stringBuilder.AppendLine("     , a.Old_Code as 별칭코드 ");
            stringBuilder.AppendLine("     , a.상품명 ");
            stringBuilder.AppendLine("     , a.규격 ");
            stringBuilder.AppendLine("     , a.정렬순서 ");
            stringBuilder.AppendLine("    , '' as 수정정렬");
            stringBuilder.AppendLine("     , isnull(c.현재재고, 0) - isnull(q.매입총수량, 0) - isnull(q.매입서비스낱개수량, 0) - isnull(q.매입서비스박스수량, 0) - isnull(s.입고총수량, 0) ");
            stringBuilder.AppendLine("         + isnull(r.매출총수량, 0) + isnull(r.매출서비스낱개수량, 0) + isnull(r.매출서비스박스수량, 0) + isnull(w.출고총수량, 0) as 현재고 ");
            if (Common.p_strEgg == "Y")
            {
                if (Common.p_strBox == "2" || Common.p_strBox == "3")
                    stringBuilder.AppendLine("     , a.입수수량 ");
                if (Common.p_strBox == "2" || Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.박스바코드 as 판_바코드");
                    stringBuilder.AppendLine("     , a.박스입고단가 as 판_입고단가");
                    stringBuilder.AppendLine("     , a.박스판매단가 as 판_판매단가");
                    stringBuilder.AppendLine("     , a.박스도매단가 as 판_중상입고단가");
                }
                if (Common.p_strBox == "1" || Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.낱개바코드 as 알_바코드");
                    stringBuilder.AppendLine("     , a.낱개입고단가 as 알_입고단가");
                    stringBuilder.AppendLine("     , a.낱개판매단가 as 알_판매단가");
                    stringBuilder.AppendLine("     , a.낱개도매단가 as 알_중상입고단가");
                }
            }
            else
            {
                if (Common.p_strBox == "2" || Common.p_strBox == "3")
                    stringBuilder.AppendLine("     , a.입수수량 ");
                if (Common.p_strBox == "2" || Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.박스바코드 ");
                    stringBuilder.AppendLine("     , a.박스입고단가 ");
                    stringBuilder.AppendLine("     , a.박스판매단가 ");
                    stringBuilder.AppendLine("     , a.박스도매단가 as 박스중상입고단가 ");
                }
                if (Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.중간입수수량 ");
                    stringBuilder.AppendLine("     , a.중간바코드 ");
                }
                if (Common.p_strBox == "1" || Common.p_strBox == "3")
                {
                    stringBuilder.AppendLine("     , a.낱개바코드 ");
                    stringBuilder.AppendLine("     , a.낱개입고단가 ");
                    stringBuilder.AppendLine("     , a.낱개판매단가 ");
                    stringBuilder.AppendLine("     , a.낱개도매단가 as 낱개중상입고단가 ");
                }
            }
            stringBuilder.AppendLine("     , c1.명칭 as 상품구분 ");
            stringBuilder.AppendLine("     , c2.명칭 as 과세구분 ");
            stringBuilder.AppendLine("     , c3.명칭 as 상품유형 ");
            stringBuilder.AppendLine("     , c4.명칭 as 제조사 ");
            stringBuilder.AppendLine("     , convert(nvarchar(10), a.유통기간) + ' 개월' as 유통기간 ");
            stringBuilder.AppendLine("     , c5.명칭 as 사용여부 ");
            
            stringBuilder.AppendLine("     , isnull(uu.상품코드, '') as 납품납입분 ");
            stringBuilder.AppendLine("     , '0' as 선택 ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine("     left outer join C_상품구분 c1 on c1.코드 = a.상품구분 ");
            stringBuilder.AppendLine("     left outer join C_과세구분 c2 on c2.코드 = a.과세구분 ");
            stringBuilder.AppendLine("     left outer join P_상품유형 c3 on c3.코드 = a.상품유형코드 and c3.사업자번호 = a.사업자번호 and c3.지점코드 = '0' ");
            stringBuilder.AppendLine("     left outer join P_제조사   c4 on c4.코드 = a.제조사코드 and c4.사업자번호 = a.사업자번호 and c4.지점코드 = '0' ");
            stringBuilder.AppendLine("     left outer join C_상품여부 c5 on c5.코드 = a.사용여부 ");
            if (s매입매출 == "매입")
            {
                stringBuilder.AppendLine("     left outer join ( ");
                stringBuilder.AppendLine("         select 사업자번호, 지점코드, 거래처코드, 상품코드 ");
                stringBuilder.AppendLine("         from T_매입단가표 ");
                stringBuilder.AppendLine("         where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 거래처코드 = '" + sCust + "' ");
                stringBuilder.AppendLine("         group by 사업자번호, 지점코드, 거래처코드, 상품코드 ");
                stringBuilder.AppendLine("         ) uu on uu.사업자번호 = a.사업자번호 and uu.지점코드 = a.지점코드 and uu.거래처코드 = '" + sCust + "' and uu.상품코드 = a.상품코드 ");
            }
            else
            {
                stringBuilder.AppendLine("     left outer join ( ");
                stringBuilder.AppendLine("         select 사업자번호, 지점코드, 거래처코드, 상품코드 ");
                stringBuilder.AppendLine("         from T_매출단가표 ");
                stringBuilder.AppendLine("         where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 거래처코드 = '" + sCust + "' ");
                stringBuilder.AppendLine("         group by 사업자번호, 지점코드, 거래처코드, 상품코드 ");
                stringBuilder.AppendLine("         ) uu on uu.사업자번호 = a.사업자번호 and uu.지점코드 = a.지점코드 and uu.거래처코드 = '" + sCust + "' and uu.상품코드 = a.상품코드 ");
            }
            stringBuilder.AppendLine("     left outer join P_창고 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.코드 = @p_1");
            stringBuilder.AppendLine("     left outer join T_상품창고별재고 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.상품코드 = a.상품코드 and c.창고코드 = b.코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp매입 q on q.상품코드 = a.상품코드 and q.창고코드 = b.코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp매출 r on r.상품코드 = a.상품코드 and r.창고코드 = b.코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp창고입고 s on s.상품코드 = a.상품코드 and s.입고창고코드 = b.코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp창고출고 w on w.상품코드 = a.상품코드 and w.출고창고코드 = b.코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            if (s납품분여부 == "Y")
            {
                if (s매입매출 == "매입")
                    stringBuilder.Append(" and a.상품코드 in (select distinct 상품코드 from T_매입단가표 where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 거래처코드 = '" + sCust + "') ");
                else
                    stringBuilder.Append(" and a.상품코드 in (select distinct 상품코드 from T_매출단가표 where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 거래처코드 = '" + sCust + "') ");
            }
            if (bOrdNum)
                stringBuilder.AppendLine(" order by a.정렬순서 asc, a.상품코드 asc ");
            else
                stringBuilder.AppendLine(" order by a.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)"000");
            sCommand.Parameters.AddWithValue("@p_day", (object)DateTime.Now.ToString("yyyy-MM-dd"));
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }


        public DataTable fn_상품_안전재고_List(
          string sDay,
          string sWare,
          string sIN_query,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.총수량) as 매입총수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스낱개) as 매입서비스낱개수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스박스) as 매입서비스박스수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp매입 ");
            stringBuilder.AppendLine("\t\t                    from T_매입 x ");
            stringBuilder.AppendLine("\t\t\t                    left outer join T_매입항목 y on y.사업자번호 = '" + Common.p_strCompID + "' and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 and y.상품코드 in ( " + sIN_query + " ) ");
            stringBuilder.AppendLine("\t\t                    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.창고코드 = @p_1 ");
            stringBuilder.AppendLine("\t\t\t                    and x.매입일자 <= @p_day ");
            stringBuilder.AppendLine("\t\t                    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.총수량) as 매출총수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스낱개) as 매출서비스낱개수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스박스) as 매출서비스박스수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp매출 ");
            stringBuilder.AppendLine("\t\t                    from T_매출 x ");
            stringBuilder.AppendLine("\t\t\t                    left outer join T_매출항목 y on y.사업자번호 = '" + Common.p_strCompID + "' and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 and y.상품코드 in ( " + sIN_query + " ) ");
            stringBuilder.AppendLine("\t\t\t                        and y.매출구분 <> '4' ");
            stringBuilder.AppendLine("\t\t                    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.창고코드 = @p_1 ");
            stringBuilder.AppendLine("\t\t\t                    and x.매출일자 <= @p_day ");
            stringBuilder.AppendLine("\t\t                    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.입고창고코드, y.상품코드, sum(y.총수량) as 입고총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp창고입고 ");
            stringBuilder.AppendLine("                         from T_창고이동 x ");
            stringBuilder.AppendLine("                             inner join T_창고이동항목 y on y.사업자번호 = '" + Common.p_strCompID + "' and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 and y.상품코드 in ( " + sIN_query + " ) ");
            stringBuilder.AppendLine("                         where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.입고창고코드 = @p_1 ");
            stringBuilder.AppendLine("                             and x.수불일자 <= @p_day ");
            stringBuilder.AppendLine("                         group by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.출고창고코드, y.상품코드, sum(y.총수량) as 출고총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp창고출고 ");
            stringBuilder.AppendLine("                         from T_창고이동 x ");
            stringBuilder.AppendLine("                             inner join T_창고이동항목 y on y.사업자번호 = '" + Common.p_strCompID + "' and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 and y.상품코드 in ( " + sIN_query + " ) ");
            stringBuilder.AppendLine("                         where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.출고창고코드 = @p_1 ");
            stringBuilder.AppendLine("                             and x.수불일자 <= @p_day ");
            stringBuilder.AppendLine("                         group by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     a.상품코드 ");
            stringBuilder.AppendLine("     , a.상품명 ");
            stringBuilder.AppendLine("     , a.규격 ");
            stringBuilder.AppendLine("     , isnull(a.안전재고, 0) as 안전재고 ");
            stringBuilder.AppendLine("     , isnull(c.초기재고, 0) + isnull(q.매입총수량, 0) + isnull(q.매입서비스낱개수량, 0) + isnull(q.매입서비스박스수량, 0) + isnull(s.입고총수량, 0) ");
            stringBuilder.AppendLine("         - isnull(r.매출총수량, 0) - isnull(r.매출서비스낱개수량, 0) - isnull(r.매출서비스박스수량, 0) - isnull(w.출고총수량, 0) as 현재고 ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine("     left outer join P_창고 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.코드 = @p_1");
            stringBuilder.AppendLine("     left outer join T_상품창고별재고 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.상품코드 = a.상품코드 and c.창고코드 = b.코드 ");
            stringBuilder.AppendLine("     left outer join #Tmp매입 q on q.상품코드 = a.상품코드 and q.창고코드 = b.코드 ");
            stringBuilder.AppendLine("     left outer join #Tmp매출 r on r.상품코드 = a.상품코드 and r.창고코드 = b.코드 ");
            stringBuilder.AppendLine("     left outer join #Tmp창고입고 s on s.상품코드 = a.상품코드 and s.입고창고코드 = b.코드 ");
            stringBuilder.AppendLine("     left outer join #Tmp창고출고 w on w.상품코드 = a.상품코드 and w.출고창고코드 = b.코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 in ( " + sIN_query + " ) ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sWare);
            sCommand.Parameters.AddWithValue("@p_day", (object)sDay);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_상품_Detail(string p1, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , c.거래처명 as 주매입처명 ");
            stringBuilder.AppendLine("     , pc.사진 ");
            stringBuilder.AppendLine("     , pc.사진형식 ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine("     left outer join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.주매입처코드 ");
            stringBuilder.AppendLine("     left outer join T_상품별사진 pc on pc.사업자번호 = a.사업자번호 and pc.지점코드 = a.지점코드 and pc.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_상품_Detail_별칭코드(string p1, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , c.거래처명 as 주매입처명 ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine("     left outer join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.주매입처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.Old_Code = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_상품이벤트단가_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine(" from T_상품이벤트단가 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.단가구분 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품_단가(string p1, string sCust, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" declare @단가구분 as nvarchar(4) ");
            stringBuilder.AppendLine(" select @단가구분 = isnull(단가구분, '') from T_거래처정보 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     a.상품코드 ");
            stringBuilder.AppendLine("     , a.상품명 ");
            stringBuilder.AppendLine("     , a.상품별칭 ");
            stringBuilder.AppendLine("     , a.규격 ");
            stringBuilder.AppendLine("     , a.정렬순서 ");
            stringBuilder.AppendLine("     , a.낱개기본판매수량 ");
            stringBuilder.AppendLine("     , a.낱개입고단가 ");
            stringBuilder.AppendLine("     , case when @단가구분 <> '' and @단가구분 <> '_F_' then b.낱개판매단가 else a.낱개판매단가 end as 낱개판매단가 ");
            stringBuilder.AppendLine("     , a.낱개도매단가 ");
            stringBuilder.AppendLine("     , a.낱개바코드 ");
            stringBuilder.AppendLine("     , a.입수수량 ");
            stringBuilder.AppendLine("     , a.박스기본판매수량 ");
            stringBuilder.AppendLine("     , a.박스입고단가 ");
            stringBuilder.AppendLine("     , case when @단가구분 <> '' and @단가구분 <> '_F_' then b.박스판매단가 else a.박스판매단가 end as 박스판매단가 ");
            stringBuilder.AppendLine("     , a.박스도매단가 ");
            stringBuilder.AppendLine("     , a.박스바코드 ");
            stringBuilder.AppendLine("     , a.중간입수수량 ");
            stringBuilder.AppendLine("     , a.중간기본판매수량 ");
            stringBuilder.AppendLine("     , a.중간입고단가 ");
            stringBuilder.AppendLine("     , case when @단가구분 <> '' and @단가구분 <> '_F_' then b.중간판매단가 else a.중간판매단가 end as 중간판매단가 ");
            stringBuilder.AppendLine("     , a.중간도매단가 ");
            stringBuilder.AppendLine("     , a.중간바코드 ");
            stringBuilder.AppendLine("     , a.상품구분 ");
            stringBuilder.AppendLine("     , a.과세구분 ");
            stringBuilder.AppendLine("     , a.상품유형코드 ");
            stringBuilder.AppendLine("     , a.제조사코드 ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine("     left outer join T_상품이벤트단가 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.상품코드 = a.상품코드 and b.단가구분 = @단가구분 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_사용자_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine("     , c.* ");
            stringBuilder.AppendLine(" from T_사용자정보 a ");
            stringBuilder.AppendLine("     left outer join T_사용자사업자 b on b.사업자번호 = a.사업자번호 and b.사원번호 = a.사원번호 and b.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join T_사용자권한 c on c.사업자번호 = a.사업자번호 and c.사원번호 = a.사원번호 and c.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.사용자명 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_사용자_Using(string condition, string condition2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select count(*) from ( ");
            stringBuilder.AppendLine(" select top 1 사원번호 ");
            stringBuilder.AppendLine(" from T_거래처정보 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 사원번호 ");
            stringBuilder.AppendLine(" from T_지출 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 담당사원 ");
            stringBuilder.AppendLine(" from T_견적 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition2 + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 담당사원 ");
            stringBuilder.AppendLine(" from T_매입 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition2 + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 담당사원 ");
            stringBuilder.AppendLine(" from T_매출 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition2 + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 담당사원 ");
            stringBuilder.AppendLine(" from T_발주 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition2 + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 담당사원 ");
            stringBuilder.AppendLine(" from T_수금 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition2 + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 담당사원 ");
            stringBuilder.AppendLine(" from T_장비대여 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition2 + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 담당사원 ");
            stringBuilder.AppendLine(" from T_주문 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition2 + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select top 1 담당사원 ");
            stringBuilder.AppendLine(" from T_지급 ");
            stringBuilder.AppendLine(" where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition2 + "   ");
            stringBuilder.AppendLine(" ) z ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_사용자_List_Bind(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     a.사원번호 ");
            stringBuilder.AppendLine("     , a.사용자명 ");
            stringBuilder.AppendLine("     , a.UID ");
            stringBuilder.AppendLine("     , a.전화번호 ");
            stringBuilder.AppendLine("     , a.폰번호 ");
            stringBuilder.AppendLine("     , a.우편번호 ");
            stringBuilder.AppendLine("     , a.주소 ");
            stringBuilder.AppendLine("     , a.상세주소 ");
            stringBuilder.AppendLine("     , a.입사일자 ");
            stringBuilder.AppendLine("     , case when isnull(a.퇴사여부, '') = 'Y' then a.퇴사일자 else '' end as 퇴사일자 ");
            stringBuilder.AppendLine("     , c1.명칭 as 부서 ");
            stringBuilder.AppendLine("     , c2.명칭 as 직위 ");
            stringBuilder.AppendLine("     , c3.명칭 as 창고 ");
            stringBuilder.AppendLine("     , isnull(a.근무시간1, '') + ' ~ ' + isnull(a.근무시간2, '') as 근무시간 ");
            stringBuilder.AppendLine("     , case when isnull(a.어플여부, '') = 'Y' then '사용' else '' end as 어플 ");
            stringBuilder.AppendLine("     , case when isnull(a.시간제한여부, '') = 'Y' then '제한' else '무제한' end as 시간제한 ");
            stringBuilder.AppendLine("     , b.개인사업자번호 ");
            stringBuilder.AppendLine("     , b.상호명 ");
            stringBuilder.AppendLine("     , b.대표자명 ");
            stringBuilder.AppendLine("     , b.이메일 ");
            stringBuilder.AppendLine("     , b.업태 ");
            stringBuilder.AppendLine("     , b.종목 ");
            stringBuilder.AppendLine("     , b.사업우편번호 ");
            stringBuilder.AppendLine("     , b.사업주소 ");
            stringBuilder.AppendLine("     , b.사업상세주소 ");
            stringBuilder.AppendLine("     , b.사업전화번호 ");
            stringBuilder.AppendLine("     , b.사업폰번호 ");
            stringBuilder.AppendLine(" from T_사용자정보 a ");
            stringBuilder.AppendLine("     left outer join T_사용자사업자 b on b.사업자번호 = a.사업자번호 and b.사원번호 = a.사원번호 and b.지점코드 = a.지점코드  ");
            stringBuilder.AppendLine("     left outer join P_부서 c1 on c1.코드 = a.부서코드 and c1.사업자번호 = a.사업자번호 and c1.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join P_직위 c2 on c2.코드 = a.직위코드 and c2.사업자번호 = a.사업자번호 and c2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join P_창고 c3 on c3.코드 = a.창고코드 and c3.사업자번호 = a.사업자번호 and c3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join C_근무형태 c4 on c4.코드 = a.근무형태코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.사원번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable root_사용자_Detail(string p1, string p2, string p3, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine("     , c.* ");
            stringBuilder.AppendLine(" from T_사용자정보 a ");
            stringBuilder.AppendLine("     left outer join T_사용자사업자 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine("     left outer join T_사용자권한 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = @p_1 ");
            stringBuilder.AppendLine("     and a.지점코드 = @p_2 ");
            stringBuilder.AppendLine("     and a.사원번호 = @p_3 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            sCommand.Parameters.AddWithValue("@p_2", (object)p2);
            sCommand.Parameters.AddWithValue("@p_3", (object)p3);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_사용자_Detail(string p1, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine("     , c.* ");
            stringBuilder.AppendLine("     , d.거래처명 as 중상거래처명 ");
            stringBuilder.AppendLine(" from T_사용자정보 a ");
            stringBuilder.AppendLine("     left outer join T_사용자사업자 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine("     left outer join T_사용자권한 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine("     left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.중상거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.사원번호 = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_사용자_아이디(string p2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_사용자정보 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.UID = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_2", (object)p2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_사용자_폰번호(string p1, string p2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_사용자정보 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.사원번호 <> @p_1 ");
            stringBuilder.AppendLine("     and replace(replace(replace(replace(replace(a.폰번호, '-', ''), '.', ''), ' ', ''), '(', ''), ')', '') = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            sCommand.Parameters.AddWithValue("@p_2", (object)p2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_중상주문_List(string sDay1, string sCust, string sProd, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select b.* ");
            stringBuilder.AppendLine(" \t, (case when '" + Common.p_strBox + "' = '2' then (case when isnull(u.사업자번호, '') = '' then p.박스입고단가 else u.박스단가 end) ");
            stringBuilder.AppendLine(" \t\telse (case when isnull(u.사업자번호, '') = '' then p.낱개입고단가 else u.낱개단가 end) ");
            stringBuilder.AppendLine(" \t\tend) as 입고단가 ");
            stringBuilder.AppendLine(" \t, (case when isnull(u.사업자번호, '') = '' then p.박스입고단가 else u.박스단가 end) as 박스입고단가 ");
            stringBuilder.AppendLine(" \t, (case when isnull(u.사업자번호, '') = '' then p.낱개입고단가 else u.낱개단가 end) as 낱개입고단가 ");
            stringBuilder.AppendLine(" \t, c.거래처명 ");
            stringBuilder.AppendLine(" \t, p.상품명 ");
            stringBuilder.AppendLine(" \t, p.규격 ");
            stringBuilder.AppendLine(" \t, p.과세구분 ");
            stringBuilder.AppendLine(" \t, dbo.Func_박스수량환산(b.총수량, b.사업자번호, b.지점코드, b.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" \t, gb.명칭 as 매출구분명 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" \tselect b.사업자번호 ");
            stringBuilder.AppendLine(" \t\t, b.지점코드 ");
            stringBuilder.AppendLine(" \t\t, b.거래처코드 ");
            stringBuilder.AppendLine(" \t\t, b.상품코드 ");
            stringBuilder.AppendLine(" \t\t, b.총수량 ");
            stringBuilder.AppendLine(" \t\t, (case when isnull(e.사업자번호, '') = '' then '1' else '2' end) as 매출구분 ");
            stringBuilder.AppendLine(" \t\t, isnull(c.단가구분, '') as 단가구분 ");
            stringBuilder.AppendLine(" \t\t, case when isnull(c.단가구분, '') = '' then '(최종단가)' when isnull(c.단가구분, '') = '_F_' then '(마스터단가)' else isnull(en.명칭, '') end as 단가구분명 ");
            stringBuilder.AppendLine(" \t\t, b.총수량 *  ");
            stringBuilder.AppendLine(" \t\t\t(case when '" + Common.p_strBox + "' = '2' then ");
            stringBuilder.AppendLine(" \t\t\t\t(case when isnull(e.사업자번호, '') <> '' then e.박스판매단가 ");
            stringBuilder.AppendLine(" \t\t\t\telse (case when isnull(u.사업자번호, '') = '' then p.박스도매단가 else u.박스단가 end) ");
            stringBuilder.AppendLine(" \t\t\t\tend) ");
            stringBuilder.AppendLine(" \t\t\telse ");
            stringBuilder.AppendLine(" \t\t\t\t(case when isnull(e.사업자번호, '') <> '' then e.낱개판매단가 ");
            stringBuilder.AppendLine(" \t\t\t\telse (case when isnull(u.사업자번호, '') = '' then p.낱개도매단가 else u.낱개단가 end) ");
            stringBuilder.AppendLine(" \t\t\t\tend) ");
            stringBuilder.AppendLine(" \t\t\tend) as 금액 ");
            stringBuilder.AppendLine(" \t\t, (case when '" + Common.p_strBox + "' = '2' then ");
            stringBuilder.AppendLine(" \t\t\t\t(case when isnull(e.사업자번호, '') <> '' then e.박스판매단가 ");
            stringBuilder.AppendLine(" \t\t\t\telse (case when isnull(u.사업자번호, '') = '' then p.박스도매단가 else u.박스단가 end) ");
            stringBuilder.AppendLine(" \t\t\t\tend) ");
            stringBuilder.AppendLine(" \t\t\telse ");
            stringBuilder.AppendLine(" \t\t\t\t(case when isnull(e.사업자번호, '') <> '' then e.낱개판매단가 ");
            stringBuilder.AppendLine(" \t\t\t\telse (case when isnull(u.사업자번호, '') = '' then p.낱개도매단가 else u.낱개단가 end) ");
            stringBuilder.AppendLine(" \t\t\t\tend) ");
            stringBuilder.AppendLine(" \t\t\tend) as 단가 ");
            stringBuilder.AppendLine(" \tfrom ( ");
            stringBuilder.AppendLine(" \t\tselect a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t, '0' as 지점코드 ");
            stringBuilder.AppendLine(" \t\t\t, a.지점코드 as 거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t, b.상품코드 ");
            stringBuilder.AppendLine(" \t\t\t, sum(b.총수량) as 총수량 ");
            stringBuilder.AppendLine(" \t\tfrom T_주문 a  ");
            stringBuilder.AppendLine(" \t\t\tinner join T_주문항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.주문일자 = a.주문일자 and b.주문번호 = a.주문번호  ");
            stringBuilder.AppendLine(" \t\t\tinner join T_상품정보 p on p.사업자번호 = b.사업자번호 and p.지점코드 = '0' and p.상품코드 = b.상품코드  ");
            stringBuilder.AppendLine(" \t\twhere a.사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine(" \t\t\tand a.지점코드 <> '0'  ");
            stringBuilder.AppendLine(" \t\t\tand '" + Common.p_strSpotCode + "' = '0'  ");
            stringBuilder.AppendLine(" \t\t\tand a.주문일자 = '" + sDay1 + "'  ");
            if (sCust != "")
                stringBuilder.AppendLine("             and a.지점코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("             and b.상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine(" \t\tgroup by a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t, a.지점코드 ");
            stringBuilder.AppendLine(" \t\t\t, b.상품코드 ");
            stringBuilder.AppendLine(" \t    ) b ");
            stringBuilder.AppendLine(" \t\tinner join T_상품정보 p on p.사업자번호 = b.사업자번호 and p.지점코드 = b.지점코드 and p.상품코드 = b.상품코드  ");
            stringBuilder.AppendLine(" \t\tleft outer join ( ");
            stringBuilder.AppendLine(" \t\t\tselect a.* ");
            stringBuilder.AppendLine(" \t\t\tfrom T_매출단가표 a ");
            stringBuilder.AppendLine(" \t\t\t\tinner join ( ");
            stringBuilder.AppendLine(" \t\t\t\t\tselect 사업자번호, 지점코드, 거래처코드, 상품코드, MAX(매출일자) as 매출일자 ");
            stringBuilder.AppendLine(" \t\t\t\t\tfrom T_매출단가표 ");
            stringBuilder.AppendLine(" \t\t\t\t\twhere 사업자번호 = '" + Common.p_strCompID + "' and 매출일자 <= '" + sDay1 + "' ");
            stringBuilder.AppendLine(" \t\t\t\t\tgroup by 사업자번호, 지점코드, 거래처코드, 상품코드 ");
            stringBuilder.AppendLine(" \t\t\t\t) b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.거래처코드 = a.거래처코드 and b.상품코드 = a.상품코드 and b.매출일자 = a.매출일자 ");
            stringBuilder.AppendLine(" \t\t\t) u on u.사업자번호 = b.사업자번호 and u.지점코드 = '0' and u.상품코드 = b.상품코드 and u.거래처코드 = b.지점코드 ");
            stringBuilder.AppendLine(" \t    inner join T_거래처정보 c on c.사업자번호 = b.사업자번호 and c.지점코드 = b.지점코드 and c.거래처코드 = b.거래처코드  ");
            stringBuilder.AppendLine(" \t    left outer join T_상품이벤트단가 e on e.사업자번호 = b.사업자번호 and e.지점코드 = b.지점코드 and e.상품코드 = b.상품코드 and e.단가구분 = c.단가구분  ");
            stringBuilder.AppendLine(" \t    left outer join P_단가구분 en on en.사업자번호 = b.사업자번호 and en.지점코드 = b.지점코드 and en.코드 = c.단가구분  ");
            stringBuilder.AppendLine("     ) b ");
            stringBuilder.AppendLine(" \tinner join T_상품정보 p on p.사업자번호 = b.사업자번호 and p.지점코드 = b.지점코드 and p.상품코드 = b.상품코드  ");
            stringBuilder.AppendLine(" \tleft outer join ( ");
            stringBuilder.AppendLine(" \t\tselect a.* ");
            stringBuilder.AppendLine(" \t\tfrom T_매입단가표 a ");
            stringBuilder.AppendLine(" \t\t\tinner join ( ");
            stringBuilder.AppendLine(" \t\t\t\tselect 사업자번호, 지점코드, 거래처코드, 상품코드, MAX(매입일자) as 매입일자 ");
            stringBuilder.AppendLine(" \t\t\t\tfrom T_매입단가표 ");
            stringBuilder.AppendLine(" \t\t\t\twhere 사업자번호 = '" + Common.p_strCompID + "' and 매입일자 <= '" + sDay1 + "' ");
            stringBuilder.AppendLine(" \t\t\t\tgroup by 사업자번호, 지점코드, 거래처코드, 상품코드 ");
            stringBuilder.AppendLine(" \t\t\t) b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.거래처코드 = a.거래처코드 and b.상품코드 = a.상품코드 and b.매입일자 = a.매입일자 ");
            stringBuilder.AppendLine(" \t\t) u on u.사업자번호 = b.사업자번호 and u.지점코드 = '" + Common.p_strSpotCode + "' and u.상품코드 = b.상품코드 and u.거래처코드 = b.지점코드  ");
            stringBuilder.AppendLine(" \tinner join T_거래처정보 c on c.사업자번호 = b.사업자번호 and c.지점코드 = b.지점코드 and c.거래처코드 = b.거래처코드  ");
            stringBuilder.AppendLine(" \tleft outer join C_매출구분 gb on gb.코드 = b.매출구분 ");
            stringBuilder.AppendLine(" order by b.거래처코드 asc, b.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_중상주문_상품별_List(
          string sDay1,
          string sCust,
          string sProd,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select b.* ");
            stringBuilder.AppendLine(" \t, (case when '" + Common.p_strBox + "' = '2' then (case when isnull(u.사업자번호, '') = '' then p.박스입고단가 else u.박스단가 end) ");
            stringBuilder.AppendLine(" \t\telse (case when isnull(u.사업자번호, '') = '' then p.낱개입고단가 else u.낱개단가 end) ");
            stringBuilder.AppendLine(" \t\tend) as 입고단가 ");
            stringBuilder.AppendLine(" \t, 0 as 박스입고단가 ");
            stringBuilder.AppendLine(" \t, 0 as 낱개입고단가 ");
            stringBuilder.AppendLine(" \t, '' as 거래처코드 ");
            stringBuilder.AppendLine(" \t, '' as 거래처명 ");
            stringBuilder.AppendLine(" \t, p.상품명 ");
            stringBuilder.AppendLine(" \t, p.규격 ");
            stringBuilder.AppendLine(" \t, p.과세구분 ");
            stringBuilder.AppendLine(" \t, dbo.Func_박스수량환산(b.총수량, b.사업자번호, b.지점코드, b.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" \t, '' as 매출구분 ");
            stringBuilder.AppendLine(" \t, '' as 매출구분명 ");
            stringBuilder.AppendLine(" \t, '' as 단가구분 ");
            stringBuilder.AppendLine(" \t, '' as 단가구분명 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" \tselect z.사업자번호 ");
            stringBuilder.AppendLine(" \t\t, z.지점코드 ");
            stringBuilder.AppendLine(" \t\t, z.상품코드 ");
            stringBuilder.AppendLine(" \t\t, sum(z.총수량) as 총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 금액 ");
            stringBuilder.AppendLine(" \t\t, 0 as 단가 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine(" \tselect b.사업자번호 ");
            stringBuilder.AppendLine(" \t\t, b.지점코드 ");
            stringBuilder.AppendLine(" \t\t, b.거래처코드 ");
            stringBuilder.AppendLine(" \t\t, b.상품코드 ");
            stringBuilder.AppendLine(" \t\t, b.총수량 ");
            stringBuilder.AppendLine(" \tfrom ( ");
            stringBuilder.AppendLine(" \t\tselect a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t, '0' as 지점코드 ");
            stringBuilder.AppendLine(" \t\t\t, a.지점코드 as 거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t, b.상품코드 ");
            stringBuilder.AppendLine(" \t\t\t, sum(b.총수량) as 총수량 ");
            stringBuilder.AppendLine(" \t\tfrom T_주문 a  ");
            stringBuilder.AppendLine(" \t\t\tinner join T_주문항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.주문일자 = a.주문일자 and b.주문번호 = a.주문번호  ");
            stringBuilder.AppendLine(" \t\t\tinner join T_상품정보 p on p.사업자번호 = b.사업자번호 and p.지점코드 = '0' and p.상품코드 = b.상품코드  ");
            stringBuilder.AppendLine(" \t\twhere a.사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine(" \t\t\tand a.지점코드 <> '0'  ");
            stringBuilder.AppendLine(" \t\t\tand '" + Common.p_strSpotCode + "' = '0'  ");
            stringBuilder.AppendLine(" \t\t\tand a.주문일자 = '" + sDay1 + "'  ");
            if (sProd != "")
                stringBuilder.AppendLine("             and b.상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine(" \t\tgroup by a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t, a.지점코드 ");
            stringBuilder.AppendLine(" \t\t\t, b.상품코드 ");
            stringBuilder.AppendLine(" \t    ) b ");
            stringBuilder.AppendLine(" \t\tinner join T_상품정보 p on p.사업자번호 = b.사업자번호 and p.지점코드 = b.지점코드 and p.상품코드 = b.상품코드  ");
            stringBuilder.AppendLine("     ) z ");
            stringBuilder.AppendLine(" \tgroup by z.사업자번호 ");
            stringBuilder.AppendLine(" \t\t, z.지점코드 ");
            stringBuilder.AppendLine(" \t\t, z.상품코드 ");
            stringBuilder.AppendLine(" ) b ");
            stringBuilder.AppendLine(" \tinner join T_상품정보 p on p.사업자번호 = b.사업자번호 and p.지점코드 = b.지점코드 and p.상품코드 = b.상품코드  ");
            stringBuilder.AppendLine(" \tleft outer join ( ");
            stringBuilder.AppendLine(" \t\tselect a.* ");
            stringBuilder.AppendLine(" \t\tfrom T_매입단가표 a ");
            stringBuilder.AppendLine(" \t\t\tinner join ( ");
            stringBuilder.AppendLine(" \t\t\t\tselect 사업자번호, 지점코드, 거래처코드, 상품코드, MAX(매입일자) as 매입일자 ");
            stringBuilder.AppendLine(" \t\t\t\tfrom T_매입단가표 ");
            stringBuilder.AppendLine(" \t\t\t\twhere 사업자번호 = '" + Common.p_strCompID + "' and 매입일자 <= '" + sDay1 + "' ");
            stringBuilder.AppendLine(" \t\t\t\tgroup by 사업자번호, 지점코드, 거래처코드, 상품코드 ");
            stringBuilder.AppendLine(" \t\t\t) b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.거래처코드 = a.거래처코드 and b.상품코드 = a.상품코드 and b.매입일자 = a.매입일자 ");
            stringBuilder.AppendLine(" \t\t) u on u.사업자번호 = b.사업자번호 and u.지점코드 = '" + Common.p_strSpotCode + "' and u.상품코드 = b.상품코드 and u.거래처코드 = b.지점코드  ");
            stringBuilder.AppendLine(" order by b.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_주문_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          string s매출여부,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , b.품목수      ");
            stringBuilder.AppendLine("     , b.총수량      ");
            stringBuilder.AppendLine("     , b.포함금액    ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호 ");
            stringBuilder.AppendLine("     , d.주소 as 지역주소 ");
            stringBuilder.AppendLine("     , d.상세주소 ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 주소 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_주문 a       ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.주문일자, a.주문번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(b.총수량) as 총수량 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_주문 a ");
            stringBuilder.AppendLine("                             inner join T_주문항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.주문일자 = a.주문일자 and b.주문번호 = a.주문번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.주문일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.주문일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.주문일자, a.주문번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.주문일자 = a.주문일자 and b.주문번호 = a.주문번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 주문일자, 주문번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_주문항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 주문일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 주문일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and 상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 주문일자, 주문번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.주문일자 = a.주문일자 and c.주문번호 = a.주문번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.주문일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.주문일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and isnull(c.해당품목수, 0) > 0 ");
            if (s매출여부 == "1")
                stringBuilder.AppendLine("     and isnull(a.매출일자, '') = '' ");
            if (s매출여부 == "2")
                stringBuilder.AppendLine("     and isnull(a.매출일자, '') <> '' ");
            stringBuilder.AppendLine(" order by a.주문일자 desc, a.등록일시 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_주문_Detail(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , b.품목수      ");
            stringBuilder.AppendLine("     , b.총수량      ");
            stringBuilder.AppendLine("     , b.포함금액    ");
            stringBuilder.AppendLine("     , d.거래처구분  ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호 ");
            stringBuilder.AppendLine("     , d.주소 as 지역주소 ");
            stringBuilder.AppendLine("     , d.상세주소 ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 주소 ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_주문 a       ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.주문일자, a.주문번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(b.총수량) as 총수량 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_주문 a ");
            stringBuilder.AppendLine("                             inner join T_주문항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.주문일자 = a.주문일자 and b.주문번호 = a.주문번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.주문일자 = @p_1 ");
            stringBuilder.AppendLine("                             and a.주문번호 = @p_2 ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.주문일자, a.주문번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.주문일자 = a.주문일자 and b.주문번호 = a.주문번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.주문일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.주문번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_주문항목_List(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(a.총수량, a.사업자번호, a.지점코드, a.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" from T_주문항목 a   ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.주문일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.주문번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_주문중상_List(
          string sDay1,
          string sDay2,
          string sSpotCode,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , b.품목수      ");
            stringBuilder.AppendLine("     , b.총수량      ");
            stringBuilder.AppendLine("     , b.포함금액    ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호 ");
            stringBuilder.AppendLine("     , d.주소 as 지역주소 ");
            stringBuilder.AppendLine("     , d.상세주소 ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 주소 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_주문 a       ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.주문일자, a.주문번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(b.총수량) as 총수량 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_주문 a ");
            stringBuilder.AppendLine("                             inner join T_주문항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.주문일자 = a.주문일자 and b.주문번호 = a.주문번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + sSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.주문일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.주문일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.주문일자, a.주문번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.주문일자 = a.주문일자 and b.주문번호 = a.주문번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 주문일자, 주문번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_주문항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + sSpotCode + "' ");
            stringBuilder.AppendLine("                             and 주문일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 주문일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 주문일자, 주문번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.주문일자 = a.주문일자 and c.주문번호 = a.주문번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + sSpotCode + "' ");
            stringBuilder.AppendLine("     and a.주문일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.주문일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" order by a.주문일자 desc, a.등록일시 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_주문중상항목_List(
          string sKey1,
          string sKey2,
          string sSpotCode,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(a.총수량, a.사업자번호, a.지점코드, a.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" from T_주문항목 a   ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + sSpotCode + "' ");
            stringBuilder.AppendLine("     and a.주문일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.주문번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          string sMan,
          string sMan2,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , isnull(a.출고차수, '1') as V출고차수 ");
            stringBuilder.AppendLine("     , b.품목수      ");
            stringBuilder.AppendLine("     , b.품목수      ");
            stringBuilder.AppendLine("     , b.총수량      ");
            stringBuilder.AppendLine("     , b.포함금액    ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호 ");
            stringBuilder.AppendLine("     , d.주소 as 지역주소 ");
            stringBuilder.AppendLine("     , d.상세주소 ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 주소 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            else
                stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(b.총수량) as 총수량 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_매출 a ");
            stringBuilder.AppendLine("                             inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 매출일자, 전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_매출항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and 상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 매출일자, 전표번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.매출일자 = a.매출일자 and c.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sMan2 != "")
                stringBuilder.AppendLine("     and a.배송사원 = '" + sMan2 + "' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            }
            if (sProd != "")
                stringBuilder.AppendLine("     and isnull(c.해당품목수, 0) > 0 ");
            stringBuilder.AppendLine(" order by a.매출일자 desc, a.등록일시 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출_거래처별_최종전표(string sDay, string sCust, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select top 1 a.* ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 = '" + sDay + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.매출일자 desc, a.전표번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출_거래처별_다음전표(
          string sDay,
          string sNum,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 = '" + sDay + "' ");
            stringBuilder.AppendLine("     and a.전표번호 > '" + sNum + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.매출일자 asc, a.전표번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출_거래처별_이전전표(
          string sDay,
          string sNum,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 = '" + sDay + "' ");
            stringBuilder.AppendLine("     and a.전표번호 < '" + sNum + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.매출일자 asc, a.전표번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_주문_거래처별_다음전표(
          string sDay,
          string sNum,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_주문 a       ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.주문일자 = '" + sDay + "' ");
            stringBuilder.AppendLine("     and a.주문번호 > '" + sNum + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.주문일자 asc, a.주문번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_주문_거래처별_이전전표(
          string sDay,
          string sNum,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_주문 a       ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.주문일자 = '" + sDay + "' ");
            stringBuilder.AppendLine("     and a.주문번호 < '" + sNum + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.주문일자 asc, a.주문번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_견적_거래처별_다음전표(
          string sDay,
          string sNum,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_견적 a       ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.견적일자 = '" + sDay + "' ");
            stringBuilder.AppendLine("     and a.견적번호 > '" + sNum + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.견적일자 asc, a.견적번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_견적_거래처별_이전전표(
          string sDay,
          string sNum,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_견적 a       ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.견적일자 = '" + sDay + "' ");
            stringBuilder.AppendLine("     and a.견적번호 < '" + sNum + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.견적일자 asc, a.견적번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매입_거래처별_다음전표(
          string sDay,
          string sNum,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_매입 a       ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 = '" + sDay + "' ");
            stringBuilder.AppendLine("     and a.전표번호 > '" + sNum + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.매입일자 asc, a.전표번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매입_거래처별_이전전표(
          string sDay,
          string sNum,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_매입 a       ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 = '" + sDay + "' ");
            stringBuilder.AppendLine("     and a.전표번호 < '" + sNum + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.매입일자 asc, a.전표번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_발주_거래처별_다음전표(
          string sDay,
          string sNum,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_발주 a       ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.발주일자 = '" + sDay + "' ");
            stringBuilder.AppendLine("     and a.발주번호 > '" + sNum + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.발주일자 asc, a.발주번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_발주_거래처별_이전전표(
          string sDay,
          string sNum,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_발주 a       ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.발주일자 = '" + sDay + "' ");
            stringBuilder.AppendLine("     and a.발주번호 < '" + sNum + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.발주일자 asc, a.발주번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출계산서_거래처별_다음전표(
          string sDay,
          string sNum,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_계산서매출 a       ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 = '" + sDay + "' ");
            stringBuilder.AppendLine("     and a.계산서번호 > '" + sNum + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.계산서일자 asc, a.계산서번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출계산서_거래처별_이전전표(
          string sDay,
          string sNum,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from T_계산서매출 a       ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 = '" + sDay + "' ");
            stringBuilder.AppendLine("     and a.계산서번호 < '" + sNum + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.계산서일자 asc, a.계산서번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출계_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          string sMan,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     sum(z.매출계) as 매출계 ");
            stringBuilder.AppendLine("     , sum(z.반품계) as 반품계 ");
            stringBuilder.AppendLine("     , sum(z.수금계) as 수금계 ");
            stringBuilder.AppendLine("     , sum(z.할인계) as 할인계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     sum(b.포함금액) as 매출계 ");
            stringBuilder.AppendLine("     , 0 as 반품계 ");
            stringBuilder.AppendLine("     , 0 as 수금계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            else
                stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_매출 a ");
            stringBuilder.AppendLine("                             inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and b.매출구분 in ('1', '2') ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 매출일자, 전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_매출항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and 매출구분 in ('1', '2') ");
            stringBuilder.AppendLine("                             and 상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 매출일자, 전표번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.매출일자 = a.매출일자 and c.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and isnull(c.해당품목수, 0) > 0 ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     0 as 매출계 ");
            stringBuilder.AppendLine("     , sum(b.포함금액) as 반품계 ");
            stringBuilder.AppendLine("     , 0 as 수금계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            else
                stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_매출 a ");
            stringBuilder.AppendLine("                             inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and b.매출구분 in ('3', '4') ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 매출일자, 전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_매출항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and 매출구분 in ('3', '4') ");
            stringBuilder.AppendLine("                             and 상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 매출일자, 전표번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.매출일자 = a.매출일자 and c.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and isnull(c.해당품목수, 0) > 0 ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     0 as 매출계 ");
            stringBuilder.AppendLine("     , 0 as 반품계 ");
            stringBuilder.AppendLine("     , sum(a.수금액) as 수금계 ");
            stringBuilder.AppendLine("     , sum(a.할인액) as 할인계 ");
            stringBuilder.AppendLine(" from T_수금 a       ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            else
                stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수금일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.수금일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            }
            stringBuilder.AppendLine(") z ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출_Detail(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , isnull(a.출고차수, '1') as V출고차수 ");
            stringBuilder.AppendLine("     , isnull(mm.수금구분, '1') as 수금구분 ");
            stringBuilder.AppendLine("     , isnull(mm.수금액, 0) as 수금액 ");
            stringBuilder.AppendLine("     , isnull(mm.할인액, 0) as 할인액 ");
            stringBuilder.AppendLine("     , isnull(mm.합계금액, 0) as 수금합계 ");
            stringBuilder.AppendLine("     , isnull(mm.어음번호, '') as 어음번호 ");
            stringBuilder.AppendLine("     , isnull(mm.발행일자, '') as 발행일자 ");
            stringBuilder.AppendLine("     , isnull(mm.만기일자, '') as 만기일자 ");
            stringBuilder.AppendLine("     , isnull(mm.발행은행, '') as 발행은행 ");
            stringBuilder.AppendLine("     , isnull(mm.발행인, '') as 발행인 ");
            stringBuilder.AppendLine("     , isnull(mm.배서인, '') as 배서인 ");
            stringBuilder.AppendLine("     , isnull(mm.지급처, '') as 지급처 ");
            stringBuilder.AppendLine("     , isnull(mm.계좌순번, '') as 계좌순번 ");
            stringBuilder.AppendLine("     , b.품목수      ");
            stringBuilder.AppendLine("     , b.총수량      ");
            stringBuilder.AppendLine("     , b.포함금액    ");
            stringBuilder.AppendLine("     , d.거래처구분  ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.단가구분    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호 ");
            stringBuilder.AppendLine("     , d.주소 as 지역주소 ");
            stringBuilder.AppendLine("     , d.상세주소 ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 주소 ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      left outer join T_수금 mm on mm.사업자번호 = a.사업자번호 and mm.지점코드 = a.지점코드 and mm.매출일자 = a.매출일자 and mm.매출전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(b.총수량) as 총수량 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_매출 a ");
            stringBuilder.AppendLine("                             inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 = @p_1 ");
            stringBuilder.AppendLine("                             and a.전표번호 = @p_2 ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.전표번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출_매출항목(
          string sKey1,
          string sKey2,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select 거래처코드, 매출액계 as 이전매출액 ");
            stringBuilder.AppendLine("                         into #Tmp이전매출액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매출_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 합계금액 as 이전수금액 ");
            stringBuilder.AppendLine("                         into #Tmp이전수금액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처수금_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 매입액계 as 이전매입액 ");
            stringBuilder.AppendLine("                         into #Tmp이전매입액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매입_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 합계금액 as 이전지급액 ");
            stringBuilder.AppendLine("                         into #Tmp이전지급액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처지급_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 매출액계 as 당일매출액 ");
            stringBuilder.AppendLine("                         into #Tmp당일매출액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매출_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_1, 0, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 합계금액 as 당일수금액 ");
            stringBuilder.AppendLine("                         into #Tmp당일수금액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처수금_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_1, 0, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 매입액계 as 당일매입액 ");
            stringBuilder.AppendLine("                         into #Tmp당일매입액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매입_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_1, 0, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 합계금액 as 당일지급액 ");
            stringBuilder.AppendLine("                         into #Tmp당일지급액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처지급_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_1, 0, '') ");
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , '9pt' as 상품폰트 ");
            stringBuilder.AppendLine("     , '9pt' as 규격폰트 ");
            stringBuilder.AppendLine("     , 0 as 인쇄용단가 ");
            stringBuilder.AppendLine("     , 0 as 인쇄용총수량 ");
            stringBuilder.AppendLine("     , '' as 인쇄용총수량2 ");
            stringBuilder.AppendLine("     , '' as 인쇄용바코드 ");
            stringBuilder.AppendLine("     , substring(a.매출일자, 1, 7) as 매출년월 ");
            stringBuilder.AppendLine("     , case when isnull(a.사업자번호, '') = '8058600563' then d.거래처명 + ' ' + d.대표자명 else d.거래처명 end as 거래처명 ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호 ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 주소 ");
            stringBuilder.AppendLine("     , d.대표자명 as 거래처대표자명 ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.전화번호 ");
            stringBuilder.AppendLine("     , f.폰번호 ");
            stringBuilder.AppendLine("     , f.전화번호출력구분 ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , ff.개인사업자번호 as 대체사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(ff.개인사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(ff.개인사업자번호, 1, 3) + '-' + substring(ff.개인사업자번호, 4, 2) + '-' + substring(ff.개인사업자번호, 6, 5) end as 대체사업자번호2 ");
            stringBuilder.AppendLine("     , ff.대표자명 as 대체대표자 ");
            stringBuilder.AppendLine("     , ff.상호명 as 대체상호명 ");
            stringBuilder.AppendLine("     , ff.이메일 as 대체이메일 ");
            stringBuilder.AppendLine("     , ff.업태 as 대체업태 ");
            stringBuilder.AppendLine("     , ff.종목 as 대체종목 ");
            stringBuilder.AppendLine("     , ff.사업우편번호 as 대체우편번호 ");
            stringBuilder.AppendLine("     , ff.사업주소 as 대체주소1 ");
            stringBuilder.AppendLine("     , ff.사업상세주소 as 대체주소2 ");
            stringBuilder.AppendLine("     , ff.사업주소 + ' ' + ff.사업상세주소 as 대체주소 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 + '  ' + f.사용자명 as 대체연락처 ");
            stringBuilder.AppendLine("     , ff.직인 as 대체직인 ");
            stringBuilder.AppendLine("     , '' as 대체직인파일 ");
            stringBuilder.AppendLine("     , ff.직인형식 as 대체직인형식 ");
            stringBuilder.AppendLine("     , ff.공지컴퓨터 as 대체공지컴퓨터 ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , b.품목수  ");
            stringBuilder.AppendLine("     , b.박스수량계  ");
            stringBuilder.AppendLine("     , b.중간수량계  ");
            stringBuilder.AppendLine("     , b.낱개수량계  ");
            stringBuilder.AppendLine("     , b.총수량계  ");
            stringBuilder.AppendLine("     , b.입력금액계  ");
            stringBuilder.AppendLine("     , b.부가세액계  ");
            stringBuilder.AppendLine("     , b.포함금액계  ");
            stringBuilder.AppendLine("     , isnull(d.초기잔고, 0) + isnull(s.이전매출액, 0) - isnull(w.이전수금액, 0) - isnull(s2.이전매입액, 0) + isnull(w2.이전지급액, 0) ");
            stringBuilder.AppendLine("         as 전잔고 ");
            stringBuilder.AppendLine("     , isnull(ss.당일매출액, 0) - isnull(ss2.당일매입액, 0) + isnull(ww2.당일지급액, 0) as 당일매출액 ");
            stringBuilder.AppendLine("     , isnull(ww.당일수금액, 0) as 당일수금액 ");
            stringBuilder.AppendLine("     , isnull(ww.당일수금액, 0) as 당일수금합계금액 ");
            stringBuilder.AppendLine("     , isnull(d.초기잔고, 0) + isnull(s.이전매출액, 0) - isnull(w.이전수금액, 0) - isnull(s2.이전매입액, 0) + isnull(w2.이전지급액, 0) ");
            stringBuilder.AppendLine("         + isnull(ss.당일매출액, 0) - isnull(ww.당일수금액, 0) - isnull(ss2.당일매입액, 0) + isnull(ww2.당일지급액, 0) ");
            stringBuilder.AppendLine("         as 잔고 ");
            stringBuilder.AppendLine("     , tm.항목순번  ");
            stringBuilder.AppendLine("     , tm.상품코드  ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.총수량 as 총수량 ");
            if (Common.p_strBox == "3")
                stringBuilder.AppendLine("     , round(g.입수수량 * tm.낱개단가, 0) as 박스단가 ");
            else
                stringBuilder.AppendLine("     , tm.박스단가  ");
            stringBuilder.AppendLine("     , g.중간입수수량 * tm.낱개단가 as 중간단가 ");
            stringBuilder.AppendLine("     , tm.낱개단가  ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.금액 as 금액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when tm.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 ");
            stringBuilder.AppendLine("             else round(isnull(tm.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         as 부가세액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when tm.과세구분 = '2' then isnull(tm.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(tm.금액, 0) ");
            stringBuilder.AppendLine("             else isnull(tm.금액, 0) + round(isnull(tm.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         as 포함금액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스총수량 as 서비스총수량 ");
            stringBuilder.AppendLine("     , tm.최종매출일  ");
            stringBuilder.AppendLine("     , tm.매출구분  ");
            stringBuilder.AppendLine("     , r.명칭 as 매출구분명 ");
            stringBuilder.AppendLine("     , tm.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , tm.과세구분  ");
            stringBuilder.AppendLine("     , g.입수수량  ");
            stringBuilder.AppendLine("     , g.중간입수수량  ");
            stringBuilder.AppendLine("     , tm.박스입고단가 ");
            stringBuilder.AppendLine("     , tm.낱개입고단가 ");
            stringBuilder.AppendLine("     , g.박스바코드   ");
            stringBuilder.AppendLine("     , g.중간바코드   ");
            stringBuilder.AppendLine("     , g.낱개바코드   ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.상품명 + (case when isnull(g.규격, '') <> '' then ' ' + g.규격 else '' end) as 상품상세명 ");
            stringBuilder.AppendLine("     , c6.계좌별칭   ");
            stringBuilder.AppendLine("     , 0 as 표시순번 ");
            stringBuilder.AppendLine("     , '0' as 페이지그룹 ");
            stringBuilder.AppendLine("     , '1/1' as 표시페이지 ");
            stringBuilder.AppendLine("     , tr.명칭 as 배송사원명 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(tm.총수량, tm.사업자번호, tm.지점코드, tm.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      inner join T_매출항목 tm on tm.사업자번호 = a.사업자번호 and tm.지점코드 = a.지점코드 and tm.매출일자 = a.매출일자 and tm.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join T_수금 mm on mm.사업자번호 = a.사업자번호 and mm.지점코드 = a.지점코드 and mm.매출일자 = a.매출일자 and mm.매출전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = tm.사업자번호 and g.지점코드 = tm.지점코드 and g.상품코드 = tm.상품코드 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 ff on ff.사업자번호 = d.사업자번호 and ff.지점코드 = d.지점코드 and ff.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join C_매출구분 r on r.코드 = tm.매출구분 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("      left outer join P_배송차량 tr on tr.사업자번호 = a.사업자번호 and tr.코드 = a.배송사원 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량) as 박스수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.중간수량) as 중간수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.낱개수량) as 낱개수량계 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량) as 총수량계 ");
            else
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.총수량) as 총수량계 ");
            if (Common.p_CalcVAT == "Y")
            {
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '2' then isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                             when a.부가세코드 = '1' then round(isnull(b.금액, 0) / 1.1, 0) ");
                stringBuilder.AppendLine("                                         else isnull(b.금액, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 입력금액계 ");
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '2' then 0 ");
                stringBuilder.AppendLine("                                             when a.부가세코드 = '1' then isnull(b.금액, 0) - round(isnull(b.금액, 0) / 1.1, 0) ");
                stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 부가세액계 ");
            }
            else
            {
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                 ) as 입력금액계 ");
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 ");
                stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 부가세액계 ");
            }
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액계 ");
            stringBuilder.AppendLine("                         from T_매출 a ");
            stringBuilder.AppendLine("                             inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 = @p_1 ");
            stringBuilder.AppendLine("                             and a.전표번호 = @p_2 ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join #Tmp이전매출액 s on s.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp이전수금액 w on w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp이전매입액 s2 on s2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp이전지급액 w2 on w2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp당일매출액 ss on ss.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp당일수금액 ww on ww.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp당일매입액 ss2 on ss2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp당일지급액 ww2 on ww2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join T_업체계좌 c6 on c6.계좌순번 = d.계좌순번 and c6.사업자번호 = a.사업자번호 and c6.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.전표번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.매출일자 asc, a.전표번호 asc, tm.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출_매출항목V2(
          string sKey1,
          string sKey2,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select 거래처코드, 매출액계 as 이전매출액 ");
            stringBuilder.AppendLine("                         into #Tmp이전매출액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매출2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 합계금액 as 이전수금액 ");
            stringBuilder.AppendLine("                         into #Tmp이전수금액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처수금2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 매입액계 as 이전매입액 ");
            stringBuilder.AppendLine("                         into #Tmp이전매입액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매입2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 합계금액 as 이전지급액 ");
            stringBuilder.AppendLine("                         into #Tmp이전지급액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처지급2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 매출액계 as 당일매출액 ");
            stringBuilder.AppendLine("                         into #Tmp당일매출액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매출2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_1, 0, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 합계금액 as 당일수금액 ");
            stringBuilder.AppendLine("                         into #Tmp당일수금액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처수금2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_1, 0, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 매입액계 as 당일매입액 ");
            stringBuilder.AppendLine("                         into #Tmp당일매입액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매입2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_1, 0, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 합계금액 as 당일지급액 ");
            stringBuilder.AppendLine("                         into #Tmp당일지급액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처지급2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_1, 0, '') ");
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , '9pt' as 상품폰트 ");
            stringBuilder.AppendLine("     , '9pt' as 규격폰트 ");
            stringBuilder.AppendLine("     , 0 as 인쇄용단가 ");
            stringBuilder.AppendLine("     , 0 as 인쇄용총수량 ");
            stringBuilder.AppendLine("     , '' as 인쇄용총수량2 ");
            stringBuilder.AppendLine("     , '' as 인쇄용바코드 ");
            stringBuilder.AppendLine("     , substring(a.매출일자, 1, 7) as 매출년월 ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호 ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 주소 ");
            stringBuilder.AppendLine("     , d.대표자명 as 거래처대표자명 ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.전화번호 ");
            stringBuilder.AppendLine("     , f.폰번호 ");
            stringBuilder.AppendLine("     , f.전화번호출력구분 ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , ff.개인사업자번호 as 대체사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(ff.개인사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(ff.개인사업자번호, 1, 3) + '-' + substring(ff.개인사업자번호, 4, 2) + '-' + substring(ff.개인사업자번호, 6, 5) end as 대체사업자번호2 ");
            stringBuilder.AppendLine("     , ff.대표자명 as 대체대표자 ");
            stringBuilder.AppendLine("     , ff.상호명 as 대체상호명 ");
            stringBuilder.AppendLine("     , ff.이메일 as 대체이메일 ");
            stringBuilder.AppendLine("     , ff.업태 as 대체업태 ");
            stringBuilder.AppendLine("     , ff.종목 as 대체종목 ");
            stringBuilder.AppendLine("     , ff.사업우편번호 as 대체우편번호 ");
            stringBuilder.AppendLine("     , ff.사업주소 as 대체주소1 ");
            stringBuilder.AppendLine("     , ff.사업상세주소 as 대체주소2 ");
            stringBuilder.AppendLine("     , ff.사업주소 + ' ' + ff.사업상세주소 as 대체주소 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 + '  ' + f.사용자명 as 대체연락처 ");
            stringBuilder.AppendLine("     , ff.직인 as 대체직인 ");
            stringBuilder.AppendLine("     , '' as 대체직인파일 ");
            stringBuilder.AppendLine("     , ff.직인형식 as 대체직인형식 ");
            stringBuilder.AppendLine("     , ff.공지컴퓨터 as 대체공지컴퓨터 ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , b.품목수  ");
            stringBuilder.AppendLine("     , b.박스수량계  ");
            stringBuilder.AppendLine("     , b.중간수량계  ");
            stringBuilder.AppendLine("     , b.낱개수량계  ");
            stringBuilder.AppendLine("     , b.총수량계  ");
            stringBuilder.AppendLine("     , b.입력금액계  ");
            stringBuilder.AppendLine("     , b.부가세액계  ");
            stringBuilder.AppendLine("     , b.포함금액계  ");
            stringBuilder.AppendLine("     , isnull(d.초기잔고, 0) + isnull(s.이전매출액, 0) - isnull(w.이전수금액, 0) - isnull(s2.이전매입액, 0) + isnull(w2.이전지급액, 0) ");
            stringBuilder.AppendLine("         as 전잔고 ");
            stringBuilder.AppendLine("     , isnull(ss.당일매출액, 0) - isnull(ss2.당일매입액, 0) + isnull(ww2.당일지급액, 0) as 당일매출액 ");
            stringBuilder.AppendLine("     , isnull(ww.당일수금액, 0) as 당일수금액 ");
            stringBuilder.AppendLine("     , isnull(ww.당일수금액, 0) as 당일수금합계금액 ");
            stringBuilder.AppendLine("     , isnull(d.초기잔고, 0) + isnull(s.이전매출액, 0) - isnull(w.이전수금액, 0) - isnull(s2.이전매입액, 0) + isnull(w2.이전지급액, 0) ");
            stringBuilder.AppendLine("         + isnull(ss.당일매출액, 0) - isnull(ww.당일수금액, 0) - isnull(ss2.당일매입액, 0) + isnull(ww2.당일지급액, 0) ");
            stringBuilder.AppendLine("         as 잔고 ");
            stringBuilder.AppendLine("     , tm.항목순번  ");
            stringBuilder.AppendLine("     , tm.상품코드  ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.총수량 as 총수량 ");
            if (Common.p_strBox == "3")
                stringBuilder.AppendLine("     , round(g.입수수량 * tm.낱개단가, 0) as 박스단가 ");
            else
                stringBuilder.AppendLine("     , tm.박스단가  ");
            stringBuilder.AppendLine("     , g.중간입수수량 * tm.낱개단가 as 중간단가 ");
            stringBuilder.AppendLine("     , tm.낱개단가  ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.금액 as 금액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when tm.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 ");
            stringBuilder.AppendLine("             else round(isnull(tm.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         as 부가세액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when tm.과세구분 = '2' then isnull(tm.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(tm.금액, 0) ");
            stringBuilder.AppendLine("             else isnull(tm.금액, 0) + round(isnull(tm.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         as 포함금액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스총수량 as 서비스총수량 ");
            stringBuilder.AppendLine("     , tm.최종매출일  ");
            stringBuilder.AppendLine("     , tm.매출구분  ");
            stringBuilder.AppendLine("     , r.명칭 as 매출구분명 ");
            stringBuilder.AppendLine("     , tm.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , tm.과세구분  ");
            stringBuilder.AppendLine("     , g.입수수량  ");
            stringBuilder.AppendLine("     , g.중간입수수량  ");
            stringBuilder.AppendLine("     , tm.박스입고단가 ");
            stringBuilder.AppendLine("     , tm.낱개입고단가 ");
            stringBuilder.AppendLine("     , g.박스바코드   ");
            stringBuilder.AppendLine("     , g.중간바코드   ");
            stringBuilder.AppendLine("     , g.낱개바코드   ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.상품명 + (case when isnull(g.규격, '') <> '' then ' ' + g.규격 else '' end) as 상품상세명 ");
            stringBuilder.AppendLine("     , c6.계좌별칭   ");
            stringBuilder.AppendLine("     , 0 as 표시순번 ");
            stringBuilder.AppendLine("     , '0' as 페이지그룹 ");
            stringBuilder.AppendLine("     , '1/1' as 표시페이지 ");
            stringBuilder.AppendLine("     , tr.명칭 as 배송사원명 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(tm.총수량, tm.사업자번호, tm.지점코드, tm.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      inner join T_매출항목 tm on tm.사업자번호 = a.사업자번호 and tm.지점코드 = a.지점코드 and tm.매출일자 = a.매출일자 and tm.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join T_수금 mm on mm.사업자번호 = a.사업자번호 and mm.지점코드 = a.지점코드 and mm.매출일자 = a.매출일자 and mm.매출전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = tm.사업자번호 and g.지점코드 = tm.지점코드 and g.상품코드 = tm.상품코드 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 ff on ff.사업자번호 = d.사업자번호 and ff.지점코드 = d.지점코드 and ff.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join C_매출구분 r on r.코드 = tm.매출구분 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("      left outer join P_배송차량 tr on tr.사업자번호 = a.사업자번호 and tr.코드 = a.배송사원 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량) as 박스수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.중간수량) as 중간수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.낱개수량) as 낱개수량계 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량) as 총수량계 ");
            else
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.총수량) as 총수량계 ");
            if (Common.p_CalcVAT == "Y")
            {
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '2' then isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                             when a.부가세코드 = '1' then round(isnull(b.금액, 0) / 1.1, 0) ");
                stringBuilder.AppendLine("                                         else isnull(b.금액, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 입력금액계 ");
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '2' then 0 ");
                stringBuilder.AppendLine("                                             when a.부가세코드 = '1' then isnull(b.금액, 0) - round(isnull(b.금액, 0) / 1.1, 0) ");
                stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 부가세액계 ");
            }
            else
            {
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                 ) as 입력금액계 ");
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 ");
                stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 부가세액계 ");
            }
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액계 ");
            stringBuilder.AppendLine("                         from T_매출 a ");
            stringBuilder.AppendLine("                             inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 = @p_1 ");
            stringBuilder.AppendLine("                             and a.전표번호 = @p_2 ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join #Tmp이전매출액 s on s.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp이전수금액 w on w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp이전매입액 s2 on s2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp이전지급액 w2 on w2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp당일매출액 ss on ss.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp당일수금액 ww on ww.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp당일매입액 ss2 on ss2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp당일지급액 ww2 on ww2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join T_업체계좌 c6 on c6.계좌순번 = d.계좌순번 and c6.사업자번호 = a.사업자번호 and c6.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.전표번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.매출일자 asc, a.전표번호 asc, tm.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출_매출항목(
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          string sManNo,
          string sManNo2,
          bool bAll,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select 거래처코드, 매출액계 as 이전매출액 ");
            stringBuilder.AppendLine("                         into #Tmp이전매출액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매출_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 합계금액 as 이전수금액 ");
            stringBuilder.AppendLine("                         into #Tmp이전수금액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처수금_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 매입액계 as 이전매입액 ");
            stringBuilder.AppendLine("                         into #Tmp이전매입액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매입_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 합계금액 as 이전지급액 ");
            stringBuilder.AppendLine("                         into #Tmp이전지급액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처지급_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 매출액계 as 당일매출액 ");
            stringBuilder.AppendLine("                         into #Tmp당일매출액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매출_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_2, 0, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 합계금액 as 당일수금액 ");
            stringBuilder.AppendLine("                         into #Tmp당일수금액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처수금_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_2, 0, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 매입액계 as 당일매입액 ");
            stringBuilder.AppendLine("                         into #Tmp당일매입액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매입_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_2, 0, '') ");
            stringBuilder.AppendLine(" select 거래처코드, 합계금액 as 당일지급액 ");
            stringBuilder.AppendLine("                         into #Tmp당일지급액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처지급_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_2, 0, '') ");
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , '9pt' as 상품폰트 ");
            stringBuilder.AppendLine("     , '9pt' as 규격폰트 ");
            stringBuilder.AppendLine("     , 0 as 인쇄용단가 ");
            stringBuilder.AppendLine("     , 0 as 인쇄용총수량 ");
            stringBuilder.AppendLine("     , '' as 인쇄용총수량2 ");
            stringBuilder.AppendLine("     , '' as 인쇄용바코드 ");
            stringBuilder.AppendLine("     , substring(a.매출일자, 1, 7) as 매출년월 ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호 ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 주소 ");
            stringBuilder.AppendLine("     , d.대표자명 as 거래처대표자명 ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.전화번호 ");
            stringBuilder.AppendLine("     , f.폰번호 ");
            stringBuilder.AppendLine("     , f.전화번호출력구분 ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , ff.개인사업자번호 as 대체사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(ff.개인사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(ff.개인사업자번호, 1, 3) + '-' + substring(ff.개인사업자번호, 4, 2) + '-' + substring(ff.개인사업자번호, 6, 5) end as 대체사업자번호2 ");
            stringBuilder.AppendLine("     , ff.대표자명 as 대체대표자 ");
            stringBuilder.AppendLine("     , ff.상호명 as 대체상호명 ");
            stringBuilder.AppendLine("     , ff.이메일 as 대체이메일 ");
            stringBuilder.AppendLine("     , ff.업태 as 대체업태 ");
            stringBuilder.AppendLine("     , ff.종목 as 대체종목 ");
            stringBuilder.AppendLine("     , ff.사업우편번호 as 대체우편번호 ");
            stringBuilder.AppendLine("     , ff.사업주소 as 대체주소1 ");
            stringBuilder.AppendLine("     , ff.사업상세주소 as 대체주소2 ");
            stringBuilder.AppendLine("     , ff.사업주소 + ' ' + ff.사업상세주소 as 대체주소 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 + ' / ' + f.사용자명 as 대체연락처 ");
            stringBuilder.AppendLine("     , ff.직인 as 대체직인 ");
            stringBuilder.AppendLine("     , '' as 대체직인파일 ");
            stringBuilder.AppendLine("     , ff.직인형식 as 대체직인형식 ");
            stringBuilder.AppendLine("     , ff.공지컴퓨터 as 대체공지컴퓨터 ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , b.품목수  ");
            stringBuilder.AppendLine("     , b.박스수량계  ");
            stringBuilder.AppendLine("     , b.중간수량계  ");
            stringBuilder.AppendLine("     , b.낱개수량계  ");
            stringBuilder.AppendLine("     , b.총수량계  ");
            stringBuilder.AppendLine("     , b.입력금액계  ");
            stringBuilder.AppendLine("     , b.부가세액계  ");
            stringBuilder.AppendLine("     , b.포함금액계  ");
            stringBuilder.AppendLine("     , isnull(d.초기잔고, 0) + isnull(s.이전매출액, 0) - isnull(w.이전수금액, 0) - isnull(s2.이전매입액, 0) + isnull(w2.이전지급액, 0) ");
            stringBuilder.AppendLine("         as 전잔고 ");
            stringBuilder.AppendLine("     , isnull(ss.당일매출액, 0) - isnull(ss2.당일매입액, 0) + isnull(ww2.당일지급액, 0) as 당일매출액 ");
            stringBuilder.AppendLine("     , isnull(ww.당일수금액, 0) as 당일수금액 ");
            stringBuilder.AppendLine("     , isnull(ww.당일수금액, 0) as 당일수금합계금액 ");
            stringBuilder.AppendLine("     , isnull(d.초기잔고, 0) + isnull(s.이전매출액, 0) - isnull(w.이전수금액, 0) - isnull(s2.이전매입액, 0) + isnull(w2.이전지급액, 0) ");
            stringBuilder.AppendLine("         + isnull(ss.당일매출액, 0) - isnull(ww.당일수금액, 0) - isnull(ss2.당일매입액, 0) + isnull(ww2.당일지급액, 0) ");
            stringBuilder.AppendLine("         as 잔고 ");
            stringBuilder.AppendLine("     , tm.항목순번  ");
            stringBuilder.AppendLine("     , tm.상품코드  ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.총수량 as 총수량 ");
            if (Common.p_strBox == "3")
                stringBuilder.AppendLine("     , round(g.입수수량 * tm.낱개단가, 0) as 박스단가 ");
            else
                stringBuilder.AppendLine("     , tm.박스단가  ");
            stringBuilder.AppendLine("     , g.중간입수수량 * tm.낱개단가 as 중간단가 ");
            stringBuilder.AppendLine("     , tm.낱개단가  ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.금액 as 금액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when tm.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 ");
            stringBuilder.AppendLine("             else round(isnull(tm.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         as 부가세액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when tm.과세구분 = '2' then isnull(tm.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(tm.금액, 0) ");
            stringBuilder.AppendLine("             else isnull(tm.금액, 0) + round(isnull(tm.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         as 포함금액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("     , tm.최종매출일  ");
            stringBuilder.AppendLine("     , tm.매출구분  ");
            stringBuilder.AppendLine("     , r.명칭 as 매출구분명 ");
            stringBuilder.AppendLine("     , tm.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , tm.과세구분  ");
            stringBuilder.AppendLine("     , g.입수수량  ");
            stringBuilder.AppendLine("     , g.중간입수수량  ");
            stringBuilder.AppendLine("     , tm.박스입고단가 ");
            stringBuilder.AppendLine("     , tm.낱개입고단가 ");
            stringBuilder.AppendLine("     , g.박스바코드   ");
            stringBuilder.AppendLine("     , g.중간바코드   ");
            stringBuilder.AppendLine("     , g.낱개바코드   ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.상품명 + (case when isnull(g.규격, '') <> '' then ' ' + g.규격 else '' end) as 상품상세명 ");
            stringBuilder.AppendLine("     , c6.계좌별칭   ");
            stringBuilder.AppendLine("     , 0 as 표시순번 ");
            stringBuilder.AppendLine("     , '0' as 페이지그룹 ");
            stringBuilder.AppendLine("     , '1/1' as 표시페이지 ");
            stringBuilder.AppendLine("     , tr.명칭 as 배송사원명 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(tm.총수량, tm.사업자번호, tm.지점코드, tm.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      inner join T_매출항목 tm on tm.사업자번호 = a.사업자번호 and tm.지점코드 = a.지점코드 and tm.매출일자 = a.매출일자 and tm.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = tm.사업자번호 and g.지점코드 = tm.지점코드 and g.상품코드 = tm.상품코드 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 ff on ff.사업자번호 = d.사업자번호 and ff.지점코드 = d.지점코드 and ff.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join C_매출구분 r on r.코드 = tm.매출구분 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("      left outer join P_배송차량 tr on tr.사업자번호 = a.사업자번호 and tr.지점코드 = a.지점코드 and tr.코드 = a.배송사원 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 매출일자, 전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_매출항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 매출일자 >= @p_1 ");
            stringBuilder.AppendLine("                             and 매출일자 <= @p_2 ");
            stringBuilder.AppendLine("                             and 상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 매출일자, 전표번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.매출일자 = a.매출일자 and c.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량) as 박스수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.중간수량) as 중간수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.낱개수량) as 낱개수량계 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량) as 총수량계 ");
            else
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.총수량) as 총수량계 ");
            if (Common.p_CalcVAT == "Y")
            {
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '2' then isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                             when a.부가세코드 = '1' then round(isnull(b.금액, 0) / 1.1, 0) ");
                stringBuilder.AppendLine("                                         else isnull(b.금액, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 입력금액계 ");
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '2' then 0 ");
                stringBuilder.AppendLine("                                             when a.부가세코드 = '1' then isnull(b.금액, 0) - round(isnull(b.금액, 0) / 1.1, 0) ");
                stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 부가세액계 ");
            }
            else
            {
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                 ) as 입력금액계 ");
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 ");
                stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 부가세액계 ");
            }
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액계 ");
            stringBuilder.AppendLine("                         from T_매출 a ");
            stringBuilder.AppendLine("                             inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 >= @p_1 ");
            stringBuilder.AppendLine("                             and a.매출일자 <= @p_2 ");
            if (!bAll)
                stringBuilder.AppendLine("                             and a.발행여부 = 'N' ");
            if (sCust != "")
                stringBuilder.AppendLine("                             and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join #Tmp이전매출액 s on s.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp이전수금액 w on w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp이전매입액 s2 on s2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp이전지급액 w2 on w2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp당일매출액 ss on ss.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp당일수금액 ww on ww.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp당일매입액 ss2 on ss2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp당일지급액 ww2 on ww2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join T_업체계좌 c6 on c6.계좌순번 = d.계좌순번 and c6.사업자번호 = a.사업자번호 and c6.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= @p_1 ");
            stringBuilder.AppendLine("     and a.매출일자 <= @p_2 ");
            if (!bAll)
                stringBuilder.AppendLine("     and a.발행여부 = 'N' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and isnull(c.해당품목수, 0) > 0 ");
            if (sManNo != "")
                stringBuilder.AppendLine("     and d.사원번호 = '" + sManNo + "' ");
            if (sManNo2 != "")
                stringBuilder.AppendLine("     and a.배송사원 = '" + sManNo2 + "' ");
            stringBuilder.AppendLine(" order by a.매출일자 asc, a.전표번호 asc, tm.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출_매출항목(string sWhereIN, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , isnull(a.초기잔고, 0) + isnull(a.이전매출액, 0) - isnull(a.이전수금액, 0) - isnull(a.이전매입액, 0) + isnull(a.이전지급액, 0) ");
            stringBuilder.AppendLine("         as 전잔고 ");
            stringBuilder.AppendLine("     , isnull(a.당일매출액, 0) - isnull(a.당일매입액, 0) + isnull(a.당일지급액, 0) as 당일매출액 ");
            stringBuilder.AppendLine("     , isnull(a.당일수금액, 0) as 당일수금액 ");
            stringBuilder.AppendLine("     , isnull(a.당일수금액, 0) as 당일수금합계금액 ");
            stringBuilder.AppendLine("     , isnull(a.초기잔고, 0) + isnull(a.이전매출액, 0) - isnull(a.이전수금액, 0) - isnull(a.이전매입액, 0) + isnull(a.이전지급액, 0) ");
            stringBuilder.AppendLine("         + isnull(a.당일매출액, 0) - isnull(a.당일수금액, 0) - isnull(a.당일매입액, 0) + isnull(a.당일지급액, 0) ");
            stringBuilder.AppendLine("         as 잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , '9pt' as 상품폰트 ");
            stringBuilder.AppendLine("     , '9pt' as 규격폰트 ");
            stringBuilder.AppendLine("     , 0 as 인쇄용단가 ");
            stringBuilder.AppendLine("     , 0 as 인쇄용총수량 ");
            stringBuilder.AppendLine("     , '' as 인쇄용총수량2 ");
            stringBuilder.AppendLine("     , '' as 인쇄용바코드 ");
            stringBuilder.AppendLine("     , substring(a.매출일자, 1, 7) as 매출년월 ");
            stringBuilder.AppendLine("     , case when isnull(a.사업자번호, '') = '8058600563' then d.거래처명 + ' ' + d.대표자명 else d.거래처명 end as 거래처명 ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호 ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 주소 ");
            stringBuilder.AppendLine("     , d.대표자명 as 거래처대표자명 ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.전화번호 ");
            stringBuilder.AppendLine("     , f.폰번호 ");
            stringBuilder.AppendLine("     , f.전화번호출력구분 ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , ff.개인사업자번호 as 대체사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(ff.개인사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(ff.개인사업자번호, 1, 3) + '-' + substring(ff.개인사업자번호, 4, 2) + '-' + substring(ff.개인사업자번호, 6, 5) end as 대체사업자번호2 ");
            stringBuilder.AppendLine("     , ff.대표자명 as 대체대표자 ");
            stringBuilder.AppendLine("     , ff.상호명 as 대체상호명 ");
            stringBuilder.AppendLine("     , ff.이메일 as 대체이메일 ");
            stringBuilder.AppendLine("     , ff.업태 as 대체업태 ");
            stringBuilder.AppendLine("     , ff.종목 as 대체종목 ");
            stringBuilder.AppendLine("     , ff.사업우편번호 as 대체우편번호 ");
            stringBuilder.AppendLine("     , ff.사업주소 as 대체주소1 ");
            stringBuilder.AppendLine("     , ff.사업상세주소 as 대체주소2 ");
            stringBuilder.AppendLine("     , ff.사업주소 + ' ' + ff.사업상세주소 as 대체주소 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 + ' / ' + f.사용자명 as 대체연락처 ");
            stringBuilder.AppendLine("     , ff.직인 as 대체직인 ");
            stringBuilder.AppendLine("     , '' as 대체직인파일 ");
            stringBuilder.AppendLine("     , ff.직인형식 as 대체직인형식 ");
            stringBuilder.AppendLine("     , ff.공지컴퓨터 as 대체공지컴퓨터 ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , b.품목수  ");
            stringBuilder.AppendLine("     , b.박스수량계  ");
            stringBuilder.AppendLine("     , b.중간수량계  ");
            stringBuilder.AppendLine("     , b.낱개수량계  ");
            stringBuilder.AppendLine("     , b.총수량계  ");
            stringBuilder.AppendLine("     , b.입력금액계  ");
            stringBuilder.AppendLine("     , b.부가세액계  ");
            stringBuilder.AppendLine("     , b.포함금액계  ");
            stringBuilder.AppendLine("     , (select 매출액계 from dbo.TBF거래처매출_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', a.매출일자, -1, a.거래처코드)) as 이전매출액 ");
            stringBuilder.AppendLine("     , (select 합계금액 from dbo.TBF거래처수금_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', a.매출일자, -1, a.거래처코드)) as 이전수금액 ");
            stringBuilder.AppendLine("     , (select 매입액계 from dbo.TBF거래처매입_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', a.매출일자, -1, a.거래처코드)) as 이전매입액 ");
            stringBuilder.AppendLine("     , (select 합계금액 from dbo.TBF거래처지급_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', a.매출일자, -1, a.거래처코드)) as 이전지급액 ");
            stringBuilder.AppendLine("     , (select 매출액계 from dbo.TBF거래처매출_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.매출일자, a.매출일자, 0, a.거래처코드)) as 당일매출액 ");
            stringBuilder.AppendLine("     , (select 합계금액 from dbo.TBF거래처수금_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.매출일자, a.매출일자, 0, a.거래처코드)) as 당일수금액 ");
            stringBuilder.AppendLine("     , (select 매입액계 from dbo.TBF거래처매입_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.매출일자, a.매출일자, 0, a.거래처코드)) as 당일매입액 ");
            stringBuilder.AppendLine("     , (select 합계금액 from dbo.TBF거래처지급_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.매출일자, a.매출일자, 0, a.거래처코드)) as 당일지급액 ");
            stringBuilder.AppendLine("     , tm.항목순번  ");
            stringBuilder.AppendLine("     , tm.상품코드  ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.총수량 as 총수량 ");
            if (Common.p_strBox == "3")
                stringBuilder.AppendLine("     , round(g.입수수량 * tm.낱개단가, 0) as 박스단가 ");
            else
                stringBuilder.AppendLine("     , tm.박스단가  ");
            stringBuilder.AppendLine("     , g.중간입수수량 * tm.낱개단가 as 중간단가 ");
            stringBuilder.AppendLine("     , tm.낱개단가  ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.금액 as 금액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when tm.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 ");
            stringBuilder.AppendLine("             else round(isnull(tm.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         as 부가세액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when tm.과세구분 = '2' then isnull(tm.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(tm.금액, 0) ");
            stringBuilder.AppendLine("             else isnull(tm.금액, 0) + round(isnull(tm.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         as 포함금액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스총수량 as 서비스총수량 ");
            stringBuilder.AppendLine("     , tm.최종매출일  ");
            stringBuilder.AppendLine("     , tm.매출구분  ");
            stringBuilder.AppendLine("     , r.명칭 as 매출구분명 ");
            stringBuilder.AppendLine("     , tm.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , tm.과세구분  ");
            stringBuilder.AppendLine("     , g.입수수량  ");
            stringBuilder.AppendLine("     , g.중간입수수량  ");
            stringBuilder.AppendLine("     , tm.박스입고단가 ");
            stringBuilder.AppendLine("     , tm.낱개입고단가 ");
            stringBuilder.AppendLine("     , g.박스바코드   ");
            stringBuilder.AppendLine("     , g.중간바코드   ");
            stringBuilder.AppendLine("     , g.낱개바코드   ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.상품명 + (case when isnull(g.규격, '') <> '' then ' ' + g.규격 else '' end) as 상품상세명 ");
            stringBuilder.AppendLine("     , c6.계좌별칭   ");
            stringBuilder.AppendLine("     , 0 as 표시순번 ");
            stringBuilder.AppendLine("     , '0' as 페이지그룹 ");
            stringBuilder.AppendLine("     , '1/1' as 표시페이지 ");
            stringBuilder.AppendLine("     , tr.명칭 as 배송사원명 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(tm.총수량, tm.사업자번호, tm.지점코드, tm.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      inner join (select a.* from T_매출항목 a ");
            stringBuilder.AppendLine("                     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                         and a.매출일자와번호 in (" + sWhereIN + ") ");
            stringBuilder.AppendLine("             ) tm on tm.사업자번호 = a.사업자번호 and tm.지점코드 = a.지점코드 and tm.매출일자 = a.매출일자 and tm.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = tm.사업자번호 and g.지점코드 = tm.지점코드 and g.상품코드 = tm.상품코드 ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 ff on ff.사업자번호 = d.사업자번호 and ff.지점코드 = d.지점코드 and ff.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join C_매출구분 r on r.코드 = tm.매출구분 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("      left outer join P_배송차량 tr on tr.사업자번호 = a.사업자번호 and tr.지점코드 = a.지점코드 and tr.코드 = a.배송사원 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량) as 박스수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.중간수량) as 중간수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.낱개수량) as 낱개수량계 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량) as 총수량계 ");
            else
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.총수량) as 총수량계 ");
            if (Common.p_CalcVAT == "Y")
            {
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '2' then isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                             when a.부가세코드 = '1' then round(isnull(b.금액, 0) / 1.1, 0) ");
                stringBuilder.AppendLine("                                         else isnull(b.금액, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 입력금액계 ");
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '2' then 0 ");
                stringBuilder.AppendLine("                                             when a.부가세코드 = '1' then isnull(b.금액, 0) - round(isnull(b.금액, 0) / 1.1, 0) ");
                stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 부가세액계 ");
            }
            else
            {
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                 ) as 입력금액계 ");
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 ");
                stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 부가세액계 ");
            }
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액계 ");
            stringBuilder.AppendLine("                         from T_매출 a ");
            stringBuilder.AppendLine("                             inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and b.매출일자와번호 in (" + sWhereIN + ") ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     left outer join T_업체계좌 c6 on c6.계좌순번 = d.계좌순번 and c6.사업자번호 = a.사업자번호 and c6.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" ) a ");
            stringBuilder.AppendLine(" order by a.매출일자 asc, a.전표번호 asc, a.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출_매출항목V2(string sWhereIN, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , isnull(a.초기잔고, 0) + isnull(a.이전매출액, 0) - isnull(a.이전수금액, 0) - isnull(a.이전매입액, 0) + isnull(a.이전지급액, 0) ");
            stringBuilder.AppendLine("         as 전잔고 ");
            stringBuilder.AppendLine("     , isnull(a.당일매출액, 0) - isnull(a.당일매입액, 0) + isnull(a.당일지급액, 0) as 당일매출액 ");
            stringBuilder.AppendLine("     , isnull(a.당일수금액, 0) as 당일수금액 ");
            stringBuilder.AppendLine("     , isnull(a.당일수금액, 0) as 당일수금합계금액 ");
            stringBuilder.AppendLine("     , isnull(a.초기잔고, 0) + isnull(a.이전매출액, 0) - isnull(a.이전수금액, 0) - isnull(a.이전매입액, 0) + isnull(a.이전지급액, 0) ");
            stringBuilder.AppendLine("         + isnull(a.당일매출액, 0) - isnull(a.당일수금액, 0) - isnull(a.당일매입액, 0) + isnull(a.당일지급액, 0) ");
            stringBuilder.AppendLine("         as 잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , '9pt' as 상품폰트 ");
            stringBuilder.AppendLine("     , '9pt' as 규격폰트 ");
            stringBuilder.AppendLine("     , 0 as 인쇄용단가 ");
            stringBuilder.AppendLine("     , 0 as 인쇄용총수량 ");
            stringBuilder.AppendLine("     , '' as 인쇄용총수량2 ");
            stringBuilder.AppendLine("     , '' as 인쇄용바코드 ");
            stringBuilder.AppendLine("     , substring(a.매출일자, 1, 7) as 매출년월 ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호 ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 주소 ");
            stringBuilder.AppendLine("     , d.대표자명 as 거래처대표자명 ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.전화번호 ");
            stringBuilder.AppendLine("     , f.폰번호 ");
            stringBuilder.AppendLine("     , f.전화번호출력구분 ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , ff.개인사업자번호 as 대체사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(ff.개인사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(ff.개인사업자번호, 1, 3) + '-' + substring(ff.개인사업자번호, 4, 2) + '-' + substring(ff.개인사업자번호, 6, 5) end as 대체사업자번호2 ");
            stringBuilder.AppendLine("     , ff.대표자명 as 대체대표자 ");
            stringBuilder.AppendLine("     , ff.상호명 as 대체상호명 ");
            stringBuilder.AppendLine("     , ff.이메일 as 대체이메일 ");
            stringBuilder.AppendLine("     , ff.업태 as 대체업태 ");
            stringBuilder.AppendLine("     , ff.종목 as 대체종목 ");
            stringBuilder.AppendLine("     , ff.사업우편번호 as 대체우편번호 ");
            stringBuilder.AppendLine("     , ff.사업주소 as 대체주소1 ");
            stringBuilder.AppendLine("     , ff.사업상세주소 as 대체주소2 ");
            stringBuilder.AppendLine("     , ff.사업주소 + ' ' + ff.사업상세주소 as 대체주소 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 + ' / ' + f.사용자명 as 대체연락처 ");
            stringBuilder.AppendLine("     , ff.직인 as 대체직인 ");
            stringBuilder.AppendLine("     , '' as 대체직인파일 ");
            stringBuilder.AppendLine("     , ff.직인형식 as 대체직인형식 ");
            stringBuilder.AppendLine("     , ff.공지컴퓨터 as 대체공지컴퓨터 ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , b.품목수  ");
            stringBuilder.AppendLine("     , b.박스수량계  ");
            stringBuilder.AppendLine("     , b.중간수량계  ");
            stringBuilder.AppendLine("     , b.낱개수량계  ");
            stringBuilder.AppendLine("     , b.총수량계  ");
            stringBuilder.AppendLine("     , b.입력금액계  ");
            stringBuilder.AppendLine("     , b.부가세액계  ");
            stringBuilder.AppendLine("     , b.포함금액계  ");
            stringBuilder.AppendLine("     , (select 매출액계 from dbo.TBF거래처매출2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', a.매출일자, -1, a.거래처코드)) as 이전매출액 ");
            stringBuilder.AppendLine("     , (select 합계금액 from dbo.TBF거래처수금2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', a.매출일자, -1, a.거래처코드)) as 이전수금액 ");
            stringBuilder.AppendLine("     , (select 매입액계 from dbo.TBF거래처매입2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', a.매출일자, -1, a.거래처코드)) as 이전매입액 ");
            stringBuilder.AppendLine("     , (select 합계금액 from dbo.TBF거래처지급2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', a.매출일자, -1, a.거래처코드)) as 이전지급액 ");
            stringBuilder.AppendLine("     , (select 매출액계 from dbo.TBF거래처매출2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.매출일자, a.매출일자, 0, a.거래처코드)) as 당일매출액 ");
            stringBuilder.AppendLine("     , (select 합계금액 from dbo.TBF거래처수금2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.매출일자, a.매출일자, 0, a.거래처코드)) as 당일수금액 ");
            stringBuilder.AppendLine("     , (select 매입액계 from dbo.TBF거래처매입2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.매출일자, a.매출일자, 0, a.거래처코드)) as 당일매입액 ");
            stringBuilder.AppendLine("     , (select 합계금액 from dbo.TBF거래처지급2_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.매출일자, a.매출일자, 0, a.거래처코드)) as 당일지급액 ");
            stringBuilder.AppendLine("     , tm.항목순번  ");
            stringBuilder.AppendLine("     , tm.상품코드  ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.총수량 as 총수량 ");
            if (Common.p_strBox == "3")
                stringBuilder.AppendLine("     , round(g.입수수량 * tm.낱개단가, 0) as 박스단가 ");
            else
                stringBuilder.AppendLine("     , tm.박스단가  ");
            stringBuilder.AppendLine("     , g.중간입수수량 * tm.낱개단가 as 중간단가 ");
            stringBuilder.AppendLine("     , tm.낱개단가  ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.금액 as 금액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when tm.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 ");
            stringBuilder.AppendLine("             else round(isnull(tm.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         as 부가세액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when tm.과세구분 = '2' then isnull(tm.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(tm.금액, 0) ");
            stringBuilder.AppendLine("             else isnull(tm.금액, 0) + round(isnull(tm.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         as 포함금액 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("     , (case when tm.매출구분 in ('1', '2') then 1 else -1 end) * tm.서비스총수량 as 서비스총수량 ");
            stringBuilder.AppendLine("     , tm.최종매출일  ");
            stringBuilder.AppendLine("     , tm.매출구분  ");
            stringBuilder.AppendLine("     , r.명칭 as 매출구분명 ");
            stringBuilder.AppendLine("     , tm.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , tm.과세구분  ");
            stringBuilder.AppendLine("     , g.입수수량  ");
            stringBuilder.AppendLine("     , g.중간입수수량  ");
            stringBuilder.AppendLine("     , tm.박스입고단가 ");
            stringBuilder.AppendLine("     , tm.낱개입고단가 ");
            stringBuilder.AppendLine("     , g.박스바코드   ");
            stringBuilder.AppendLine("     , g.중간바코드   ");
            stringBuilder.AppendLine("     , g.낱개바코드   ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.상품명 + (case when isnull(g.규격, '') <> '' then ' ' + g.규격 else '' end) as 상품상세명 ");
            stringBuilder.AppendLine("     , c6.계좌별칭   ");
            stringBuilder.AppendLine("     , 0 as 표시순번 ");
            stringBuilder.AppendLine("     , '0' as 페이지그룹 ");
            stringBuilder.AppendLine("     , '1/1' as 표시페이지 ");
            stringBuilder.AppendLine("     , tr.명칭 as 배송사원명 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(tm.총수량, tm.사업자번호, tm.지점코드, tm.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      inner join (select a.* from T_매출항목 a ");
            stringBuilder.AppendLine("                     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                         and a.매출일자와번호 in (" + sWhereIN + ") ");
            stringBuilder.AppendLine("             ) tm on tm.사업자번호 = a.사업자번호 and tm.지점코드 = a.지점코드 and tm.매출일자 = a.매출일자 and tm.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = tm.사업자번호 and g.지점코드 = tm.지점코드 and g.상품코드 = tm.상품코드 ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 ff on ff.사업자번호 = d.사업자번호 and ff.지점코드 = d.지점코드 and ff.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join C_매출구분 r on r.코드 = tm.매출구분 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("      left outer join P_배송차량 tr on tr.사업자번호 = a.사업자번호 and tr.지점코드 = a.지점코드 and tr.코드 = a.배송사원 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량) as 박스수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.중간수량) as 중간수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.낱개수량) as 낱개수량계 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량) as 총수량계 ");
            else
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.총수량) as 총수량계 ");
            if (Common.p_CalcVAT == "Y")
            {
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '2' then isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                             when a.부가세코드 = '1' then round(isnull(b.금액, 0) / 1.1, 0) ");
                stringBuilder.AppendLine("                                         else isnull(b.금액, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 입력금액계 ");
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '2' then 0 ");
                stringBuilder.AppendLine("                                             when a.부가세코드 = '1' then isnull(b.금액, 0) - round(isnull(b.금액, 0) / 1.1, 0) ");
                stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 부가세액계 ");
            }
            else
            {
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.금액, 0) ");
                stringBuilder.AppendLine("                                 ) as 입력금액계 ");
                stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
                stringBuilder.AppendLine("                                     else ");
                stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 ");
                stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
                stringBuilder.AppendLine("                                     end) ");
                stringBuilder.AppendLine("                                 ) as 부가세액계 ");
            }
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액계 ");
            stringBuilder.AppendLine("                         from T_매출 a ");
            stringBuilder.AppendLine("                             inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and b.매출일자와번호 in (" + sWhereIN + ") ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     left outer join T_업체계좌 c6 on c6.계좌순번 = d.계좌순번 and c6.사업자번호 = a.사업자번호 and c6.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" ) a ");
            stringBuilder.AppendLine(" order by a.매출일자 asc, a.전표번호 asc, a.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_사입품_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sManNo2,
          bool bNoZero,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select NULL as 순번 ");
            stringBuilder.AppendLine("     , x.상품코드 ");
            stringBuilder.AppendLine("     , x.상품명 ");
            stringBuilder.AppendLine("     , x.규격 ");
            stringBuilder.AppendLine("     , isnull(y.박스표시, '') as 박스표시 ");
            stringBuilder.AppendLine("     , isnull(y.박스, 0) as 박스 ");
            stringBuilder.AppendLine("     , isnull(y.중간, 0) as 중간 ");
            stringBuilder.AppendLine("     , isnull(y.낱개, 0) as 낱개 ");
            stringBuilder.AppendLine("     , isnull(y.총수량, 0) as 총수량 ");
            stringBuilder.AppendLine("     , '' as 비고 ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , isnull((select top 1 박스단가 from T_매입단가표 ");
                stringBuilder.AppendLine("                 where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "'  ");
                stringBuilder.AppendLine("                 and 상품코드 = x.상품코드 and 매입일자 < '" + sDay1 + "' order by 매입일자 desc), 0) as 단가 ");
            }
            else
            {
                stringBuilder.AppendLine("     , isnull((select top 1 낱개단가 from T_매입단가표 ");
                stringBuilder.AppendLine("                 where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "'  ");
                stringBuilder.AppendLine("                 and 상품코드 = x.상품코드 and 매입일자 < '" + sDay1 + "' order by 매입일자 desc), 0) as 단가 ");
            }
            stringBuilder.AppendLine(" from T_상품정보 x ");
            stringBuilder.AppendLine(" left outer join ( ");
            stringBuilder.AppendLine("     select z.사업자번호 ");
            stringBuilder.AppendLine("         , z.상품코드 ");
            stringBuilder.AppendLine("         , dbo.Func_박스수량환산(sum(z.총수량), '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', z.상품코드) as 박스표시 ");
            stringBuilder.AppendLine("         , convert(float, dbo.Func_전체박스환산(sum(z.총수량), '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', z.상품코드)) as 박스 ");
            stringBuilder.AppendLine("         , convert(float, dbo.Func_전체중간환산(sum(z.총수량), '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', z.상품코드)) as 중간 ");
            stringBuilder.AppendLine("         , convert(float, dbo.Func_전체낱개환산(sum(z.총수량), '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', z.상품코드)) as 낱개 ");
            stringBuilder.AppendLine("         , sum(z.총수량) as 총수량 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         select a.사업자번호 ");
            stringBuilder.AppendLine("             , b.상품코드 ");
            stringBuilder.AppendLine("             , b.총수량 ");
            stringBuilder.AppendLine("         from T_매출 a       ");
            stringBuilder.AppendLine("             inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 and d.사용여부 = '0' ");
            stringBuilder.AppendLine("             inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("             inner join T_상품정보 g on g.사업자번호 = b.사업자번호 and g.지점코드 = b.지점코드 and g.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("                                 and isnull(g.사입품, 'N') = 'Y' ");
            stringBuilder.AppendLine("         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("             and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("             and a.매출일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("             and g.주매입처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine("         ) z ");
            stringBuilder.AppendLine("         group by z.사업자번호 ");
            stringBuilder.AppendLine("             , z.상품코드 ");
            stringBuilder.AppendLine("     ) y on y.상품코드 = x.상품코드 ");
            stringBuilder.AppendLine(" where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and isnull(x.사입품, 'N') = 'Y' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and x.주매입처코드 = '" + sCust + "' ");
            if (sManNo2 != "")
            {
                stringBuilder.AppendLine("     and x.주매입처코드 in (select 거래처코드 from T_거래처정보 ");
                stringBuilder.AppendLine("                             where 사업자번호 = '" + Common.p_strCompID + "' ");
                stringBuilder.AppendLine("                                 and 지점코드 = '" + Common.p_strSpotCode + "' ");
                stringBuilder.AppendLine("                                 and 거래처구분 in ('2', '3') ");
                stringBuilder.AppendLine("                                 and 배송사원 = '" + sManNo2 + "' ");
                stringBuilder.AppendLine("                             ) ");
            }
            if (bNoZero)
                stringBuilder.AppendLine("     and isnull(y.총수량, 0) <> 0 ");
            stringBuilder.AppendLine(" order by x.사업자번호 asc ");
            stringBuilder.AppendLine("     , x.정렬순서 asc ");
            stringBuilder.AppendLine("     , x.상품명 asc ");
            stringBuilder.AppendLine("     , x.규격 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_출고지시_List(
          string sDay1,
          string sDay2,
          string sMan,
          string sMan2,
          string sCust,
          string strAllFlag,
          string sOutNum,
          bool chkLoc,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select z.사업자번호 ");
            stringBuilder.AppendLine("     , NULL as 순번 ");
            stringBuilder.AppendLine("     , z.V창고코드 as 창고코드 ");
            stringBuilder.AppendLine("     , z.창고명 ");
            stringBuilder.AppendLine("     , z.상품코드 ");
            stringBuilder.AppendLine("     , z.상품명 ");
            stringBuilder.AppendLine("     , z.규격 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(sum(z.총수량), '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', z.상품코드) as 박스표시 ");
            stringBuilder.AppendLine("     , convert(float, dbo.Func_전체박스환산(sum(z.총수량), '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', z.상품코드)) as 박스 ");
            stringBuilder.AppendLine("     , convert(float, dbo.Func_전체중간환산(sum(z.총수량), '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', z.상품코드)) as 중간 ");
            stringBuilder.AppendLine("     , convert(float, dbo.Func_전체낱개환산(sum(z.총수량), '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', z.상품코드)) as 낱개 ");
            stringBuilder.AppendLine("     , sum(z.총수량) as 총수량 ");
            stringBuilder.AppendLine("     , max(z.정렬순서) as 정렬순서 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , d.거래처명 ");
            stringBuilder.AppendLine("     , d.사원번호 ");
            stringBuilder.AppendLine("     , f.사용자명 ");
            if (!chkLoc)
            {
                stringBuilder.AppendLine("     , a.창고코드 as V창고코드 ");
                stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            }
            else
            {
                stringBuilder.AppendLine("     , g.출고위치 as V창고코드 ");
                stringBuilder.AppendLine("     , g.출고위치 as 창고명 ");
            }
            stringBuilder.AppendLine("     , g.상품명 ");
            stringBuilder.AppendLine("     , g.규격 ");
            stringBuilder.AppendLine("     , b.상품코드 ");
            stringBuilder.AppendLine("     , b.총수량 ");
            stringBuilder.AppendLine("     , g.정렬순서 ");
            stringBuilder.AppendLine("     , e.명칭 as 배송사원명 ");
            stringBuilder.AppendLine("     , case when isnull(cc.사업자번호, '') = '' then '" + Common.p_strCompName + "' else cc.상호명 end as 상호명 ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 and d.사용여부 = '0' ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 cc on cc.사업자번호 = f.사업자번호 and cc.지점코드 = f.지점코드 and cc.사원번호 = f.사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join P_배송차량 v on v.사업자번호 = a.사업자번호 and v.지점코드 = a.지점코드 and v.코드 = a.배송사원 ");
            stringBuilder.AppendLine("      inner join T_상품정보 g on g.사업자번호 = b.사업자번호 and g.지점코드 = b.지점코드 and g.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("     and b.매출구분 in ('1', '2') ");
            if (sMan != "")
                stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            if (sMan2 != "")
                stringBuilder.AppendLine("     and a.배송사원 = '" + sMan2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sOutNum != "")
                stringBuilder.AppendLine("     and isnull(a.출고차수, '1') = '" + sOutNum + "' ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" group by z.사업자번호 ");
            stringBuilder.AppendLine("     , z.V창고코드 ");
            stringBuilder.AppendLine("     , z.창고명 ");
            stringBuilder.AppendLine("     , z.상품코드 ");
            stringBuilder.AppendLine("     , z.상품명 ");
            stringBuilder.AppendLine("     , z.규격 ");
            stringBuilder.AppendLine(" order by z.사업자번호 asc ");
            stringBuilder.AppendLine("     , z.V창고코드 asc ");
            stringBuilder.AppendLine("     , max(z.정렬순서) asc ");
            stringBuilder.AppendLine("     , z.상품명 asc ");
            stringBuilder.AppendLine("     , z.규격 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_배송_List(
          string sDay1,
          string sDay2,
          bool chkMiddle,
          string sMan,
          string sMan2,
          string sCust,
          string sOutNum,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select z.사업자번호 ");
            stringBuilder.AppendLine("     , z.지점코드 ");
            stringBuilder.AppendLine("     , z.상호번호 ");
            stringBuilder.AppendLine("     , z.상호명 ");
            stringBuilder.AppendLine("     , z.사원번호 ");
            stringBuilder.AppendLine("     , z.사용자명 ");
            stringBuilder.AppendLine("     , z.배송사원 ");
            stringBuilder.AppendLine("     , z.배송사원명 ");
            stringBuilder.AppendLine("     , z.거래처코드 ");
            stringBuilder.AppendLine("     , z.거래처명 ");
            stringBuilder.AppendLine("     , z.항목순번 ");
            stringBuilder.AppendLine("     , z.상품코드 ");
            stringBuilder.AppendLine("     , z.상품명 ");
            stringBuilder.AppendLine("     , z.규격 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(sum(z.총수량), '" + Common.p_strCompID + "', z.지점코드, z.상품코드) as 박스표시 ");
            stringBuilder.AppendLine("     , convert(float, dbo.Func_전체박스환산(sum(z.총수량), '" + Common.p_strCompID + "', z.지점코드, z.상품코드)) as 박스 ");
            stringBuilder.AppendLine("     , convert(float, dbo.Func_전체중간환산(sum(z.총수량), '" + Common.p_strCompID + "', z.지점코드, z.상품코드)) as 중간 ");
            stringBuilder.AppendLine("     , convert(float, dbo.Func_전체낱개환산(sum(z.총수량), '" + Common.p_strCompID + "', z.지점코드, z.상품코드)) as 낱개 ");
            stringBuilder.AppendLine("     , sum(z.총수량) as 총수량 ");
            stringBuilder.AppendLine("     , max(z.정렬순서) as 정렬순서 ");
            stringBuilder.AppendLine("     , max(z.우편번호) as 우편번호 ");
            stringBuilder.AppendLine("     , max(z.주소) as 주소 ");
            stringBuilder.AppendLine("     , max(z.상세주소) as 상세주소 ");
            stringBuilder.AppendLine("     , max(z.전화번호) as 전화번호 ");
            stringBuilder.AppendLine("     , max(z.폰번호) as 폰번호 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , d.거래처명 ");
            stringBuilder.AppendLine("     , d.사원번호 ");
            stringBuilder.AppendLine("     , d.우편번호 ");
            stringBuilder.AppendLine("     , d.주소 ");
            stringBuilder.AppendLine("     , d.상세주소 ");
            stringBuilder.AppendLine("     , d.전화번호 ");
            stringBuilder.AppendLine("     , d.폰번호 ");
            stringBuilder.AppendLine("     , f.사용자명 ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , g.상품명 ");
            stringBuilder.AppendLine("     , g.규격 ");
            stringBuilder.AppendLine("     , b.항목순번 ");
            stringBuilder.AppendLine("     , b.상품코드 ");
            stringBuilder.AppendLine("     , b.총수량 ");
            stringBuilder.AppendLine("     , g.정렬순서 ");
            stringBuilder.AppendLine("     , v.명칭 as 배송사원명 ");
            stringBuilder.AppendLine("     , case when isnull(cc.사업자번호, '') = '' then '" + Common.p_strCompID + "' else cc.개인사업자번호 end as 상호번호 ");
            stringBuilder.AppendLine("     , case when isnull(cc.사업자번호, '') = '' then '" + Common.p_strCompName + "' else cc.상호명 end as 상호명 ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 and d.사용여부 = '0' ");
            stringBuilder.AppendLine("                                 and isnull(d.중상여부, '0') = '0' ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 cc on cc.사업자번호 = f.사업자번호 and cc.지점코드 = f.지점코드 and cc.사원번호 = f.사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join P_배송차량 v on v.사업자번호 = a.사업자번호 and v.지점코드 = a.지점코드 and v.코드 = a.배송사원 ");
            stringBuilder.AppendLine("      inner join T_상품정보 g on g.사업자번호 = b.사업자번호 and g.지점코드 = b.지점코드 and g.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            if (sMan2 != "")
                stringBuilder.AppendLine("     and a.배송사원 = '" + sMan2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sOutNum != "")
                stringBuilder.AppendLine("     and isnull(a.출고차수, '1') = '" + sOutNum + "' ");
            if (Common.p_strSpotCode != "0")
            {
                stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
                if (sMan != "")
                    stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            }
            else if (chkMiddle)
            {
                if (sMan != "")
                    stringBuilder.AppendLine("     and a.지점코드 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and a.지점코드 <> '0' ");
            }
            else
            {
                stringBuilder.AppendLine("     and a.지점코드 = '0' ");
                if (sMan != "")
                    stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            }
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" group by z.사업자번호 ");
            stringBuilder.AppendLine("     , z.지점코드 ");
            stringBuilder.AppendLine("     , z.상호번호 ");
            stringBuilder.AppendLine("     , z.상호명 ");
            stringBuilder.AppendLine("     , z.사원번호 ");
            stringBuilder.AppendLine("     , z.사용자명 ");
            stringBuilder.AppendLine("     , z.배송사원 ");
            stringBuilder.AppendLine("     , z.배송사원명 ");
            stringBuilder.AppendLine("     , z.거래처코드 ");
            stringBuilder.AppendLine("     , z.거래처명 ");
            stringBuilder.AppendLine("     , z.상품코드 ");
            stringBuilder.AppendLine("     , z.항목순번 ");
            stringBuilder.AppendLine("     , z.상품명 ");
            stringBuilder.AppendLine("     , z.규격 ");
            stringBuilder.AppendLine(" order by z.사업자번호 asc ");
            stringBuilder.AppendLine("     , z.지점코드 asc ");
            stringBuilder.AppendLine("     , z.상호번호 asc ");
            stringBuilder.AppendLine("     , z.사원번호 asc ");
            stringBuilder.AppendLine("     , z.거래처코드 asc ");
            stringBuilder.AppendLine("     , z.상품명 asc ");
            stringBuilder.AppendLine("     , z.규격 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매입_매입항목(
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          bool bAll,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , substring(a.매입일자, 1, 7) as 매입년월 ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호 ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 주소 ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , b.품목수  ");
            stringBuilder.AppendLine("     , b.박스수량계  ");
            stringBuilder.AppendLine("     , b.중간수량계  ");
            stringBuilder.AppendLine("     , b.낱개수량계  ");
            stringBuilder.AppendLine("     , b.총수량계  ");
            stringBuilder.AppendLine("     , b.포함금액계  ");
            stringBuilder.AppendLine("     , isnull(d.초기잔고, 0) + isnull(s.이전매출액, 0) - isnull(w.이전수금액, 0) - isnull(s2.이전매입액, 0) + isnull(w2.이전지급액, 0) ");
            stringBuilder.AppendLine("         as 전잔고 ");
            stringBuilder.AppendLine("     , isnull(d.초기잔고, 0) + isnull(s.이전매출액, 0) - isnull(w.이전수금액, 0) - isnull(s2.이전매입액, 0) + isnull(w2.이전지급액, 0) ");
            stringBuilder.AppendLine("         + isnull(ss.당일매출액, 0) - isnull(ww.당일수금액, 0) - isnull(ss2.당일매입액, 0) + isnull(ww2.당일지급액, 0) ");
            stringBuilder.AppendLine("         as 잔고 ");
            stringBuilder.AppendLine("     , tm.항목순번  ");
            stringBuilder.AppendLine("     , tm.상품코드  ");
            stringBuilder.AppendLine("     , (case when tm.매입구분 in ('1', '2') then 1 else -1 end) * tm.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("     , (case when tm.매입구분 in ('1', '2') then 1 else -1 end) * tm.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("     , (case when tm.매입구분 in ('1', '2') then 1 else -1 end) * tm.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("     , (case when tm.매입구분 in ('1', '2') then 1 else -1 end) * tm.총수량 as 총수량 ");
            stringBuilder.AppendLine("     , tm.박스단가  ");
            stringBuilder.AppendLine("     , tm.낱개단가  ");
            stringBuilder.AppendLine("     , (case when tm.매입구분 in ('1', '2') then 1 else -1 end) * tm.금액 as 금액 ");
            stringBuilder.AppendLine("     , (case when tm.매입구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when tm.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 ");
            stringBuilder.AppendLine("             else round(isnull(tm.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         as 부가세액 ");
            stringBuilder.AppendLine("     , (case when tm.매입구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when tm.과세구분 = '2' then isnull(tm.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(tm.금액, 0) ");
            stringBuilder.AppendLine("             else isnull(tm.금액, 0) + round(isnull(tm.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         as 포함금액 ");
            stringBuilder.AppendLine("     , (case when tm.매입구분 in ('1', '2') then 1 else -1 end) * tm.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("     , (case when tm.매입구분 in ('1', '2') then 1 else -1 end) * tm.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("     , tm.매입구분  ");
            stringBuilder.AppendLine("     , r.명칭 as 매입구분명 ");
            stringBuilder.AppendLine("     , tm.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , tm.과세구분  ");
            stringBuilder.AppendLine("     , g.입수수량  ");
            stringBuilder.AppendLine("     , g.중간입수수량  ");
            stringBuilder.AppendLine("     , g.박스바코드   ");
            stringBuilder.AppendLine("     , g.중간바코드   ");
            stringBuilder.AppendLine("     , g.낱개바코드   ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.상품명 + (case when isnull(g.규격, '') <> '' then ' ' + g.규격 else '' end) as 상품상세명 ");
            stringBuilder.AppendLine("     , c6.계좌별칭   ");
            stringBuilder.AppendLine("     , 0 as 표시순번 ");
            stringBuilder.AppendLine("     , '0' as 페이지그룹 ");
            stringBuilder.AppendLine("     , '1/1' as 표시페이지 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(tm.총수량, tm.사업자번호, tm.지점코드, tm.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" from T_매입 a       ");
            stringBuilder.AppendLine("      inner join T_매입항목 tm on tm.사업자번호 = a.사업자번호 and tm.지점코드 = a.지점코드 and tm.매입일자 = a.매입일자 and tm.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = tm.사업자번호 and g.지점코드 = tm.지점코드 and g.상품코드 = tm.상품코드 ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join C_매입구분 r on r.코드 = tm.매입구분 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 매입일자, 전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_매입항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 매입일자 >= @p_1 ");
            stringBuilder.AppendLine("                             and 매입일자 <= @p_2 ");
            stringBuilder.AppendLine("                             and 상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 매입일자, 전표번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.매입일자 = a.매입일자 and c.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매입일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum((case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.박스수량) as 박스수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.중간수량) as 중간수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.낱개수량) as 낱개수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.총수량) as 총수량계 ");
            stringBuilder.AppendLine("                             , sum((case when b.매입구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액계 ");
            stringBuilder.AppendLine("                         from T_매입 a ");
            stringBuilder.AppendLine("                             inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.매입일자 >= @p_1 ");
            stringBuilder.AppendLine("                             and a.매입일자 <= @p_2 ");
            if (!bAll)
                stringBuilder.AppendLine("                             and a.발행여부 = 'N' ");
            if (sCust != "")
                stringBuilder.AppendLine("                             and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매입일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join (select 거래처코드, 매출액계 as 이전매출액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매출_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine("                      ) s on s.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join (select 거래처코드, 합계금액 as 이전수금액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처수금_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine("                      ) w on w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join (select 거래처코드, 매입액계 as 이전매입액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매입_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine("                      ) s2 on s2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join (select 거래처코드, 합계금액 as 이전지급액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처지급_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_1, -1, '') ");
            stringBuilder.AppendLine("                      ) w2 on w2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join (select 거래처코드, 매출액계 as 당일매출액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매출_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_2, 0, '') ");
            stringBuilder.AppendLine("                      ) ss on ss.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join (select 거래처코드, 합계금액 as 당일수금액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처수금_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_2, 0, '') ");
            stringBuilder.AppendLine("                      ) ww on ww.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join (select 거래처코드, 매입액계 as 당일매입액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처매입_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_2, 0, '') ");
            stringBuilder.AppendLine("                      ) ss2 on ss2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join (select 거래처코드, 합계금액 as 당일지급액 ");
            stringBuilder.AppendLine("                         from dbo.TBF거래처지급_기간('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_1, @p_2, 0, '') ");
            stringBuilder.AppendLine("                      ) ww2 on ww2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join T_업체계좌 c6 on c6.계좌순번 = d.계좌순번 and c6.사업자번호 = a.사업자번호 and c6.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 >= @p_1 ");
            stringBuilder.AppendLine("     and a.매입일자 <= @p_2 ");
            if (!bAll)
                stringBuilder.AppendLine("     and a.발행여부 = 'N' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and isnull(c.해당품목수, 0) > 0 ");
            stringBuilder.AppendLine(" order by a.매입일자 asc, a.전표번호 asc, tm.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출항목_List(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(a.총수량, a.사업자번호, a.지점코드, a.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" from T_매출항목 a   ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.전표번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출항목_전체_List(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine(" from T_매출항목 a   ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= @p_1 ");
            stringBuilder.AppendLine("     and a.매출일자 <= @p_2 ");
            stringBuilder.AppendLine(" order by a.매출일자 asc, a.전표번호 asc, a.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출단가표_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select z.* from (");
            stringBuilder.AppendLine(" select '1' as 거래구분 ");
            stringBuilder.AppendLine("     , a.* ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , a.박스수량 as 표시총수량");
                stringBuilder.AppendLine("     , a.박스단가 as 표시단가");
                stringBuilder.AppendLine("     , a.박스입고단가 as 표시입고단가");
                stringBuilder.AppendLine("     , case when isnull(a1.중상여부, '0') = '1' then b.박스도매단가 else b.박스판매단가 end as 표시기본단가");
            }
            else
            {
                stringBuilder.AppendLine("     , a.총수량 as 표시총수량");
                stringBuilder.AppendLine("     , a.낱개단가 as 표시단가");
                stringBuilder.AppendLine("     , a.낱개입고단가 as 표시입고단가");
                stringBuilder.AppendLine("     , case when isnull(a1.중상여부, '0') = '1' then b.낱개도매단가 else b.낱개판매단가 end as 표시기본단가");
            }
            stringBuilder.AppendLine(" from T_매출단가표 a ");
            stringBuilder.AppendLine("      inner join T_거래처정보 a1 on a1.사업자번호 = a.사업자번호 and a1.지점코드 = a.지점코드 and a1.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 a2 on a2.사업자번호 = a1.사업자번호 and a2.지점코드 = a1.지점코드 and a2.사원번호 = a1.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_상품정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = @p_3 ");
            stringBuilder.AppendLine("     and a.상품코드 = @p_4 ");
            stringBuilder.AppendLine("     and a.매출일자 >= @p_1 ");
            stringBuilder.AppendLine("     and a.매출일자 <= @p_2 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '2' as 거래구분 ");
            stringBuilder.AppendLine("     , a.* ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , a.박스수량 as 표시총수량");
                stringBuilder.AppendLine("     , a.박스단가 as 표시단가");
                stringBuilder.AppendLine("     , a.박스입고단가 as 표시입고단가");
                stringBuilder.AppendLine("     , case when isnull(a1.중상여부, '0') = '1' then b.박스도매단가 else b.박스판매단가 end as 표시기본단가");
            }
            else
            {
                stringBuilder.AppendLine("     , a.총수량 as 표시총수량");
                stringBuilder.AppendLine("     , a.낱개단가 as 표시단가");
                stringBuilder.AppendLine("     , a.낱개입고단가 as 표시입고단가");
                stringBuilder.AppendLine("     , case when isnull(a1.중상여부, '0') = '1' then b.낱개도매단가 else b.낱개판매단가 end as 표시기본단가");
            }
            stringBuilder.AppendLine(" from T_매출행사단가표 a ");
            stringBuilder.AppendLine("      inner join T_거래처정보 a1 on a1.사업자번호 = a.사업자번호 and a1.지점코드 = a.지점코드 and a1.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 a2 on a2.사업자번호 = a1.사업자번호 and a2.지점코드 = a1.지점코드 and a2.사원번호 = a1.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_상품정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = @p_3 ");
            stringBuilder.AppendLine("     and a.상품코드 = @p_4 ");
            stringBuilder.AppendLine("     and a.매출일자 >= @p_1 ");
            stringBuilder.AppendLine("     and a.매출일자 <= @p_2 ");
            stringBuilder.AppendLine(") z order by z.매출일자 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sDay2);
            sCommand.Parameters.AddWithValue("@p_3", (object)sCust);
            sCommand.Parameters.AddWithValue("@p_4", (object)sProd);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출단가표_Last(string sCust, string sProd, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select top 1 a.*    ");
            stringBuilder.AppendLine(" from T_매출단가표 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = @p_3 ");
            stringBuilder.AppendLine("     and a.상품코드 = @p_4 ");
            stringBuilder.AppendLine(" order by a.매출일자 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_3", (object)sCust);
            sCommand.Parameters.AddWithValue("@p_4", (object)sProd);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출행사단가표_Last(string sCust, string sProd, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select top 1 a.*    ");
            stringBuilder.AppendLine(" from T_매출행사단가표 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = @p_3 ");
            stringBuilder.AppendLine("     and a.상품코드 = @p_4 ");
            stringBuilder.AppendLine(" order by a.매출일자 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_3", (object)sCust);
            sCommand.Parameters.AddWithValue("@p_4", (object)sProd);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매입단가표_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select z.* from (");
            stringBuilder.AppendLine(" select '1' as 거래구분 ");
            stringBuilder.AppendLine("     , a.* ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , a.박스수량 as 표시총수량");
                stringBuilder.AppendLine("     , a.박스단가 as 표시단가");
                stringBuilder.AppendLine("     , b.박스입고단가 as 표시기본단가");
            }
            else
            {
                stringBuilder.AppendLine("     , a.총수량 as 표시총수량");
                stringBuilder.AppendLine("     , a.낱개단가 as 표시단가");
                stringBuilder.AppendLine("     , b.낱개입고단가 as 표시기본단가");
            }
            stringBuilder.AppendLine(" from T_매입단가표 a ");
            stringBuilder.AppendLine("      inner join T_거래처정보 a1 on a1.사업자번호 = a.사업자번호 and a1.지점코드 = a.지점코드 and a1.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_상품정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = @p_3 ");
            stringBuilder.AppendLine("     and a.상품코드 = @p_4 ");
            stringBuilder.AppendLine("     and a.매입일자 >= @p_1 ");
            stringBuilder.AppendLine("     and a.매입일자 <= @p_2 ");
            stringBuilder.AppendLine(") z order by z.매입일자 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sDay2);
            sCommand.Parameters.AddWithValue("@p_3", (object)sCust);
            sCommand.Parameters.AddWithValue("@p_4", (object)sProd);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매입단가표_Last(string sCust, string sProd, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select top 1 a.*    ");
            stringBuilder.AppendLine(" from T_매입단가표 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = @p_3 ");
            stringBuilder.AppendLine("     and a.상품코드 = @p_4 ");
            stringBuilder.AppendLine(" order by a.매입일자 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_3", (object)sCust);
            sCommand.Parameters.AddWithValue("@p_4", (object)sProd);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_분류코드_List(string sTable, string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select               ");
            stringBuilder.AppendLine("     a.*             ");
            stringBuilder.AppendLine(" from " + sTable + " a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_분류코드2_List(string sTable, string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select               ");
            stringBuilder.AppendLine("     a.*             ");
            stringBuilder.AppendLine(" from " + sTable + " a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_분류코드_Detail(string sTable, string p1, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select               ");
            stringBuilder.AppendLine("     a.*             ");
            stringBuilder.AppendLine(" from " + sTable + " a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.코드 = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_분류코드2_Detail(string sTable, string p1, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select               ");
            stringBuilder.AppendLine("     a.*             ");
            stringBuilder.AppendLine(" from " + sTable + " a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.코드 = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_홈택스_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     a.* ");
            stringBuilder.AppendLine(" from T_홈택스 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.발행일자 desc, a.발행번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_홈택스_Detail(string p1, string p2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     a.* ");
            stringBuilder.AppendLine(" from T_홈택스 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.발행일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.발행번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            sCommand.Parameters.AddWithValue("@p_2", (object)p2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_홈택스내역_List(string p1, string p2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , d.거래처구분  ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.정식명칭    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.대표자명    ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 전체주소 ");
            stringBuilder.AppendLine("     , d.업태    ");
            stringBuilder.AppendLine("     , d.종목    ");
            stringBuilder.AppendLine("     , d.전화번호    ");
            stringBuilder.AppendLine("     , d.이메일    ");
            stringBuilder.AppendLine("     , substring(a.계산서일자, 1, 4) as 발행년 ");
            stringBuilder.AppendLine("     , substring(a.계산서일자, 6, 2) as 발행월 ");
            stringBuilder.AppendLine("     , substring(a.계산서일자, 9, 2) as 발행일 ");
            stringBuilder.AppendLine("     , ff.개인사업자번호 as 대체사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(ff.개인사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(ff.개인사업자번호, 1, 3) + '-' + substring(ff.개인사업자번호, 4, 2) + '-' + substring(ff.개인사업자번호, 6, 5) end as 대체사업자번호2 ");
            stringBuilder.AppendLine("     , ff.대표자명 as 대체대표자 ");
            stringBuilder.AppendLine("     , ff.상호명 as 대체상호명 ");
            stringBuilder.AppendLine("     , ff.이메일 as 대체이메일 ");
            stringBuilder.AppendLine("     , ff.업태 as 대체업태 ");
            stringBuilder.AppendLine("     , ff.종목 as 대체종목 ");
            stringBuilder.AppendLine("     , ff.사업우편번호 as 대체우편번호 ");
            stringBuilder.AppendLine("     , ff.사업주소 + ' ' + ff.사업상세주소 as 대체주소 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 ");
            stringBuilder.AppendLine(" from T_계산서매출 a ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 ff on ff.사업자번호 = d.사업자번호 and ff.지점코드 = d.지점코드 and ff.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      inner join T_홈택스항목 ht on ht.사업자번호 = a.사업자번호 and ht.지점코드 = a.지점코드 and ht.계산서일자 = a.계산서일자 and ht.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine(" where ht.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and ht.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and ht.발행일자 = @p_1 ");
            stringBuilder.AppendLine("     and ht.발행번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            sCommand.Parameters.AddWithValue("@p_2", (object)p2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_홈택스_Check(string p1, string p2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     a.* ");
            stringBuilder.AppendLine(" from T_홈택스항목 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.계산서번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            sCommand.Parameters.AddWithValue("@p_2", (object)p2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_수금_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sMan,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , substring(a.수금일자, 1, 7) as 수금년월 ");
            stringBuilder.AppendLine("     , c.명칭 as 수금구분명 ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_수금 a       ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            else
                stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join C_금전구분 c on c.코드 = a.수금구분 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수금일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.수금일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            }
            stringBuilder.AppendLine(" order by a.수금일자 desc, a.전표번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_수금_Detail(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , c.명칭 as 수금구분명 ");
            stringBuilder.AppendLine("     , d.거래처구분  ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_수금 a       ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = a.사업자번호 and f.지점코드 = a.지점코드 and f.사원번호 = a.담당사원 ");
            stringBuilder.AppendLine("      left outer join C_금전구분 c on c.코드 = a.수금구분 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수금일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.전표번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_견적_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , b.품목수      ");
            stringBuilder.AppendLine("     , b.금액    ");
            stringBuilder.AppendLine("     , (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else b.부가세액 end) as 부가세액 ");
            stringBuilder.AppendLine("     , b.포함금액 as 합계금액 ");
            stringBuilder.AppendLine("     , b.포함금액 - isnull(a.할인금액, 0) as 견적금액 ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_견적 a       ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            else
                stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 견적일자, 견적번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , isnull(sum(포함금액), 0) as 포함금액 ");
            stringBuilder.AppendLine("                             , isnull(sum(금액), 0) as 금액 ");
            stringBuilder.AppendLine("                             , isnull(sum((case when 과세구분 = '2' then 0 else 부가세액 end)), 0) as 부가세액");
            stringBuilder.AppendLine("                         from T_견적항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 견적일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 견적일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 견적일자, 견적번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.견적일자 = a.견적일자 and b.견적번호 = a.견적번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 견적일자, 견적번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_견적항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 견적일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 견적일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and 상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 견적일자, 견적번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.견적일자 = a.견적일자 and c.견적번호 = a.견적번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.견적일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.견적일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and isnull(c.해당품목수, 0) > 0 ");
            stringBuilder.AppendLine(" order by a.견적일자 desc, a.견적번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_견적_견적항목_List(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , '9pt' as 상품폰트 ");
            stringBuilder.AppendLine("     , '9pt' as 규격폰트 ");
            stringBuilder.AppendLine("     , b.항목순번  ");
            stringBuilder.AppendLine("     , b.상품코드  ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine("     , b.박스수량  ");
            stringBuilder.AppendLine("     , b.중간수량  ");
            stringBuilder.AppendLine("     , b.낱개수량  ");
            stringBuilder.AppendLine("     , b.총수량  ");
            if (Common.p_strBox == "3")
                stringBuilder.AppendLine("     , round(g.입수수량 * b.낱개단가, 0) as 박스단가 ");
            else
                stringBuilder.AppendLine("     , b.박스단가  ");
            stringBuilder.AppendLine("     , b.낱개단가  ");
            stringBuilder.AppendLine("     , b.금액  ");
            stringBuilder.AppendLine("     , (case when a.부가세코드 = '1' or a.부가세코드 = '2' then NULL else (case when b.과세구분 = '2' then NULL else b.부가세액 end) end) as 부가세액 ");
            stringBuilder.AppendLine("     , b.포함금액  ");
            stringBuilder.AppendLine("     , b.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , b.과세구분  ");
            stringBuilder.AppendLine("     , d.거래처구분  ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.대표자명    ");
            stringBuilder.AppendLine("     , d.주소        ");
            stringBuilder.AppendLine("     , d.상세주소    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.전화번호 ");
            stringBuilder.AppendLine("     , f.폰번호 ");
            stringBuilder.AppendLine("     , f.전화번호출력구분 ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , ff.개인사업자번호 as 대체사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(ff.개인사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(ff.개인사업자번호, 1, 3) + '-' + substring(ff.개인사업자번호, 4, 2) + '-' + substring(ff.개인사업자번호, 6, 5) end as 대체사업자번호2 ");
            stringBuilder.AppendLine("     , ff.대표자명 as 대체대표자 ");
            stringBuilder.AppendLine("     , ff.상호명 as 대체상호명 ");
            stringBuilder.AppendLine("     , ff.이메일 as 대체이메일 ");
            stringBuilder.AppendLine("     , ff.업태 as 대체업태 ");
            stringBuilder.AppendLine("     , ff.종목 as 대체종목 ");
            stringBuilder.AppendLine("     , ff.사업우편번호 as 대체우편번호 ");
            stringBuilder.AppendLine("     , ff.사업주소 + ' ' + ff.사업상세주소 as 대체주소 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 + ' / ' + f.사용자명 as 대체연락처 ");
            stringBuilder.AppendLine("     , ff.직인 as 대체직인 ");
            stringBuilder.AppendLine("     , '' as 대체직인파일 ");
            stringBuilder.AppendLine("     , ff.직인형식 as 대체직인형식 ");
            stringBuilder.AppendLine("     , ff.공지컴퓨터 as 대체공지컴퓨터 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , bb.품목수 ");
            stringBuilder.AppendLine("     , bb.포함금액계 as 포함금액계 ");
            stringBuilder.AppendLine("     , bb.포함금액계 - a.할인금액 as 견적금액 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(b.총수량, b.사업자번호, b.지점코드, b.상품코드) as 박스표시 ");
            stringBuilder.AppendLine("     , pc.사진    ");
            stringBuilder.AppendLine("     , 'image/' + case when isnull(pc.사진형식, '') = '' then 'png' else lower(pc.사진형식) end as 사진형식 ");
            stringBuilder.AppendLine("     , 0 as 표시순번 ");
            stringBuilder.AppendLine("     , '0' as 페이지그룹 ");
            stringBuilder.AppendLine("     , '1/1' as 표시페이지 ");
            stringBuilder.AppendLine(" from T_견적 a       ");
            stringBuilder.AppendLine("      inner join T_견적항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.견적일자 = a.견적일자 and b.견적번호 = a.견적번호 ");
            stringBuilder.AppendLine("      inner join T_상품정보 g on g.사업자번호 = b.사업자번호 and g.지점코드 = b.지점코드 and g.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("      left outer join ( select 사업자번호 ");
            stringBuilder.AppendLine("                             , 견적일자  ");
            stringBuilder.AppendLine("                             , 견적번호  ");
            stringBuilder.AppendLine("                             , count(*) as 품목수  ");
            stringBuilder.AppendLine("                             , sum(포함금액) as 포함금액계  ");
            stringBuilder.AppendLine("                         from T_견적항목  ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 견적일자 = @p_1 ");
            stringBuilder.AppendLine("                             and 견적번호 = @p_2 ");
            stringBuilder.AppendLine("                         group by 사업자번호, 견적일자, 견적번호 ");
            stringBuilder.AppendLine("         ) bb on bb.사업자번호 = a.사업자번호 and bb.견적일자 = a.견적일자 and bb.견적번호 = a.견적번호 ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 ff on ff.사업자번호 = d.사업자번호 and ff.지점코드 = d.지점코드 and ff.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("      left outer join T_상품별사진 pc on pc.사업자번호 = b.사업자번호 and pc.지점코드 = b.지점코드 and pc.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.견적일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.견적번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_견적_Detail(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , d.거래처구분  ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_견적 a       ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.견적일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.견적번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_견적항목_List(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(a.총수량, a.사업자번호, a.지점코드, a.상품코드) as 박스표시 ");
            stringBuilder.AppendLine("     , g.박스입고단가 ");
            stringBuilder.AppendLine("     , g.낱개입고단가 ");
            stringBuilder.AppendLine("     , c.최종매출일 ");
            stringBuilder.AppendLine(" from T_견적항목 a   ");
            stringBuilder.AppendLine("     inner join T_상품정보 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("     left outer join (select z.상품코드, max(z.매출일자) as 최종매출일 ");
            stringBuilder.AppendLine("                     from T_견적 x ");
            stringBuilder.AppendLine("                         left outer join T_매출단가표 z on z.사업자번호 = x.사업자번호 and z.지점코드 = x.지점코드 and z.거래처코드 = x.거래처코드 ");
            stringBuilder.AppendLine("                     where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                         and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                         and x.견적일자 = @p_1 ");
            stringBuilder.AppendLine("                         and x.견적번호 = @p_2 ");
            stringBuilder.AppendLine("                     group by z.상품코드 ");
            stringBuilder.AppendLine("         ) c on c.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.견적일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.견적번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매입_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , b.품목수      ");
            stringBuilder.AppendLine("     , b.포함금액    ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호 ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 주소 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_매입 a       ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            else
                stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매입일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum((case when b.매입구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_매입 a ");
            stringBuilder.AppendLine("                             inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.매입일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매입일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 매입일자, 전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_매입항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 매입일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and 상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 매입일자, 전표번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.매입일자 = a.매입일자 and c.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매입일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and isnull(c.해당품목수, 0) > 0 ");
            stringBuilder.AppendLine(" order by a.매입일자 desc, a.전표번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매입계_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          string sMan,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     sum(z.매입계) as 매입계 ");
            stringBuilder.AppendLine("     , sum(z.반품계) as 반품계 ");
            stringBuilder.AppendLine("     , sum(z.지급계) as 지급계 ");
            stringBuilder.AppendLine("     , sum(z.할인계) as 할인계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     sum(b.포함금액) as 매입계 ");
            stringBuilder.AppendLine("     , 0 as 반품계 ");
            stringBuilder.AppendLine("     , 0 as 지급계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine(" from T_매입 a       ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            else
                stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매입일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_매입 a ");
            stringBuilder.AppendLine("                             inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.매입일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and b.매입구분 in ('1', '2') ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매입일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 매입일자, 전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_매입항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 매입일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and 매입구분 in ('1', '2') ");
            stringBuilder.AppendLine("                             and 상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 매입일자, 전표번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.매입일자 = a.매입일자 and c.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매입일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and isnull(c.해당품목수, 0) > 0 ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     0 as 매입계 ");
            stringBuilder.AppendLine("     , sum(b.포함금액) as 반품계 ");
            stringBuilder.AppendLine("     , 0 as 지급계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine(" from T_매입 a       ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            else
                stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매입일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_매입 a ");
            stringBuilder.AppendLine("                             inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.매입일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and b.매입구분 in ('3', '4') ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매입일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 매입일자, 전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_매입항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 매입일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and 매입구분 in ('3', '4') ");
            stringBuilder.AppendLine("                             and 상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 매입일자, 전표번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.매입일자 = a.매입일자 and c.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매입일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and isnull(c.해당품목수, 0) > 0 ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     0 as 매입계 ");
            stringBuilder.AppendLine("     , 0 as 반품계 ");
            stringBuilder.AppendLine("     , sum(a.지급액) as 지급계 ");
            stringBuilder.AppendLine("     , sum(a.할인액) as 할인계 ");
            stringBuilder.AppendLine(" from T_지급 a       ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            else
                stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            }
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지급일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.지급일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(") z ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매입_Detail(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , isnull(mm.지급구분, '1') as 지급구분 ");
            stringBuilder.AppendLine("     , isnull(mm.지급액, 0) as 지급액 ");
            stringBuilder.AppendLine("     , isnull(mm.할인액, 0) as 할인액 ");
            stringBuilder.AppendLine("     , isnull(mm.합계금액, 0) as 지급합계 ");
            stringBuilder.AppendLine("     , isnull(mm.어음번호, '') as 어음번호 ");
            stringBuilder.AppendLine("     , isnull(mm.발행일자, '') as 발행일자 ");
            stringBuilder.AppendLine("     , isnull(mm.만기일자, '') as 만기일자 ");
            stringBuilder.AppendLine("     , isnull(mm.발행은행, '') as 발행은행 ");
            stringBuilder.AppendLine("     , isnull(mm.발행인, '') as 발행인 ");
            stringBuilder.AppendLine("     , isnull(mm.배서인, '') as 배서인 ");
            stringBuilder.AppendLine("     , isnull(mm.지급처, '') as 지급처 ");
            stringBuilder.AppendLine("     , isnull(mm.계좌순번, '') as 계좌순번 ");
            stringBuilder.AppendLine("     , d.거래처구분  ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_매입 a       ");
            stringBuilder.AppendLine("      left outer join T_지급 mm on mm.사업자번호 = a.사업자번호 and mm.지점코드 = a.지점코드 and mm.매입일자 = a.매입일자 and mm.매입전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.전표번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매입항목_List(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(a.총수량, a.사업자번호, a.지점코드, a.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" from T_매입항목 a   ");
            stringBuilder.AppendLine("      inner join T_상품정보 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.전표번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_지급_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sMan,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , substring(a.지급일자, 1, 7) as 지급년월 ");
            stringBuilder.AppendLine("     , c.명칭 as 지급구분명 ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_지급 a       ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            else
                stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join C_금전구분 c on c.코드 = a.지급구분 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지급일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.지급일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            }
            stringBuilder.AppendLine(" order by a.지급일자 desc, a.전표번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_지급_Detail(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , c.명칭 as 지급구분명 ");
            stringBuilder.AppendLine("     , d.거래처구분  ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_지급 a       ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join C_금전구분 c on c.코드 = a.지급구분 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지급일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.전표번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_발주_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , b.품목수      ");
            stringBuilder.AppendLine("     , (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else b.부가세액 end) as 부가세액 ");
            stringBuilder.AppendLine("     , b.포함금액 as 금액 ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_발주 a       ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            else
                stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 발주일자, 발주번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , isnull(sum(포함금액), 0) as 포함금액 ");
            stringBuilder.AppendLine("                             , isnull(sum(금액), 0) as 금액 ");
            stringBuilder.AppendLine("                             , isnull(sum((case when 과세구분 = '2' then 0 else 부가세액 end)), 0) as 부가세액");
            stringBuilder.AppendLine("                         from T_발주항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 발주일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 발주일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 발주일자, 발주번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.발주일자 = a.발주일자 and b.발주번호 = a.발주번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 발주일자, 발주번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_발주항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 발주일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 발주일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and 상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 발주일자, 발주번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.발주일자 = a.발주일자 and c.발주번호 = a.발주번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.발주일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.발주일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and isnull(c.해당품목수, 0) > 0 ");
            stringBuilder.AppendLine(" order by a.발주일자 desc, a.발주번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_발주_발주항목_List(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , '9pt' as 상품폰트 ");
            stringBuilder.AppendLine("     , '9pt' as 규격폰트 ");
            stringBuilder.AppendLine("     , b.항목순번  ");
            stringBuilder.AppendLine("     , b.상품코드  ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine("     , b.박스수량  ");
            stringBuilder.AppendLine("     , b.중간수량  ");
            stringBuilder.AppendLine("     , b.낱개수량  ");
            stringBuilder.AppendLine("     , b.총수량  ");
            if (Common.p_strBox == "3")
                stringBuilder.AppendLine("     , round(g.입수수량 * b.낱개단가, 0) as 박스단가 ");
            else
                stringBuilder.AppendLine("     , b.박스단가  ");
            stringBuilder.AppendLine("     , b.낱개단가  ");
            stringBuilder.AppendLine("     , b.금액  ");
            stringBuilder.AppendLine("     , (case when a.부가세코드 = '1' or a.부가세코드 = '2' then NULL else (case when b.과세구분 = '2' then NULL else b.부가세액 end) end) as 부가세액 ");
            stringBuilder.AppendLine("     , b.포함금액  ");
            stringBuilder.AppendLine("     , b.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , b.과세구분  ");
            stringBuilder.AppendLine("     , d.거래처구분  ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.대표자명    ");
            stringBuilder.AppendLine("     , d.주소        ");
            stringBuilder.AppendLine("     , d.상세주소    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.전화번호 ");
            stringBuilder.AppendLine("     , f.폰번호 ");
            stringBuilder.AppendLine("     , f.전화번호출력구분 ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , ff.개인사업자번호 as 대체사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(ff.개인사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(ff.개인사업자번호, 1, 3) + '-' + substring(ff.개인사업자번호, 4, 2) + '-' + substring(ff.개인사업자번호, 6, 5) end as 대체사업자번호2 ");
            stringBuilder.AppendLine("     , ff.대표자명 as 대체대표자 ");
            stringBuilder.AppendLine("     , ff.상호명 as 대체상호명 ");
            stringBuilder.AppendLine("     , ff.이메일 as 대체이메일 ");
            stringBuilder.AppendLine("     , ff.업태 as 대체업태 ");
            stringBuilder.AppendLine("     , ff.종목 as 대체종목 ");
            stringBuilder.AppendLine("     , ff.사업우편번호 as 대체우편번호 ");
            stringBuilder.AppendLine("     , ff.사업주소 + ' ' + ff.사업상세주소 as 대체주소 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 + ' / ' + f.사용자명 as 대체연락처 ");
            stringBuilder.AppendLine("     , ff.직인 as 대체직인 ");
            stringBuilder.AppendLine("     , '' as 대체직인파일 ");
            stringBuilder.AppendLine("     , ff.직인형식 as 대체직인형식 ");
            stringBuilder.AppendLine("     , ff.공지컴퓨터 as 대체공지컴퓨터 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , bb.품목수 ");
            stringBuilder.AppendLine("     , bb.포함금액계 as 포함금액계 ");
            stringBuilder.AppendLine("     , bb.포함금액계 as 발주금액 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(b.총수량, b.사업자번호, b.지점코드, b.상품코드) as 박스표시 ");
            stringBuilder.AppendLine("     , 0 as 표시순번 ");
            stringBuilder.AppendLine("     , '0' as 페이지그룹 ");
            stringBuilder.AppendLine("     , '1/1' as 표시페이지 ");
            stringBuilder.AppendLine(" from T_발주 a       ");
            stringBuilder.AppendLine("      inner join T_발주항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.발주일자 = a.발주일자 and b.발주번호 = a.발주번호 ");
            stringBuilder.AppendLine("      inner join T_상품정보 g on g.사업자번호 = b.사업자번호 and g.지점코드 = b.지점코드 and g.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("      left outer join ( select 사업자번호 ");
            stringBuilder.AppendLine("                             , 발주일자  ");
            stringBuilder.AppendLine("                             , 발주번호  ");
            stringBuilder.AppendLine("                             , count(*) as 품목수  ");
            stringBuilder.AppendLine("                             , sum(포함금액) as 포함금액계  ");
            stringBuilder.AppendLine("                         from T_발주항목  ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 발주일자 = @p_1 ");
            stringBuilder.AppendLine("                             and 발주번호 = @p_2 ");
            stringBuilder.AppendLine("                         group by 사업자번호, 발주일자, 발주번호 ");
            stringBuilder.AppendLine("         ) bb on bb.사업자번호 = a.사업자번호 and bb.발주일자 = a.발주일자 and bb.발주번호 = a.발주번호 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 ff on ff.사업자번호 = d.사업자번호 and ff.지점코드 = d.지점코드 and ff.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.발주일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.발주번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_발주_Detail(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , d.거래처구분  ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , tax.명칭 as 부가세코드명 ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_발주 a       ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("      left outer join C_부가세코드 tax on tax.코드 = a.부가세코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.발주일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.발주번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_발주항목_List(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(a.총수량, a.사업자번호, a.지점코드, a.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" from T_발주항목 a   ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.발주일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.발주번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_지출_List(
          string sDay1,
          string sDay2,
          string sMan,
          string sAcct,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , b.품목수      ");
            stringBuilder.AppendLine("     , b.금액    ");
            stringBuilder.AppendLine(" from T_지출 a       ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = a.사업자번호 and f.지점코드 = a.지점코드 and f.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 지출일자, 전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , isnull(sum(금액), 0) as 금액 ");
            stringBuilder.AppendLine("                         from T_지출항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 지출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 지출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 지출일자, 전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.지출일자 = a.지출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 지출일자, 전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_지출항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 지출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 지출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and 계정코드 = '" + sAcct + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 지출일자, 전표번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.지출일자 = a.지출일자 and c.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.지출일자 <= '" + sDay2 + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and a.사원번호 = '" + sMan + "' ");
            if (sAcct != "")
                stringBuilder.AppendLine("     and isnull(c.해당품목수, 0) > 0 ");
            stringBuilder.AppendLine(" order by a.지출일자 desc, a.전표번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_지출_Detail(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_지출 a       ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = a.사업자번호 and f.지점코드 = a.지점코드 and f.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지출일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.전표번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_지출항목_List(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , g.명칭 as 계정명 ");
            stringBuilder.AppendLine("     , h.명칭 as 지출구분명 ");
            stringBuilder.AppendLine(" from T_지출항목 a   ");
            stringBuilder.AppendLine("      left outer join P_계정 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.코드 = a.계정코드 ");
            stringBuilder.AppendLine("      left outer join C_지출구분 h on h.코드 = a.지출구분 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지출일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.전표번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_지출_지출항목_Condition(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , b.항목순번    ");
            stringBuilder.AppendLine("     , b.계정코드    ");
            stringBuilder.AppendLine("     , b.지출구분    ");
            stringBuilder.AppendLine("     , b.적요        ");
            stringBuilder.AppendLine("     , b.금액        ");
            stringBuilder.AppendLine("     , g.명칭 as 계정명 ");
            stringBuilder.AppendLine("     , h.명칭 as 지출구분명 ");
            stringBuilder.AppendLine(" from T_지출 a       ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = a.사업자번호 and f.지점코드 = a.지점코드 and f.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine("      inner join T_지출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.지출일자 = a.지출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join P_계정 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.코드 = b.계정코드 ");
            stringBuilder.AppendLine("      left outer join C_지출구분 h on h.코드 = b.지출구분 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.지출일자 asc, a.전표번호 asc, b.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_장비_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine(" from T_장비정보 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.장비코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_장비_Detail(string p1, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine(" from T_장비정보 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.장비코드 = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_장비대여_List(
          string sDay1,
          string sDay2,
          string sMan,
          string sCust,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , m.장비명      ");
            stringBuilder.AppendLine("     , m.규격        ");
            stringBuilder.AppendLine("     , p.회수일자    ");
            stringBuilder.AppendLine(" from T_장비대여 a   ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_장비정보 m on m.사업자번호 = a.사업자번호 and m.지점코드 = a.지점코드 and m.장비코드 = a.장비코드 ");
            stringBuilder.AppendLine("      left outer join T_장비회수 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.출고일자 = a.출고일자 and p.출고번호 = a.출고번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.출고일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.출고일자 <= '" + sDay2 + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.출고일자 desc, a.출고번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_장비대여_Detail(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , m.장비명      ");
            stringBuilder.AppendLine("     , m.규격        ");
            stringBuilder.AppendLine("     , p.회수일자    ");
            stringBuilder.AppendLine(" from T_장비대여 a   ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_장비정보 m on m.사업자번호 = a.사업자번호 and m.지점코드 = a.지점코드 and m.장비코드 = a.장비코드 ");
            stringBuilder.AppendLine("      left outer join T_장비회수 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.출고일자 = a.출고일자 and p.출고번호 = a.출고번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.출고일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.출고번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_장비대여회수_List(
          string sDay1,
          string sDay2,
          string sMan,
          string sCust,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select z.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     a.출고일자 as 일자 ");
            stringBuilder.AppendLine("     , 0  as SortGubun ");
            stringBuilder.AppendLine("     , a.출고번호 as 번호 ");
            stringBuilder.AppendLine("     , '출고' as 구분 ");
            stringBuilder.AppendLine("     , m.장비명      ");
            stringBuilder.AppendLine("     , m.규격        ");
            stringBuilder.AppendLine("     , a.수량        ");
            stringBuilder.AppendLine("     , p.회수일자    ");
            stringBuilder.AppendLine("     , a.출고일자 as KEY일자 ");
            stringBuilder.AppendLine("     , a.출고번호 as KEY번호 ");
            stringBuilder.AppendLine(" from T_장비대여 a   ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_장비정보 m on m.사업자번호 = a.사업자번호 and m.지점코드 = a.지점코드 and m.장비코드 = a.장비코드 ");
            stringBuilder.AppendLine("      left outer join T_장비회수 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.출고일자 = a.출고일자 and p.출고번호 = a.출고번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.출고일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.출고일자 <= '" + sDay2 + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     b.회수일자 as 일자 ");
            stringBuilder.AppendLine("     , 1  as SortGubun ");
            stringBuilder.AppendLine("     , b.회수번호  as 번호 ");
            stringBuilder.AppendLine("     , '회수' as 구분 ");
            stringBuilder.AppendLine("     , m.장비명      ");
            stringBuilder.AppendLine("     , m.규격        ");
            stringBuilder.AppendLine("     , a.수량        ");
            stringBuilder.AppendLine("     , '' as 회수일자 ");
            stringBuilder.AppendLine("     , '' as KEY일자 ");
            stringBuilder.AppendLine("     , '' as KEY번호 ");
            stringBuilder.AppendLine(" from T_장비회수 b   ");
            stringBuilder.AppendLine("      left outer join T_장비대여 a on a.사업자번호 = b.사업자번호 and a.지점코드 = b.지점코드 and a.출고일자 = b.출고일자 and a.출고번호 = b.출고번호 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_장비정보 m on m.사업자번호 = a.사업자번호 and m.지점코드 = a.지점코드 and m.장비코드 = a.장비코드 ");
            stringBuilder.AppendLine(" where b.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and b.회수일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and b.회수일자 <= '" + sDay2 + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" order by z.일자 asc, z.SortGubun asc, z.번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_장비회수_List(
          string sDay1,
          string sDay2,
          string sMan,
          string sCust,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select b.회수일자    ");
            stringBuilder.AppendLine("     , b.회수번호    ");
            stringBuilder.AppendLine("     , b.비고 as 회수비고 ");
            stringBuilder.AppendLine("     , a.*           ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , m.장비명      ");
            stringBuilder.AppendLine("     , m.규격        ");
            stringBuilder.AppendLine(" from T_장비회수 b   ");
            stringBuilder.AppendLine("      left outer join T_장비대여 a on a.사업자번호 = b.사업자번호 and a.지점코드 = b.지점코드 and a.출고일자 = b.출고일자 and a.출고번호 = b.출고번호 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_장비정보 m on m.사업자번호 = a.사업자번호 and m.지점코드 = a.지점코드 and m.장비코드 = a.장비코드 ");
            stringBuilder.AppendLine(" where b.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and b.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and b.회수일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and b.회수일자 <= '" + sDay2 + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by b.회수일자 desc, b.회수번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_장비회수_Detail(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select b.회수일자    ");
            stringBuilder.AppendLine("     , b.회수번호    ");
            stringBuilder.AppendLine("     , b.비고 as 회수비고 ");
            stringBuilder.AppendLine("     , a.*           ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , m.장비명      ");
            stringBuilder.AppendLine("     , m.규격        ");
            stringBuilder.AppendLine(" from T_장비회수 b   ");
            stringBuilder.AppendLine("      left outer join T_장비대여 a on a.사업자번호 = b.사업자번호 and a.지점코드 = b.지점코드 and a.출고일자 = b.출고일자 and a.출고번호 = b.출고번호 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_장비정보 m on m.사업자번호 = a.사업자번호 and m.지점코드 = a.지점코드 and m.장비코드 = a.장비코드 ");
            stringBuilder.AppendLine(" where b.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and b.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and b.회수일자 = @p_1 ");
            stringBuilder.AppendLine("     and b.회수번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출처원장_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sType,
          bool b행사보이기,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_매출원장목록_거래처별(sDay1, sDay2, sCust, sType, strAllFlag));
            stringBuilder.AppendLine(" select s.* ");
            stringBuilder.AppendLine(" into #원장 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #매출 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #수금 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #매입 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #지급 ");
            stringBuilder.AppendLine(" ) s ");
            stringBuilder.AppendLine(" select z.* ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , z.박스수량 as 표시총수량 ");
                stringBuilder.AppendLine("     , z.박스단가 as 표시단가 ");
                stringBuilder.AppendLine("     , z.서비스박스 as 표시서비스 ");
            }
            else
            {
                stringBuilder.AppendLine("     , z.총수량 as 표시총수량 ");
                stringBuilder.AppendLine("     , z.낱개단가 as 표시단가 ");
                stringBuilder.AppendLine("     , z.서비스낱개 as 표시서비스 ");
            }
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select '0000-00-00' as 일자 ");
            stringBuilder.AppendLine("     , '== 전잔고 ==' as 일자명칭 ");
            stringBuilder.AppendLine("     , 0 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , 0 as 금액 ");
            stringBuilder.AppendLine("     , 0 as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 행사금액 ");
            stringBuilder.AppendLine("     , 0 as 행사부가세액 ");
            stringBuilder.AppendLine("     , 0 as 수금액 ");
            stringBuilder.AppendLine("     , 0 as 할인액 ");
            stringBuilder.AppendLine("     , convert(float, 0) as 잔고 ");
            stringBuilder.AppendLine("     , 0 as 서비스박스 ");
            stringBuilder.AppendLine("     , 0 as 서비스낱개 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , '' as 비고 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , a.일자명칭 ");
            stringBuilder.AppendLine("     , a.정렬구분 ");
            stringBuilder.AppendLine("     , a.전표분류 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.상품명  ");
            stringBuilder.AppendLine("     , a.규격    ");
            stringBuilder.AppendLine("     , a.박스수량 ");
            stringBuilder.AppendLine("     , a.중간수량 ");
            stringBuilder.AppendLine("     , a.낱개수량 ");
            stringBuilder.AppendLine("     , a.총수량 ");
            stringBuilder.AppendLine("     , a.박스단가 ");
            stringBuilder.AppendLine("     , a.낱개단가 ");
            stringBuilder.AppendLine("     , a.금액 ");
            stringBuilder.AppendLine("     , a.부가세액 ");
            stringBuilder.AppendLine("     , a.행사금액 ");
            stringBuilder.AppendLine("     , a.행사부가세액 ");
            stringBuilder.AppendLine("     , a.수금액 ");
            stringBuilder.AppendLine("     , a.할인액 ");
            stringBuilder.AppendLine("     , a.잔고 ");
            stringBuilder.AppendLine("     , a.서비스박스 ");
            stringBuilder.AppendLine("     , a.서비스낱개 ");
            stringBuilder.AppendLine("     , a.구분 ");
            stringBuilder.AppendLine("     , a.구분명칭 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine("     , a.상품비고 ");
            stringBuilder.AppendLine("     , a.만기일자 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , '--- 일계 ---' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.박스수량) as 박스수량 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.중간수량) as 중간수량 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.낱개수량) as 낱개수량 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.총수량) as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사금액) as 행사금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사부가세액) as 행사부가세액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액) as 수금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액) as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스박스) as 서비스박스 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스낱개) as 서비스낱개 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , '' as 비고 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" group by a.일자 ");
            if (b행사보이기)
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select a.일자 ");
                stringBuilder.AppendLine("     , '(정상일계)' as 일자명칭 ");
                stringBuilder.AppendLine("     , 9 as 정렬구분 ");
                stringBuilder.AppendLine("     , '' as 전표분류 ");
                stringBuilder.AppendLine("     , '999999' as 전표번호 ");
                stringBuilder.AppendLine("     , '' as 상품명  ");
                stringBuilder.AppendLine("     , '' as 규격    ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.박스수량) as 박스수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.중간수량) as 중간수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.낱개수량) as 낱개수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.총수량) as 총수량 ");
                stringBuilder.AppendLine("     , 0 as 박스단가 ");
                stringBuilder.AppendLine("     , 0 as 낱개단가 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액) as 금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액) as 부가세액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사금액) as 행사금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사부가세액) as 행사부가세액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액) as 수금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액) as 할인액 ");
                stringBuilder.AppendLine("     , 0 as 잔고 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스박스) as 서비스박스 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스낱개) as 서비스낱개 ");
                stringBuilder.AppendLine("     , '' as 구분 ");
                stringBuilder.AppendLine("     , '' as 구분명칭 ");
                stringBuilder.AppendLine("     , '' as 비고 ");
                stringBuilder.AppendLine("     , '' as 상품비고 ");
                stringBuilder.AppendLine("     , '' as 만기일자 ");
                stringBuilder.AppendLine("     , NULL as 등록일시 ");
                stringBuilder.AppendLine(" from #원장 a ");
                stringBuilder.AppendLine(" where a.구분 = '1' ");
                stringBuilder.AppendLine(" group by a.일자 ");
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select a.일자 ");
                stringBuilder.AppendLine("     , '(행사일계)' as 일자명칭 ");
                stringBuilder.AppendLine("     , 9 as 정렬구분 ");
                stringBuilder.AppendLine("     , '' as 전표분류 ");
                stringBuilder.AppendLine("     , '999999' as 전표번호 ");
                stringBuilder.AppendLine("     , '' as 상품명  ");
                stringBuilder.AppendLine("     , '' as 규격    ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.박스수량) as 박스수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.중간수량) as 중간수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.낱개수량) as 낱개수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.총수량) as 총수량 ");
                stringBuilder.AppendLine("     , 0 as 박스단가 ");
                stringBuilder.AppendLine("     , 0 as 낱개단가 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액) as 금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액) as 부가세액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사금액) as 행사금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사부가세액) as 행사부가세액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액) as 수금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액) as 할인액 ");
                stringBuilder.AppendLine("     , 0 as 잔고 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스박스) as 서비스박스 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스낱개) as 서비스낱개 ");
                stringBuilder.AppendLine("     , '' as 구분 ");
                stringBuilder.AppendLine("     , '' as 구분명칭 ");
                stringBuilder.AppendLine("     , '' as 비고 ");
                stringBuilder.AppendLine("     , '' as 상품비고 ");
                stringBuilder.AppendLine("     , '' as 만기일자 ");
                stringBuilder.AppendLine("     , NULL as 등록일시 ");
                stringBuilder.AppendLine(" from #원장 a ");
                stringBuilder.AppendLine(" where a.구분 = '2' ");
                stringBuilder.AppendLine(" group by a.일자 ");
            }
            if (sType != "")
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select a.일자 ");
                stringBuilder.AppendLine("     , '(유형일계)' as 일자명칭 ");
                stringBuilder.AppendLine("     , 9 as 정렬구분 ");
                stringBuilder.AppendLine("     , '' as 전표분류 ");
                stringBuilder.AppendLine("     , '999999' as 전표번호 ");
                stringBuilder.AppendLine("     , '' as 상품명  ");
                stringBuilder.AppendLine("     , '' as 규격    ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.박스수량) as 박스수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.중간수량) as 중간수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.낱개수량) as 낱개수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.총수량) as 총수량 ");
                stringBuilder.AppendLine("     , 0 as 박스단가 ");
                stringBuilder.AppendLine("     , 0 as 낱개단가 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액) as 금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액) as 부가세액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사금액) as 행사금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사부가세액) as 행사부가세액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액) as 수금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액) as 할인액 ");
                stringBuilder.AppendLine("     , 0 as 잔고 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스박스) as 서비스박스 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스낱개) as 서비스낱개 ");
                stringBuilder.AppendLine("     , '' as 구분 ");
                stringBuilder.AppendLine("     , '' as 구분명칭 ");
                stringBuilder.AppendLine("     , '' as 비고 ");
                stringBuilder.AppendLine("     , '' as 상품비고 ");
                stringBuilder.AppendLine("     , '' as 만기일자 ");
                stringBuilder.AppendLine("     , NULL as 등록일시 ");
                stringBuilder.AppendLine(" from #원장 a ");
                stringBuilder.AppendLine(" where a.상품유형코드 = '" + sType + "' ");
                stringBuilder.AppendLine(" group by a.일자 ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select SUBSTRING(a.일자, 1, 7) + '-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 월계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.박스수량) as 박스수량 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.중간수량) as 중간수량 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.낱개수량) as 낱개수량 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.총수량) as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사금액) as 행사금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사부가세액) as 행사부가세액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액) as 수금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액) as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스박스) as 서비스박스 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스낱개) as 서비스낱개 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , '' as 비고 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" group by SUBSTRING(a.일자, 1, 7) ");
            if (b행사보이기)
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select SUBSTRING(a.일자, 1, 7) + '-99' as 일자 ");
                stringBuilder.AppendLine("     , '(정상월계)' as 일자명칭 ");
                stringBuilder.AppendLine("     , 9 as 정렬구분 ");
                stringBuilder.AppendLine("     , '' as 전표분류 ");
                stringBuilder.AppendLine("     , '999999' as 전표번호 ");
                stringBuilder.AppendLine("     , '' as 상품명  ");
                stringBuilder.AppendLine("     , '' as 규격    ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.박스수량) as 박스수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.중간수량) as 중간수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.낱개수량) as 낱개수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.총수량) as 총수량 ");
                stringBuilder.AppendLine("     , 0 as 박스단가 ");
                stringBuilder.AppendLine("     , 0 as 낱개단가 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액) as 금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액) as 부가세액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사금액) as 행사금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사부가세액) as 행사부가세액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액) as 수금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액) as 할인액 ");
                stringBuilder.AppendLine("     , 0 as 잔고 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스박스) as 서비스박스 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스낱개) as 서비스낱개 ");
                stringBuilder.AppendLine("     , '' as 구분 ");
                stringBuilder.AppendLine("     , '' as 구분명칭 ");
                stringBuilder.AppendLine("     , '' as 비고 ");
                stringBuilder.AppendLine("     , '' as 상품비고 ");
                stringBuilder.AppendLine("     , '' as 만기일자 ");
                stringBuilder.AppendLine("     , NULL as 등록일시 ");
                stringBuilder.AppendLine(" from #원장 a ");
                stringBuilder.AppendLine(" where a.구분 = '1' ");
                stringBuilder.AppendLine(" group by SUBSTRING(a.일자, 1, 7) ");
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select SUBSTRING(a.일자, 1, 7) + '-99' as 일자 ");
                stringBuilder.AppendLine("     , '(행사월계)' as 일자명칭 ");
                stringBuilder.AppendLine("     , 9 as 정렬구분 ");
                stringBuilder.AppendLine("     , '' as 전표분류 ");
                stringBuilder.AppendLine("     , '999999' as 전표번호 ");
                stringBuilder.AppendLine("     , '' as 상품명  ");
                stringBuilder.AppendLine("     , '' as 규격    ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.박스수량) as 박스수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.중간수량) as 중간수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.낱개수량) as 낱개수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.총수량) as 총수량 ");
                stringBuilder.AppendLine("     , 0 as 박스단가 ");
                stringBuilder.AppendLine("     , 0 as 낱개단가 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액) as 금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액) as 부가세액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사금액) as 행사금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사부가세액) as 행사부가세액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액) as 수금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액) as 할인액 ");
                stringBuilder.AppendLine("     , 0 as 잔고 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스박스) as 서비스박스 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스낱개) as 서비스낱개 ");
                stringBuilder.AppendLine("     , '' as 구분 ");
                stringBuilder.AppendLine("     , '' as 구분명칭 ");
                stringBuilder.AppendLine("     , '' as 비고 ");
                stringBuilder.AppendLine("     , '' as 상품비고 ");
                stringBuilder.AppendLine("     , '' as 만기일자 ");
                stringBuilder.AppendLine("     , NULL as 등록일시 ");
                stringBuilder.AppendLine(" from #원장 a ");
                stringBuilder.AppendLine(" where a.구분 = '2' ");
                stringBuilder.AppendLine(" group by SUBSTRING(a.일자, 1, 7) ");
            }
            if (sType != "")
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select SUBSTRING(a.일자, 1, 7) + '-99' as 일자 ");
                stringBuilder.AppendLine("     , '(유형월계)' as 일자명칭 ");
                stringBuilder.AppendLine("     , 9 as 정렬구분 ");
                stringBuilder.AppendLine("     , '' as 전표분류 ");
                stringBuilder.AppendLine("     , '999999' as 전표번호 ");
                stringBuilder.AppendLine("     , '' as 상품명  ");
                stringBuilder.AppendLine("     , '' as 규격    ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.박스수량) as 박스수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.중간수량) as 중간수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.낱개수량) as 낱개수량 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.총수량) as 총수량 ");
                stringBuilder.AppendLine("     , 0 as 박스단가 ");
                stringBuilder.AppendLine("     , 0 as 낱개단가 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액) as 금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액) as 부가세액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사금액) as 행사금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사부가세액) as 행사부가세액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액) as 수금액 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액) as 할인액 ");
                stringBuilder.AppendLine("     , 0 as 잔고 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스박스) as 서비스박스 ");
                stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스낱개) as 서비스낱개 ");
                stringBuilder.AppendLine("     , '' as 구분 ");
                stringBuilder.AppendLine("     , '' as 구분명칭 ");
                stringBuilder.AppendLine("     , '' as 비고 ");
                stringBuilder.AppendLine("     , '' as 상품비고 ");
                stringBuilder.AppendLine("     , '' as 만기일자 ");
                stringBuilder.AppendLine("     , NULL as 등록일시 ");
                stringBuilder.AppendLine(" from #원장 a ");
                stringBuilder.AppendLine(" where a.상품유형코드 = '" + sType + "' ");
                stringBuilder.AppendLine(" group by SUBSTRING(a.일자, 1, 7) ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액), 0) as 부가세액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사금액), 0) as 행사금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사부가세액), 0) as 행사부가세액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액), 0) as 수금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액), 0) as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스박스), 0) as 서비스박스 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스낱개), 0) as 서비스낱개 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , '' as 비고 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            if (b행사보이기)
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
                stringBuilder.AppendLine("     , '(정상합계)' as 일자명칭 ");
                stringBuilder.AppendLine("     , 9 as 정렬구분 ");
                stringBuilder.AppendLine("     , '' as 전표분류 ");
                stringBuilder.AppendLine("     , '999999' as 전표번호 ");
                stringBuilder.AppendLine("     , '' as 상품명  ");
                stringBuilder.AppendLine("     , '' as 규격    ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine("     , 0 as 박스단가 ");
                stringBuilder.AppendLine("     , 0 as 낱개단가 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액), 0) as 금액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액), 0) as 부가세액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사금액), 0) as 행사금액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사부가세액), 0) as 행사부가세액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액), 0) as 수금액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액), 0) as 할인액 ");
                stringBuilder.AppendLine("     , 0 as 잔고 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스박스), 0) as 서비스박스 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스낱개), 0) as 서비스낱개 ");
                stringBuilder.AppendLine("     , '' as 구분 ");
                stringBuilder.AppendLine("     , '' as 구분명칭 ");
                stringBuilder.AppendLine("     , '' as 비고 ");
                stringBuilder.AppendLine("     , '' as 상품비고 ");
                stringBuilder.AppendLine("     , '' as 만기일자 ");
                stringBuilder.AppendLine("     , NULL as 등록일시 ");
                stringBuilder.AppendLine(" from #원장 a ");
                stringBuilder.AppendLine(" where a.구분 = '1' ");
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
                stringBuilder.AppendLine("     , '(행사합계)' as 일자명칭 ");
                stringBuilder.AppendLine("     , 9 as 정렬구분 ");
                stringBuilder.AppendLine("     , '' as 전표분류 ");
                stringBuilder.AppendLine("     , '999999' as 전표번호 ");
                stringBuilder.AppendLine("     , '' as 상품명  ");
                stringBuilder.AppendLine("     , '' as 규격    ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine("     , 0 as 박스단가 ");
                stringBuilder.AppendLine("     , 0 as 낱개단가 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액), 0) as 금액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액), 0) as 부가세액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사금액), 0) as 행사금액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사부가세액), 0) as 행사부가세액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액), 0) as 수금액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액), 0) as 할인액 ");
                stringBuilder.AppendLine("     , 0 as 잔고 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스박스), 0) as 서비스박스 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스낱개), 0) as 서비스낱개 ");
                stringBuilder.AppendLine("     , '' as 구분 ");
                stringBuilder.AppendLine("     , '' as 구분명칭 ");
                stringBuilder.AppendLine("     , '' as 비고 ");
                stringBuilder.AppendLine("     , '' as 상품비고 ");
                stringBuilder.AppendLine("     , '' as 만기일자 ");
                stringBuilder.AppendLine("     , NULL as 등록일시 ");
                stringBuilder.AppendLine(" from #원장 a ");
                stringBuilder.AppendLine(" where a.구분 = '2' ");
            }
            if (sType != "")
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
                stringBuilder.AppendLine("     , '(유형합계)' as 일자명칭 ");
                stringBuilder.AppendLine("     , 9 as 정렬구분 ");
                stringBuilder.AppendLine("     , '' as 전표분류 ");
                stringBuilder.AppendLine("     , '999999' as 전표번호 ");
                stringBuilder.AppendLine("     , '' as 상품명  ");
                stringBuilder.AppendLine("     , '' as 규격    ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine("     , 0 as 박스단가 ");
                stringBuilder.AppendLine("     , 0 as 낱개단가 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액), 0) as 금액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액), 0) as 부가세액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사금액), 0) as 행사금액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사부가세액), 0) as 행사부가세액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액), 0) as 수금액 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액), 0) as 할인액 ");
                stringBuilder.AppendLine("     , 0 as 잔고 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스박스), 0) as 서비스박스 ");
                stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스낱개), 0) as 서비스낱개 ");
                stringBuilder.AppendLine("     , '' as 구분 ");
                stringBuilder.AppendLine("     , '' as 구분명칭 ");
                stringBuilder.AppendLine("     , '' as 비고 ");
                stringBuilder.AppendLine("     , '' as 상품비고 ");
                stringBuilder.AppendLine("     , '' as 만기일자 ");
                stringBuilder.AppendLine("     , NULL as 등록일시 ");
                stringBuilder.AppendLine(" from #원장 a ");
                stringBuilder.AppendLine(" where a.상품유형코드 = '" + sType + "' ");
            }
            stringBuilder.AppendLine(" ) z order by z.일자 asc, z.정렬구분 asc, z.등록일시 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출처원장_청구서(
          string sDay1,
          string sDay2,
          string sCust,
          string sType,
          bool b행사보이기,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_매출원장목록_거래처별(sDay1, sDay2, sCust, sType, strAllFlag));
            stringBuilder.AppendLine(" select s.* ");
            stringBuilder.AppendLine(" into #원장 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #매출 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #수금 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #매입 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #지급 ");
            stringBuilder.AppendLine(" ) s ");
            stringBuilder.AppendLine(" select z.일자, z.일자명칭, z.정렬구분, z.전표분류, z.전표번호, z.등록일시 ");
            stringBuilder.AppendLine("     , max(z.첫상품명) as 상품명 ");
            stringBuilder.AppendLine("     , count(z.상품명) - 1 as 외수량 ");
            stringBuilder.AppendLine("     , sum(z.금액) as 금액계 ");
            stringBuilder.AppendLine("     , sum(z.부가세액) as 부가세액계 ");
            stringBuilder.AppendLine("     , sum(z.수금액) as 수금액계 ");
            stringBuilder.AppendLine("     , sum(z.할인액) as 할인액계 ");
            stringBuilder.AppendLine("     , sum(z.잔고) as 잔고계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select '0000-00-00' as 일자 ");
            stringBuilder.AppendLine("     , '== 전잔고 ==' as 일자명칭 ");
            stringBuilder.AppendLine("     , 0 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 첫상품명  ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , 0 as 금액 ");
            stringBuilder.AppendLine("     , 0 as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 행사금액 ");
            stringBuilder.AppendLine("     , 0 as 행사부가세액 ");
            stringBuilder.AppendLine("     , 0 as 수금액 ");
            stringBuilder.AppendLine("     , 0 as 할인액 ");
            stringBuilder.AppendLine("     , convert(float, 0) as 잔고 ");
            stringBuilder.AppendLine("     , 0 as 서비스박스 ");
            stringBuilder.AppendLine("     , 0 as 서비스낱개 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , '' as 비고 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , a.일자명칭 ");
            stringBuilder.AppendLine("     , a.정렬구분 ");
            stringBuilder.AppendLine("     , a.전표분류 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.첫상품명  ");
            stringBuilder.AppendLine("     , a.상품명  ");
            stringBuilder.AppendLine("     , a.규격    ");
            stringBuilder.AppendLine("     , a.박스수량 ");
            stringBuilder.AppendLine("     , a.중간수량 ");
            stringBuilder.AppendLine("     , a.낱개수량 ");
            stringBuilder.AppendLine("     , a.총수량 ");
            stringBuilder.AppendLine("     , a.박스단가 ");
            stringBuilder.AppendLine("     , a.낱개단가 ");
            stringBuilder.AppendLine("     , a.금액 ");
            stringBuilder.AppendLine("     , a.부가세액 ");
            stringBuilder.AppendLine("     , a.행사금액 ");
            stringBuilder.AppendLine("     , a.행사부가세액 ");
            stringBuilder.AppendLine("     , a.수금액 ");
            stringBuilder.AppendLine("     , a.할인액 ");
            stringBuilder.AppendLine("     , a.잔고 ");
            stringBuilder.AppendLine("     , a.서비스박스 ");
            stringBuilder.AppendLine("     , a.서비스낱개 ");
            stringBuilder.AppendLine("     , a.구분 ");
            stringBuilder.AppendLine("     , a.구분명칭 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine("     , a.상품비고 ");
            stringBuilder.AppendLine("     , a.만기일자 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 첫상품명  ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액), 0) as 부가세액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사금액), 0) as 행사금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.행사부가세액), 0) as 행사부가세액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액), 0) as 수금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액), 0) as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스박스), 0) as 서비스박스 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.서비스낱개), 0) as 서비스낱개 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , '' as 비고 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" ) z group by z.일자, z.일자명칭, z.정렬구분, z.전표분류, z.전표번호, z.등록일시 ");
            stringBuilder.AppendLine(" order by z.일자 asc, z.정렬구분 asc, z.등록일시 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출처원장_간략_List(
          string sDay1,
          string sDay2,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_매출원장목록_거래처별(sDay1, sDay2, sCust, "", strAllFlag));
            stringBuilder.AppendLine(" select s.* ");
            stringBuilder.AppendLine(" into #원장 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #매출 where 정렬구분 in ('1', '2') ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #수금 where 정렬구분 in ('1', '2') ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #매입 where 정렬구분 in ('1', '2') ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #지급 where 정렬구분 in ('1', '2') ");
            stringBuilder.AppendLine(" ) s ");
            stringBuilder.AppendLine(" select z.* from ( ");
            stringBuilder.AppendLine(" select '0000-00-00' as 일자 ");
            stringBuilder.AppendLine("     , '== 전잔고 ==' as 일자명칭 ");
            stringBuilder.AppendLine("     , 0 as 정렬구분 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , 0 as 금액 ");
            stringBuilder.AppendLine("     , 0 as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 수금액 ");
            stringBuilder.AppendLine("     , 0 as 할인액 ");
            stringBuilder.AppendLine("     , convert(float, 0) as 잔고 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , a.일자명칭 ");
            stringBuilder.AppendLine("     , a.정렬구분 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , sum(a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum(a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , sum(a.수금액) as 수금액 ");
            stringBuilder.AppendLine("     , sum(a.할인액) as 할인액 ");
            stringBuilder.AppendLine("     , sum(a.잔고) as 잔고 ");
            stringBuilder.AppendLine("     , max(a.등록일시) as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" group by a.일자, a.일자명칭, a.정렬구분, a.전표번호 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , '--- 일계 ---' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액) as 수금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액) as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" group by a.일자 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select SUBSTRING(a.일자, 1, 7) + '-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 월계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액) as 수금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액) as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" group by SUBSTRING(a.일자, 1, 7) ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.부가세액), 0) as 부가세액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.수금액), 0) as 수금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-입', '지-급') then -1 else 1 end) * a.할인액), 0) as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" ) z order by z.일자 asc, z.정렬구분 asc, z.등록일시 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매입처원장_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sType,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_매입원장목록_거래처별(sDay1, sDay2, sCust, sType, strAllFlag));
            stringBuilder.AppendLine(" select s.* ");
            stringBuilder.AppendLine(" into #원장 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #매입 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #지급 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #매출 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #수금 ");
            stringBuilder.AppendLine(" ) s ");
            stringBuilder.AppendLine(" select z.* ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , z.박스수량 as 표시총수량 ");
                stringBuilder.AppendLine("     , z.박스단가 as 표시단가 ");
                stringBuilder.AppendLine("     , z.서비스박스 as 표시서비스 ");
            }
            else
            {
                stringBuilder.AppendLine("     , z.총수량 as 표시총수량 ");
                stringBuilder.AppendLine("     , z.낱개단가 as 표시단가 ");
                stringBuilder.AppendLine("     , z.서비스낱개 as 표시서비스 ");
            }
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select '0000-00-00' as 일자 ");
            stringBuilder.AppendLine("     , '== 전잔고 ==' as 일자명칭 ");
            stringBuilder.AppendLine("     , 0 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , 0 as 금액 ");
            stringBuilder.AppendLine("     , 0 as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 행사금액 ");
            stringBuilder.AppendLine("     , 0 as 행사부가세액 ");
            stringBuilder.AppendLine("     , 0 as 지급액 ");
            stringBuilder.AppendLine("     , 0 as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , 0 as 서비스박스 ");
            stringBuilder.AppendLine("     , 0 as 서비스낱개 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , '' as 비고 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , a.일자명칭 ");
            stringBuilder.AppendLine("     , a.정렬구분 ");
            stringBuilder.AppendLine("     , a.전표분류 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.상품명  ");
            stringBuilder.AppendLine("     , a.규격    ");
            stringBuilder.AppendLine("     , a.박스수량 ");
            stringBuilder.AppendLine("     , a.중간수량 ");
            stringBuilder.AppendLine("     , a.낱개수량 ");
            stringBuilder.AppendLine("     , a.총수량 ");
            stringBuilder.AppendLine("     , a.박스단가 ");
            stringBuilder.AppendLine("     , a.낱개단가 ");
            stringBuilder.AppendLine("     , a.금액 ");
            stringBuilder.AppendLine("     , a.부가세액 ");
            stringBuilder.AppendLine("     , a.행사금액 ");
            stringBuilder.AppendLine("     , a.행사부가세액 ");
            stringBuilder.AppendLine("     , a.지급액 ");
            stringBuilder.AppendLine("     , a.할인액 ");
            stringBuilder.AppendLine("     , a.잔고 ");
            stringBuilder.AppendLine("     , a.서비스박스 ");
            stringBuilder.AppendLine("     , a.서비스낱개 ");
            stringBuilder.AppendLine("     , a.구분 ");
            stringBuilder.AppendLine("     , a.구분명칭 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine("     , a.상품비고 ");
            stringBuilder.AppendLine("     , a.만기일자 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , '--- 일계 ---' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , sum(a.박스수량) as 박스수량 ");
            stringBuilder.AppendLine("     , sum(a.중간수량) as 중간수량 ");
            stringBuilder.AppendLine("     , sum(a.낱개수량) as 낱개수량 ");
            stringBuilder.AppendLine("     , sum(a.총수량) as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , sum(a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum(a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , sum(a.행사금액) as 행사금액 ");
            stringBuilder.AppendLine("     , sum(a.행사부가세액) as 행사부가세액 ");
            stringBuilder.AppendLine("     , sum(a.지급액) as 지급액 ");
            stringBuilder.AppendLine("     , sum(a.할인액) as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , sum(a.서비스박스) as 서비스박스 ");
            stringBuilder.AppendLine("     , sum(a.서비스낱개) as 서비스낱개 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , '' as 비고 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" group by a.일자 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select SUBSTRING(a.일자, 1, 7) + '-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 월계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , sum(a.박스수량) as 박스수량 ");
            stringBuilder.AppendLine("     , sum(a.중간수량) as 중간수량 ");
            stringBuilder.AppendLine("     , sum(a.낱개수량) as 낱개수량 ");
            stringBuilder.AppendLine("     , sum(a.총수량) as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , sum(a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum(a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , sum(a.행사금액) as 행사금액 ");
            stringBuilder.AppendLine("     , sum(a.행사부가세액) as 행사부가세액 ");
            stringBuilder.AppendLine("     , sum(a.지급액) as 지급액 ");
            stringBuilder.AppendLine("     , sum(a.할인액) as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , sum(a.서비스박스) as 서비스박스 ");
            stringBuilder.AppendLine("     , sum(a.서비스낱개) as 서비스낱개 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , '' as 비고 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" group by SUBSTRING(a.일자, 1, 7) ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , isnull(sum(a.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine("     , isnull(sum(a.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine("     , isnull(sum(a.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine("     , isnull(sum(a.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , isnull(sum(a.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     , isnull(sum(a.부가세액), 0) as 부가세액 ");
            stringBuilder.AppendLine("     , isnull(sum(a.행사금액), 0) as 행사금액 ");
            stringBuilder.AppendLine("     , isnull(sum(a.행사부가세액), 0) as 행사부가세액 ");
            stringBuilder.AppendLine("     , isnull(sum(a.지급액), 0) as 지급액 ");
            stringBuilder.AppendLine("     , isnull(sum(a.할인액), 0) as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , isnull(sum(a.서비스박스), 0) as 서비스박스 ");
            stringBuilder.AppendLine("     , isnull(sum(a.서비스낱개), 0) as 서비스낱개 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , '' as 비고 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" ) z order by z.일자 asc, z.정렬구분 asc, z.등록일시 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매입처원장_간략_List(
          string sDay1,
          string sDay2,
          string sCust,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_매입원장목록_거래처별(sDay1, sDay2, sCust, "", strAllFlag));
            stringBuilder.AppendLine(" select s.* ");
            stringBuilder.AppendLine(" into #원장 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #매입 where 정렬구분 in ('1', '2') ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #지급 where 정렬구분 in ('1', '2') ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #매출 where 정렬구분 in ('1', '2') ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #수금 where 정렬구분 in ('1', '2') ");
            stringBuilder.AppendLine(" ) s ");
            stringBuilder.AppendLine(" select z.* from ( ");
            stringBuilder.AppendLine(" select '0000-00-00' as 일자 ");
            stringBuilder.AppendLine("     , '== 전잔고 ==' as 일자명칭 ");
            stringBuilder.AppendLine("     , 0 as 정렬구분 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , 0 as 금액 ");
            stringBuilder.AppendLine("     , 0 as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 지급액 ");
            stringBuilder.AppendLine("     , 0 as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , a.일자명칭 ");
            stringBuilder.AppendLine("     , a.정렬구분 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , sum(a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum(a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , sum(a.지급액) as 지급액 ");
            stringBuilder.AppendLine("     , sum(a.할인액) as 할인액 ");
            stringBuilder.AppendLine("     , sum(a.잔고) as 잔고 ");
            stringBuilder.AppendLine("     , max(a.등록일시) as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" group by a.일자, a.일자명칭, a.정렬구분, a.전표번호 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , '--- 일계 ---' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-출', '수-금') then -1 else 1 end) * a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-출', '수-금') then -1 else 1 end) * a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-출', '수-금') then -1 else 1 end) * a.지급액) as 지급액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-출', '수-금') then -1 else 1 end) * a.할인액) as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" group by a.일자 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select SUBSTRING(a.일자, 1, 7) + '-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 월계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-출', '수-금') then -1 else 1 end) * a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-출', '수-금') then -1 else 1 end) * a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-출', '수-금') then -1 else 1 end) * a.지급액) as 지급액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매-출', '수-금') then -1 else 1 end) * a.할인액) as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" group by SUBSTRING(a.일자, 1, 7) ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-출', '수-금') then -1 else 1 end) * a.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-출', '수-금') then -1 else 1 end) * a.부가세액), 0) as 부가세액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-출', '수-금') then -1 else 1 end) * a.지급액), 0) as 지급액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매-출', '수-금') then -1 else 1 end) * a.할인액), 0) as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #원장 a ");
            stringBuilder.AppendLine(" ) z order by z.일자 asc, z.정렬구분 asc, z.등록일시 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_지출현황_List(string sDay1, string sDay2, string sAcct, string sConn)
        {
            StringBuilder stringBuilder1 = new StringBuilder();
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.AppendLine(" select b.계정코드 as 계정코드 ");
            stringBuilder2.AppendLine("     , 1 as 정렬번호 ");
            stringBuilder2.AppendLine("     , c.명칭 as 계정명 ");
            stringBuilder2.AppendLine("     , f.사용자명 as 담당사원 ");
            stringBuilder2.AppendLine("     , b.지출일자    ");
            stringBuilder2.AppendLine("     , b.적요        ");
            stringBuilder2.AppendLine("     , b.금액        ");
            stringBuilder2.AppendLine(" from T_지출 a       ");
            stringBuilder2.AppendLine("      inner join T_지출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.지출일자 = a.지출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder2.AppendLine("      left outer join P_계정 c on c.사업자번호 = b.사업자번호 and c.지점코드 = b.지점코드 and c.코드 = b.계정코드 ");
            stringBuilder2.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = a.사업자번호 and f.지점코드 = a.지점코드 and f.사원번호 = a.사원번호 ");
            stringBuilder2.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder2.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder2.AppendLine("     and a.지출일자 >= '" + sDay1 + "' ");
            stringBuilder2.AppendLine("     and a.지출일자 <= '" + sDay2 + "' ");
            if (sAcct != "")
                stringBuilder2.AppendLine("     and b.계정코드 = '" + sAcct + "' ");
            stringBuilder1.AppendLine(" select z.* from ( ");
            stringBuilder1.AppendLine(stringBuilder2.ToString());
            stringBuilder1.AppendLine(" union all ");
            stringBuilder1.AppendLine(" select a.계정코드 ");
            stringBuilder1.AppendLine("     , 999999 as 정렬번호 ");
            stringBuilder1.AppendLine("     , '--- 소계 ---' as 계정명 ");
            stringBuilder1.AppendLine("     , '' as 담당사원 ");
            stringBuilder1.AppendLine("     , '' as 지출일자 ");
            stringBuilder1.AppendLine("     , '' as 적요     ");
            stringBuilder1.AppendLine("     , sum(a.금액) as 금액 ");
            stringBuilder1.AppendLine(" from ( ");
            stringBuilder1.AppendLine(stringBuilder2.ToString());
            stringBuilder1.AppendLine(" ) a ");
            stringBuilder1.AppendLine(" group by a.계정코드 ");
            stringBuilder1.AppendLine(" union all ");
            stringBuilder1.AppendLine(" select 'ZZZZ' as 계정코드 ");
            stringBuilder1.AppendLine("     , 999999 as 정렬번호 ");
            stringBuilder1.AppendLine("     , '=== 합계 ===' as 계정명 ");
            stringBuilder1.AppendLine("     , '' as 담당사원 ");
            stringBuilder1.AppendLine("     , '' as 지출일자 ");
            stringBuilder1.AppendLine("     , '' as 적요     ");
            stringBuilder1.AppendLine("     , sum(a.금액) as 금액 ");
            stringBuilder1.AppendLine(" from ( ");
            stringBuilder1.AppendLine(stringBuilder2.ToString());
            stringBuilder1.AppendLine(" ) a ");
            stringBuilder1.AppendLine(" ) z order by z.계정코드 asc, z.정렬번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder1.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_장비대여현황_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select z.* from ( ");
            stringBuilder.AppendLine(" select a.출고일자   ");
            stringBuilder.AppendLine("     , a.출고번호    ");
            stringBuilder.AppendLine("     , '출고' as 구분 ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , a.장비코드    ");
            stringBuilder.AppendLine("     , a.대여기간1   ");
            stringBuilder.AppendLine("     , a.대여기간2   ");
            stringBuilder.AppendLine("     , a.수량        ");
            stringBuilder.AppendLine("     , a.비고        ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , m.장비명      ");
            stringBuilder.AppendLine("     , m.규격        ");
            stringBuilder.AppendLine("     , p.회수일자    ");
            stringBuilder.AppendLine(" from T_장비대여 a   ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_장비정보 m on m.사업자번호 = a.사업자번호 and m.지점코드 = a.지점코드 and m.장비코드 = a.장비코드 ");
            stringBuilder.AppendLine("      left outer join T_장비회수 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.출고일자 = a.출고일자 and p.출고번호 = a.출고번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     " + condition + " ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select p.회수일자 as 출고일자 ");
            stringBuilder.AppendLine("     , p.회수번호 as 출고번호 ");
            stringBuilder.AppendLine("     , '회수' as 구분 ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , a.장비코드    ");
            stringBuilder.AppendLine("     , a.대여기간1   ");
            stringBuilder.AppendLine("     , a.대여기간2   ");
            stringBuilder.AppendLine("     , a.수량        ");
            stringBuilder.AppendLine("     , a.비고        ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , m.장비명      ");
            stringBuilder.AppendLine("     , m.규격        ");
            stringBuilder.AppendLine("     , '' as 회수일자 ");
            stringBuilder.AppendLine(" from T_장비회수 p   ");
            stringBuilder.AppendLine("      inner join T_장비대여 a on a.사업자번호 = p.사업자번호 and a.지점코드 = p.지점코드 and a.출고일자 = p.출고일자 and a.출고번호 = p.출고번호 ");
            stringBuilder.AppendLine("      left outer join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_장비정보 m on m.사업자번호 = a.사업자번호 and m.지점코드 = a.지점코드 and m.장비코드 = a.장비코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     " + condition + " ");
            stringBuilder.AppendLine(" ) z order by z.출고일자 asc, z.출고번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_계산서_List(
          string sGubun,
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , b.품목수      ");
            stringBuilder.AppendLine("     , b.부가세액    ");
            stringBuilder.AppendLine("     , b.금액    ");
            stringBuilder.AppendLine("     , b.포함금액    ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine(" from T_계산서 a       ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 입출구분, 계산서일자, 계산서번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , isnull(sum(부가세액), 0) as 부가세액 ");
            stringBuilder.AppendLine("                             , isnull(sum(금액), 0) as 금액 ");
            stringBuilder.AppendLine("                             , isnull(sum(포함금액), 0) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_계산서항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 입출구분 = '" + sGubun + "' ");
            stringBuilder.AppendLine("                             and 계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 계산서일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 입출구분, 계산서일자, 계산서번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.입출구분 = a.입출구분 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 입출구분, 계산서일자, 계산서번호 ");
            stringBuilder.AppendLine("                             , count(*) as 해당품목수 ");
            stringBuilder.AppendLine("                         from T_계산서항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 입출구분 = '" + sGubun + "' ");
            stringBuilder.AppendLine("                             and 계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 계산서일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                             and 상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 입출구분, 계산서일자, 계산서번호 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 and c.입출구분 = a.입출구분 and c.계산서일자 = a.계산서일자 and c.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.입출구분 = '" + sGubun + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and isnull(c.해당품목수, 0) > 0 ");
            stringBuilder.AppendLine(" order by a.계산서일자 desc, a.계산서번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_계산서_Detail(
          string sGubun,
          string sKey1,
          string sKey2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.현잔고      ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine(" from T_계산서 a       ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.입출구분 = '" + sGubun + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.계산서번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_계산서항목_List(
          string sGubun,
          string sKey1,
          string sKey2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine(" from T_계산서항목 a   ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.발행일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.입출구분 = '" + sGubun + "' ");
            stringBuilder.AppendLine("     and a.전표번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_거래처잔고_수정이력(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , convert(nvarchar(20), a.수정일시, 120) as 수정일시표기 ");
            stringBuilder.AppendLine("     , b.사용자명    ");
            stringBuilder.AppendLine(" from T_거래처잔고이력 a ");
            stringBuilder.AppendLine("     left outer join T_사용자정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.사원번호 = a.수정사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.일련번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_우편번호_지번_List_Bind(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select   ");
            stringBuilder.AppendLine("     a.ZipCode as 우편번호 ");
            stringBuilder.AppendLine("     , a.SrchAddr as 주소 ");
            stringBuilder.AppendLine("     , a.Sido ");
            stringBuilder.AppendLine("         + (case when isnull(a.Gungu, '') <> '' then ' ' + a.Gungu else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.Dong, '') <> '' then ' ' + a.Dong else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.Ri, '') <> '' then ' ' + a.Ri else '' end) ");
            stringBuilder.AppendLine("         as 주소1 ");
            stringBuilder.AppendLine("     , isnull(a.Bldnm, '') as 주소2 ");
            stringBuilder.AppendLine(" from T_ZipCode a ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.ZipCode asc, a.Seq asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_우편번호_도로명_List_Bind(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select   ");
            stringBuilder.AppendLine("     a.ZipCode as 우편번호 ");
            stringBuilder.AppendLine("     , a.Sido ");
            stringBuilder.AppendLine("         + (case when isnull(a.Gungu, '') <> '' then ' ' + a.Gungu else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.Dong, '') <> '' then ' ' + a.Dong else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.RoadNM, '') <> '' then ' ' + a.RoadNM else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.MainNo, '') <> '' then ' ' + a.MainNo else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.SubNo, '') <> '' and isnull(a.SubNo, '') <> '0' then ' ' + a.SubNo else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.DongNM, '') <> '' or isnull(a.BldNM, '') <> '' then ' (' else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.DongNM, '') <> '' and isnull(a.BldNM, '') <> '' then a.DongNM + ', ' + a.BldNM ");
            stringBuilder.AppendLine("             when isnull(a.DongNM, '') <> '' and isnull(a.BldNM, '') = '' then a.DongNM ");
            stringBuilder.AppendLine("             when isnull(a.DongNM, '') = '' and isnull(a.BldNM, '') <> '' then a.BldNM ");
            stringBuilder.AppendLine("             else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.DongNM, '') <> '' or isnull(a.BldNM, '') <> '' then ')' else '' end) ");
            stringBuilder.AppendLine("         as 주소 ");
            stringBuilder.AppendLine("     , a.Sido ");
            stringBuilder.AppendLine("         + (case when isnull(a.Gungu, '') <> '' then ' ' + a.Gungu else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.Dong, '') <> '' then ' ' + a.Dong else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.RoadNM, '') <> '' then ' ' + a.RoadNM else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.MainNo, '') <> '' then ' ' + a.MainNo else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.SubNo, '') <> '' and isnull(a.SubNo, '') <> '0' then ' ' + a.SubNo else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.DongNM, '') <> '' or isnull(a.BldNM, '') <> '' then ' (' else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.DongNM, '') <> '' and isnull(a.BldNM, '') <> '' then a.DongNM + ', ' + a.BldNM ");
            stringBuilder.AppendLine("             when isnull(a.DongNM, '') <> '' and isnull(a.BldNM, '') = '' then a.DongNM ");
            stringBuilder.AppendLine("             when isnull(a.DongNM, '') = '' and isnull(a.BldNM, '') <> '' then a.BldNM ");
            stringBuilder.AppendLine("             else '' end) ");
            stringBuilder.AppendLine("         + (case when isnull(a.DongNM, '') <> '' or isnull(a.BldNM, '') <> '' then ')' else '' end) ");
            stringBuilder.AppendLine("         as 주소1 ");
            stringBuilder.AppendLine("     , '' as 주소2 ");
            stringBuilder.AppendLine(" from T_ZipCodeNew a ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.ZipCode asc, convert(int, isnull(a.MainNo, '0')) asc, convert(int, isnull(a.SubNo, '0')) asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_계정_Detail(string sKey1, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine(" from P_계정 a       ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.코드 = @p_1 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_계정_List(string condition, bool bOrdNum, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     a.코드 ");
            stringBuilder.AppendLine("     , a.명칭 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine(" from P_계정 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_장비대여회수_List_장비별(
          string sDay1,
          string sDay2,
          string sCode,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select z.* from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     a.출고일자      ");
            stringBuilder.AppendLine("     , '0' as 구분자 ");
            stringBuilder.AppendLine("     , '출고' as 구분 ");
            stringBuilder.AppendLine("     , a.출고번호    ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , e.장비명      ");
            stringBuilder.AppendLine("     , e.규격        ");
            stringBuilder.AppendLine(" from T_장비대여 a   ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_장비정보 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.장비코드 = a.장비코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.출고일자 >= @p_1 ");
            stringBuilder.AppendLine("     and a.출고일자 <= @p_2 ");
            stringBuilder.AppendLine("     and a.장비코드 = @p_code ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     b.회수일자      ");
            stringBuilder.AppendLine("     , '1' as 구분자 ");
            stringBuilder.AppendLine("     , '회수' as 구분 ");
            stringBuilder.AppendLine("     , b.회수번호    ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , e.장비명      ");
            stringBuilder.AppendLine("     , e.규격        ");
            stringBuilder.AppendLine(" from T_장비대여 a   ");
            stringBuilder.AppendLine("     inner join T_장비회수 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.출고일자 = a.출고일자 and b.출고번호 = a.출고번호 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') d on d.사업자번호 = a.사업자번호 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_장비정보 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.장비코드 = a.장비코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and b.회수일자 >= @p_1 ");
            stringBuilder.AppendLine("     and b.회수일자 <= @p_2 ");
            stringBuilder.AppendLine("     and a.장비코드 = @p_code ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" order by z.출고일자 asc, z.구분자 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sDay2);
            sCommand.Parameters.AddWithValue("@p_code", (object)sCode);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_창고이동_List(
          string sDay1,
          string sDay2,
          string sWare_out,
          string sWare_in,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , b.품목수      ");
            stringBuilder.AppendLine("     , d.명칭 as 출고창고명 ");
            stringBuilder.AppendLine("     , e.명칭 as 입고창고명 ");
            stringBuilder.AppendLine("     , f.사용자명 as 등록사원명 ");
            stringBuilder.AppendLine(" from T_창고이동 a       ");
            stringBuilder.AppendLine("      inner join P_창고 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.코드 = a.출고창고코드 ");
            stringBuilder.AppendLine("      inner join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.입고창고코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = a.사업자번호 and f.지점코드 = a.지점코드 and f.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 수불일자, 수불번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                         from T_창고이동항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 수불일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 수불일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 수불일자, 수불번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.수불일자 = a.수불일자 and b.수불번호 = a.수불번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수불일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.수불일자 <= '" + sDay2 + "' ");
            if (sWare_out != "")
                stringBuilder.AppendLine("     and a.출고창고코드 = '" + sWare_out + "' ");
            if (sWare_in != "")
                stringBuilder.AppendLine("     and a.입고창고코드 = '" + sWare_in + "' ");
            stringBuilder.AppendLine(" order by a.수불일자 desc, a.수불번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_창고이동_Detail(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , d.명칭 as 출고창고명 ");
            stringBuilder.AppendLine("     , e.명칭 as 입고창고명 ");
            stringBuilder.AppendLine("     , f.사용자명 as 등록사원명 ");
            stringBuilder.AppendLine(" from T_창고이동 a       ");
            stringBuilder.AppendLine("      inner join P_창고 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.코드 = a.출고창고코드 ");
            stringBuilder.AppendLine("      inner join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.입고창고코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = a.사업자번호 and f.지점코드 = a.지점코드 and f.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수불일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.수불번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_창고이동항목_Condition(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , d.명칭 as 출고창고명 ");
            stringBuilder.AppendLine("     , e.명칭 as 입고창고명 ");
            stringBuilder.AppendLine("     , b.항목순번 ");
            stringBuilder.AppendLine("     , b.상품코드 ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine("     , b.박스수량 ");
            stringBuilder.AppendLine("     , b.중간수량 ");
            stringBuilder.AppendLine("     , b.낱개수량 ");
            stringBuilder.AppendLine("     , b.총수량 ");
            stringBuilder.AppendLine(" from T_창고이동 a       ");
            stringBuilder.AppendLine("      inner join T_창고이동항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.수불일자 = a.수불일자 and b.수불번호 = a.수불번호 ");
            stringBuilder.AppendLine("      inner join P_창고 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.코드 = a.출고창고코드 ");
            stringBuilder.AppendLine("      inner join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.입고창고코드 ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = b.사업자번호 and g.지점코드 = b.지점코드 and g.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.수불일자 asc, a.수불번호 asc, b.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_창고이동항목_List(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(a.총수량, a.사업자번호, a.지점코드, a.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" from T_창고이동항목 a   ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수불일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.수불번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_창고별재고_List(
          string p2,
          string p1,
          string sDay,
          bool bZero,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.총수량) as 매입총수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스총수량) as 매입서비스총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp매입 ");
            stringBuilder.AppendLine("\t\t                    from T_매입 x ");
            stringBuilder.AppendLine("\t\t\t                    inner join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t                    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.창고코드 = @p_1 ");
            stringBuilder.AppendLine("\t\t\t                    and x.매입일자 <= @p_day ");
            stringBuilder.AppendLine("\t\t                    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.총수량) as 매출총수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스총수량) as 매출서비스총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp매출 ");
            stringBuilder.AppendLine("\t\t                    from T_매출 x ");
            stringBuilder.AppendLine("\t\t\t                    inner join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t                    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.창고코드 = @p_1 ");
            stringBuilder.AppendLine("\t\t\t                    and x.매출일자 <= @p_day ");
            stringBuilder.AppendLine("\t\t                    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine("                             , sum(y.총수량) as 입고총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp입고 ");
            stringBuilder.AppendLine("                         from T_창고이동 x ");
            stringBuilder.AppendLine("                             inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("                         where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.입고창고코드 = @p_1 ");
            stringBuilder.AppendLine("                             and x.수불일자 <= @p_day ");
            stringBuilder.AppendLine("                         group by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine("                             , sum(y.총수량) as 출고총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp출고 ");
            stringBuilder.AppendLine("                         from T_창고이동 x ");
            stringBuilder.AppendLine("                             inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("                         where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.출고창고코드 = @p_1 ");
            stringBuilder.AppendLine("                             and x.수불일자 <= @p_day ");
            stringBuilder.AppendLine("                         group by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , isnull(c.초기재고, 0) as 초기재고 ");
            stringBuilder.AppendLine("     , isnull(q.매입총수량, 0) as 매입총수량 ");
            stringBuilder.AppendLine("     , isnull(r.매출총수량, 0) as 매출총수량 ");
            stringBuilder.AppendLine("     , isnull(s.입고총수량, 0) as 입고총수량 ");
            stringBuilder.AppendLine("     , isnull(w.출고총수량, 0) as 출고총수량 ");
            if (Common.p_strBox == "3")
            {
                stringBuilder.AppendLine("     , dbo.Func_전체박스환산( ");
                stringBuilder.AppendLine("         isnull(c.초기재고, 0) + isnull(q.매입총수량, 0) + isnull(q.매입서비스총수량, 0) + isnull(s.입고총수량, 0) ");
                stringBuilder.AppendLine("         - isnull(r.매출총수량, 0) - isnull(r.매출서비스총수량, 0) - isnull(w.출고총수량, 0) ");
                stringBuilder.AppendLine("         , '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.상품코드) as 현재고_박스 ");
                stringBuilder.AppendLine("     , dbo.Func_전체중간환산( ");
                stringBuilder.AppendLine("         isnull(c.초기재고, 0) + isnull(q.매입총수량, 0) + isnull(q.매입서비스총수량, 0) + isnull(s.입고총수량, 0) ");
                stringBuilder.AppendLine("         - isnull(r.매출총수량, 0) - isnull(r.매출서비스총수량, 0) - isnull(w.출고총수량, 0) ");
                stringBuilder.AppendLine("         , '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.상품코드) as 현재고_중간 ");
                stringBuilder.AppendLine("     , dbo.Func_전체낱개환산( ");
                stringBuilder.AppendLine("         isnull(c.초기재고, 0) + isnull(q.매입총수량, 0) + isnull(q.매입서비스총수량, 0) + isnull(s.입고총수량, 0) ");
                stringBuilder.AppendLine("         - isnull(r.매출총수량, 0) - isnull(r.매출서비스총수량, 0) - isnull(w.출고총수량, 0) ");
                stringBuilder.AppendLine("         , '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.상품코드) as 현재고_낱개 ");
            }
            stringBuilder.AppendLine("     , convert(numeric(18,2), isnull(c.초기재고, 0) + isnull(q.매입총수량, 0) + isnull(q.매입서비스총수량, 0) + isnull(s.입고총수량, 0) ");
            stringBuilder.AppendLine("         - isnull(r.매출총수량, 0) - isnull(r.매출서비스총수량, 0) - isnull(w.출고총수량, 0)) as 현재고 ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine("     left outer join P_창고 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.코드 = @p_1");
            stringBuilder.AppendLine("     left outer join T_상품창고별재고 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.상품코드 = a.상품코드 and c.창고코드 = b.코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp매입 q on q.상품코드 = a.상품코드 and q.창고코드 = b.코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp매출 r on r.상품코드 = a.상품코드 and r.창고코드 = b.코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp입고 s on s.상품코드 = a.상품코드 and s.입고창고코드 = b.코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp출고 w on w.상품코드 = a.상품코드 and w.출고창고코드 = b.코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (p2 != "")
                stringBuilder.AppendLine("     and a.상품코드 = @p_2 ");
            stringBuilder.AppendLine("     and isnull(a.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine(" ) a ");
            stringBuilder.AppendLine(" where 1=1 ");
            if (bZero)
                stringBuilder.AppendLine("     and a.현재고 <> 0 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            sCommand.Parameters.AddWithValue("@p_2", (object)p2);
            sCommand.Parameters.AddWithValue("@p_day", (object)sDay);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_상품창고별재고_Summary(
          string sWare,
          string sProd,
          string sDay,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , isnull(c.초기재고, 0) as 초기재고 ");
            stringBuilder.AppendLine("     , isnull(q.매입총수량, 0) as 매입총수량 ");
            stringBuilder.AppendLine("     , isnull(r.매출총수량, 0) as 매출총수량 ");
            stringBuilder.AppendLine("     , isnull(s.입고총수량, 0) as 입고총수량 ");
            stringBuilder.AppendLine("     , isnull(w.출고총수량, 0) as 출고총수량 ");
            stringBuilder.AppendLine("     , isnull(c.초기재고, 0) + isnull(q.매입총수량, 0) + isnull(q.매입서비스낱개수량, 0) + isnull(q.매입서비스박스수량, 0) + isnull(s.입고총수량, 0) ");
            stringBuilder.AppendLine("         - isnull(r.매출총수량, 0) - isnull(r.매출서비스낱개수량, 0) - isnull(r.매출서비스박스수량, 0) - isnull(w.출고총수량, 0) as 현재고 ");
            if (Common.p_strBox == "1")
            {
                stringBuilder.AppendLine("     , dbo.Func_박스수량환산( ");
                stringBuilder.AppendLine("         isnull(c.초기재고, 0) + isnull(q.매입총수량, 0) + isnull(q.매입서비스낱개수량, 0) + isnull(q.매입서비스박스수량, 0) + isnull(s.입고총수량, 0) ");
                stringBuilder.AppendLine("             - isnull(r.매출총수량, 0) - isnull(r.매출서비스낱개수량, 0) - isnull(r.매출서비스박스수량, 0) - isnull(w.출고총수량, 0) ");
                stringBuilder.AppendLine("         , '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.상품코드) as 현재고표시 ");
            }
            else
            {
                stringBuilder.AppendLine("     , isnull(c.초기재고, 0) + isnull(q.매입총수량, 0) + isnull(q.매입서비스낱개수량, 0) + isnull(q.매입서비스박스수량, 0) + isnull(s.입고총수량, 0) ");
                stringBuilder.AppendLine("         - isnull(r.매출총수량, 0) - isnull(r.매출서비스낱개수량, 0) - isnull(r.매출서비스박스수량, 0) - isnull(w.출고총수량, 0) as 현재고표시 ");
            }
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine("     left outer join P_창고 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.코드 = @p_1");
            stringBuilder.AppendLine("     left outer join T_상품창고별재고 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.상품코드 = a.상품코드 and c.창고코드 = b.코드 ");
            stringBuilder.AppendLine("\t    left outer join ( ");
            stringBuilder.AppendLine("\t\t                    select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.총수량) as 매입총수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스낱개) as 매입서비스낱개수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스박스) as 매입서비스박스수량 ");
            stringBuilder.AppendLine("\t\t                    from T_매입 x ");
            stringBuilder.AppendLine("\t\t\t                    inner join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t                    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.창고코드 = @p_1 ");
            stringBuilder.AppendLine("\t\t\t                    and x.매입일자 <= @p_day ");
            stringBuilder.AppendLine("\t\t                    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t                    ) q on q.상품코드 = a.상품코드 and q.창고코드 = b.코드 ");
            stringBuilder.AppendLine("\t    left outer join ( ");
            stringBuilder.AppendLine("\t\t                    select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.총수량) as 매출총수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스낱개) as 매출서비스낱개수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스박스) as 매출서비스박스수량 ");
            stringBuilder.AppendLine("\t\t                    from T_매출 x ");
            stringBuilder.AppendLine("\t\t\t                    inner join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t\t                        and y.매출구분 <> '4' ");
            stringBuilder.AppendLine("\t\t                    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.창고코드 = @p_1 ");
            stringBuilder.AppendLine("\t\t\t                    and x.매출일자 <= @p_day ");
            stringBuilder.AppendLine("\t\t                    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t                    ) r on r.상품코드 = a.상품코드 and r.창고코드 = b.코드 ");
            stringBuilder.AppendLine("      left outer join (select x.입고창고코드, y.상품코드, sum(y.총수량) as 입고총수량 ");
            stringBuilder.AppendLine("                         from T_창고이동 x ");
            stringBuilder.AppendLine("                             inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("                         where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.입고창고코드 = @p_1 ");
            stringBuilder.AppendLine("                             and x.수불일자 <= @p_day ");
            stringBuilder.AppendLine("                         group by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine("                      ) s on s.상품코드 = a.상품코드 and s.입고창고코드 = b.코드 ");
            stringBuilder.AppendLine("      left outer join (select x.출고창고코드, y.상품코드, sum(y.총수량) as 출고총수량 ");
            stringBuilder.AppendLine("                         from T_창고이동 x ");
            stringBuilder.AppendLine("                             inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("                         where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.출고창고코드 = @p_1 ");
            stringBuilder.AppendLine("                             and x.수불일자 <= @p_day ");
            stringBuilder.AppendLine("                         group by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine("                      ) w on w.상품코드 = a.상품코드 and w.출고창고코드 = b.코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sWare);
            sCommand.Parameters.AddWithValue("@p_2", (object)sProd);
            sCommand.Parameters.AddWithValue("@p_day", (object)sDay);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_상품별입출창고재고(
          string sDay,
          string sWare_out,
          string sWare_in,
          bool bOrder,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                    else 0 end) * y.총수량) as 전일매입량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                    else 0 end) * y.서비스총수량) as 전일매입서비스량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp출고창고_매입 ");
            stringBuilder.AppendLine("\t\t    from T_매입 x ");
            stringBuilder.AppendLine("\t\t\t    inner join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.매입일자 <= @p_day1 ");
            stringBuilder.AppendLine("             and x.창고코드 = '" + sWare_out + "' ");
            stringBuilder.AppendLine("\t\t    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("                         else 0 end) * y.총수량) as 전일매출량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("                         else 0 end) * y.서비스총수량) as 전일매출서비스량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp출고창고_매출 ");
            stringBuilder.AppendLine("\t\t    from T_매출 x ");
            stringBuilder.AppendLine("\t\t\t    inner join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.매출일자 <= @p_day1 ");
            stringBuilder.AppendLine("             and x.창고코드 = '" + sWare_out + "' ");
            stringBuilder.AppendLine("\t\t    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.입고창고코드, y.상품코드, sum(y.총수량) as 전일입고량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp출고창고_입고 ");
            stringBuilder.AppendLine("\t\t    from T_창고이동 x ");
            stringBuilder.AppendLine("\t\t\t    inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.수불일자 <= @p_day1 ");
            stringBuilder.AppendLine("             and x.입고창고코드 = '" + sWare_out + "' ");
            stringBuilder.AppendLine("\t\t    group by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.출고창고코드, y.상품코드, sum(y.총수량) as 전일출고량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp출고창고_출고 ");
            stringBuilder.AppendLine("\t\t    from T_창고이동 x ");
            stringBuilder.AppendLine("\t\t\t    inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.수불일자 <= @p_day1 ");
            stringBuilder.AppendLine("             and x.출고창고코드 = '" + sWare_out + "' ");
            stringBuilder.AppendLine("\t\t    group by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                    else 0 end) * y.총수량) as 전일매입량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                    else 0 end) * y.서비스총수량) as 전일매입서비스량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp입고창고_매입 ");
            stringBuilder.AppendLine("\t\t    from T_매입 x ");
            stringBuilder.AppendLine("\t\t\t    inner join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.매입일자 <= @p_day1 ");
            stringBuilder.AppendLine("             and x.창고코드 = '" + sWare_in + "' ");
            stringBuilder.AppendLine("\t\t    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("                         else 0 end) * y.총수량) as 전일매출량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("                         else 0 end) * y.서비스총수량) as 전일매출서비스량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp입고창고_매출 ");
            stringBuilder.AppendLine("\t\t    from T_매출 x ");
            stringBuilder.AppendLine("\t\t\t    inner join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.매출일자 <= @p_day1 ");
            stringBuilder.AppendLine("             and x.창고코드 = '" + sWare_in + "' ");
            stringBuilder.AppendLine("\t\t    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.입고창고코드, y.상품코드, sum(y.총수량) as 전일입고량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp입고창고_입고 ");
            stringBuilder.AppendLine("\t\t    from T_창고이동 x ");
            stringBuilder.AppendLine("\t\t\t    inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.수불일자 <= @p_day1 ");
            stringBuilder.AppendLine("             and x.입고창고코드 = '" + sWare_in + "' ");
            stringBuilder.AppendLine("\t\t    group by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.출고창고코드, y.상품코드, sum(y.총수량) as 전일출고량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp입고창고_출고 ");
            stringBuilder.AppendLine("\t\t    from T_창고이동 x ");
            stringBuilder.AppendLine("\t\t\t    inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.수불일자 <= @p_day1 ");
            stringBuilder.AppendLine("             and x.출고창고코드 = '" + sWare_in + "' ");
            stringBuilder.AppendLine("\t\t    group by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine("select  ");
            stringBuilder.AppendLine("\t    a.상품코드 ");
            stringBuilder.AppendLine("\t    , a.상품명 ");
            stringBuilder.AppendLine("\t    , a.규격 ");
            stringBuilder.AppendLine("\t    , isnull(b.초기재고, 0) + isnull(q.전일매입량, 0) + isnull(q.전일매입서비스량, 0) ");
            stringBuilder.AppendLine("\t        - isnull(r.전일매출량, 0) - isnull(r.전일매출서비스량, 0) ");
            stringBuilder.AppendLine("\t        + isnull(s.전일입고량, 0) - isnull(w.전일출고량, 0) as 출고창고재고 ");
            stringBuilder.AppendLine("\t    , isnull(c.초기재고, 0) + isnull(qq.전일매입량, 0) + isnull(qq.전일매입서비스량, 0) ");
            stringBuilder.AppendLine("\t        - isnull(rr.전일매출량, 0) - isnull(rr.전일매출서비스량, 0) ");
            stringBuilder.AppendLine("\t        + isnull(ss.전일입고량, 0) - isnull(ww.전일출고량, 0) as 입고창고재고 ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine("     left outer join T_상품창고별재고 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.상품코드 = a.상품코드 and b.창고코드 = '" + sWare_out + "' ");
            stringBuilder.AppendLine("     left outer join T_상품창고별재고 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.상품코드 = a.상품코드 and c.창고코드 = '" + sWare_in + "' ");
            stringBuilder.AppendLine("\t    left outer join #Tmp출고창고_매입 q on q.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp출고창고_매출 r on r.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp출고창고_입고 s on s.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp출고창고_출고 w on w.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp입고창고_매입 qq on qq.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp입고창고_매출 rr on rr.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp입고창고_입고 ss on ss.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp입고창고_출고 ww on ww.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("\t    and a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t    and isnull(a.사용여부, '0') = '0' ");
            if (bOrder)
                stringBuilder.AppendLine(" order by a.정렬순서 asc, a.상품코드 asc ");
            else
                stringBuilder.AppendLine(" order by a.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_창고별재고현황(
          string sDay1,
          string sDay2,
          string sWare,
          string sProd,
          string sFact,
          string sType,
          bool bOrder,
          bool bNoZero,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("\tselect a.창고코드 ");
            stringBuilder.AppendLine("\t\t, a.상품코드 ");
            stringBuilder.AppendLine("\t\t, sum(a.전일매입_총수량)\t\t\tas 전일매입_총수량 ");
            stringBuilder.AppendLine("\t\t, sum(a.전일매입_서비스총수량)\t\tas 전일매입_서비스총수량 ");
            stringBuilder.AppendLine("\t\t, sum(a.전일매출_총수량)\t\t\tas 전일매출_총수량 ");
            stringBuilder.AppendLine("\t\t, sum(a.전일매출_서비스총수량)\t\tas 전일매출_서비스총수량 ");
            stringBuilder.AppendLine(" into #Tmp매입매출계_전일_창고상품 ");
            stringBuilder.AppendLine("\tfrom ( ");
            stringBuilder.AppendLine("\t\tselect x.창고코드 ");
            stringBuilder.AppendLine("\t\t\t, y.상품코드 ");
            stringBuilder.AppendLine("\t\t\t, sum((case when y.매입구분 = '1' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매입구분 = '2' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매입구분 = '3' then -1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매입구분 = '4' then -1  ");
            stringBuilder.AppendLine("\t\t\t\t\telse 0 end) * y.총수량) as 전일매입_총수량 ");
            stringBuilder.AppendLine("\t\t\t, sum((case when y.매입구분 = '1' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매입구분 = '2' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매입구분 = '3' then -1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매입구분 = '4' then -1  ");
            stringBuilder.AppendLine("\t\t\t\t\telse 0 end) * y.서비스총수량) as 전일매입_서비스총수량 ");
            stringBuilder.AppendLine("\t\t\t, 0 as 전일매출_총수량 ");
            stringBuilder.AppendLine("\t\t\t, 0 as 전일매출_서비스총수량 ");
            stringBuilder.AppendLine("\t\tfrom T_매입 x ");
            stringBuilder.AppendLine("\t\t\tinner join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\twhere x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("\t\t\tand x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\tand x.매입일자 < @p_day1 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\tgroup by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\tunion all ");
            stringBuilder.AppendLine("\t\tselect x.창고코드 ");
            stringBuilder.AppendLine("\t\t\t, y.상품코드 ");
            stringBuilder.AppendLine("\t\t\t, 0 as 전일매입_총수량 ");
            stringBuilder.AppendLine("\t\t\t, 0 as 전일매입_서비스총수량 ");
            stringBuilder.AppendLine("\t\t\t, sum((case when y.매출구분 = '1' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매출구분 = '2' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매출구분 = '3' then -1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine("\t\t\t\t\telse 0 end) * y.총수량) as 전일매출_총수량 ");
            stringBuilder.AppendLine("\t\t\t, sum((case when y.매출구분 = '1' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매출구분 = '2' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매출구분 = '3' then -1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine("\t\t\t\t\telse 0 end) * y.서비스총수량) as 전일매출_서비스총수량 ");
            stringBuilder.AppendLine("\t\tfrom T_매출 x ");
            stringBuilder.AppendLine("\t\t\tinner join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\twhere x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("\t\t\tand x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\tand x.매출일자 < @p_day1 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\tgroup by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t) a ");
            stringBuilder.AppendLine("\tgroup by a.창고코드, a.상품코드 ");
            stringBuilder.AppendLine(" select a.창고코드 ");
            stringBuilder.AppendLine(" \t, a.상품코드 ");
            stringBuilder.AppendLine(" \t, sum(a.전일_입고량) as 전일_입고량 ");
            stringBuilder.AppendLine(" \t, sum(a.전일_출고량) as 전일_출고량 ");
            stringBuilder.AppendLine(" into #Tmp창고이동계_전일_창고상품 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" \tselect x.입고창고코드 as 창고코드 ");
            stringBuilder.AppendLine(" \t\t, y.상품코드 ");
            stringBuilder.AppendLine(" \t\t, sum(y.총수량) as 전일_입고량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 전일_출고량 ");
            stringBuilder.AppendLine(" \tfrom T_창고이동 x ");
            stringBuilder.AppendLine(" \t\tinner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine(" \twhere x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine(" \t\tand x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t\tand x.수불일자 < @p_day1 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.입고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \tgroup by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" \tunion all ");
            stringBuilder.AppendLine(" \tselect x.출고창고코드 as 창고코드 ");
            stringBuilder.AppendLine(" \t\t, y.상품코드 ");
            stringBuilder.AppendLine(" \t\t, 0 as 전일_입고량 ");
            stringBuilder.AppendLine(" \t\t, sum(y.총수량) as 전일_출고량 ");
            stringBuilder.AppendLine(" \tfrom T_창고이동 x ");
            stringBuilder.AppendLine(" \t\tinner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine(" \twhere x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine(" \t\tand x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t\tand x.수불일자 < @p_day1 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.출고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \tgroup by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" ) a ");
            stringBuilder.AppendLine(" group by a.창고코드, a.상품코드 ");
            stringBuilder.AppendLine(" select a.창고코드 ");
            stringBuilder.AppendLine(" \t, a.상품코드 ");
            stringBuilder.AppendLine(" \t, sum(a.기간매입_총수량)\t\t\tas 기간매입_총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간매입_서비스총수량)\t\tas 기간매입_서비스총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간매출_총수량)\t\t\tas 기간매출_총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간매출_서비스총수량)\t\tas 기간매출_서비스총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간판매_총수량)\t\t\tas 기간판매_총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간판매_서비스총수량)\t\tas 기간판매_서비스총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간정상반품_총수량)\t\tas 기간정상반품_총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간정상반품_서비스총수량)\tas 기간정상반품_서비스총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간불량반품_총수량)\t\tas 기간불량반품_총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간불량반품_서비스총수량)\tas 기간불량반품_서비스총수량 ");
            stringBuilder.AppendLine(" into #Tmp매입매출계_기간_창고상품 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" \tselect x.창고코드 ");
            stringBuilder.AppendLine(" \t\t, y.상품코드 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매입구분 = '1' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매입구분 = '2' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매입구분 = '3' then -1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매입구분 = '4' then -1  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.총수량) as 기간매입_총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매입구분 = '1' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매입구분 = '2' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매입구분 = '3' then -1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매입구분 = '4' then -1  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.서비스총수량) as 기간매입_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간매출_총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간매출_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간판매_총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간판매_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간정상반품_총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간정상반품_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간불량반품_총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간불량반품_서비스총수량 ");
            stringBuilder.AppendLine(" \tfrom T_매입 x ");
            stringBuilder.AppendLine(" \t\tinner join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine(" \twhere x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine(" \t\tand x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t\tand x.매입일자 >= @p_day1 ");
            stringBuilder.AppendLine(" \t\tand x.매입일자 <= @p_day2 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \tgroup by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" \tunion all ");
            stringBuilder.AppendLine(" \tselect x.창고코드 ");
            stringBuilder.AppendLine(" \t\t, y.상품코드 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간매입_총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간매입_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then -1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.총수량) as 기간매출_총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then -1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.서비스총수량) as 기간매출_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.총수량) as 기간판매_총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.서비스총수량) as 기간판매_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.총수량) as 기간정상반품_총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.서비스총수량) as 기간정상반품_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.총수량) as 기간불량반품_총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.서비스총수량) as 기간불량반품_서비스총수량 ");
            stringBuilder.AppendLine(" \tfrom T_매출 x ");
            stringBuilder.AppendLine(" \t\tinner join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine(" \twhere x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine(" \t\tand x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t\tand x.매출일자 >= @p_day1 ");
            stringBuilder.AppendLine(" \t\tand x.매출일자 <= @p_day2 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \tgroup by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" ) a ");
            stringBuilder.AppendLine(" group by a.창고코드, a.상품코드 ");
            stringBuilder.AppendLine(" select a.창고코드 ");
            stringBuilder.AppendLine(" \t, a.상품코드 ");
            stringBuilder.AppendLine(" \t, sum(a.기간_입고량) as 기간_입고량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간_출고량) as 기간_출고량 ");
            stringBuilder.AppendLine(" into #Tmp창고이동계_기간_창고상품 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" \tselect x.입고창고코드 as 창고코드 ");
            stringBuilder.AppendLine(" \t\t, y.상품코드 ");
            stringBuilder.AppendLine(" \t\t, sum(y.총수량) as 기간_입고량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간_출고량 ");
            stringBuilder.AppendLine(" \tfrom T_창고이동 x ");
            stringBuilder.AppendLine(" \t\tinner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine(" \twhere x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine(" \t\tand x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t\tand x.수불일자 >= @p_day1 ");
            stringBuilder.AppendLine(" \t\tand x.수불일자 <= @p_day2 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.입고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \tgroup by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" \tunion all ");
            stringBuilder.AppendLine(" \tselect x.출고창고코드 ");
            stringBuilder.AppendLine(" \t\t, y.상품코드 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간_입고량 ");
            stringBuilder.AppendLine(" \t\t, sum(y.총수량) as 기간_출고량 ");
            stringBuilder.AppendLine(" \tfrom T_창고이동 x ");
            stringBuilder.AppendLine(" \t\tinner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine(" \twhere x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine(" \t\tand x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t\tand x.수불일자 >= @p_day1 ");
            stringBuilder.AppendLine(" \t\tand x.수불일자 <= @p_day2 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.출고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \tgroup by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" ) a ");
            stringBuilder.AppendLine(" group by a.창고코드, a.상품코드 ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     a.*  ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , a.전일재고 as 전일재고_박스 ");
                stringBuilder.AppendLine("     , 0 as 전일재고_중간 ");
                stringBuilder.AppendLine("     , 0 as 전일재고_낱개 ");
                stringBuilder.AppendLine("     , a.입고합계 as 입고합계_박스 ");
                stringBuilder.AppendLine("     , 0 as 입고합계_중간 ");
                stringBuilder.AppendLine("     , 0 as 입고합계_낱개 ");
                stringBuilder.AppendLine("     , a.출고합계 as 출고합계_박스 ");
                stringBuilder.AppendLine("     , 0 as 출고합계_중간 ");
                stringBuilder.AppendLine("     , 0 as 출고합계_낱개 ");
                stringBuilder.AppendLine("     , a.불량반품합계 as 불량반품합계_박스 ");
                stringBuilder.AppendLine("     , 0 as 불량반품합계_중간 ");
                stringBuilder.AppendLine("     , 0 as 불량반품합계_낱개 ");
                stringBuilder.AppendLine("     , a.현재고 as 현재고_박스 ");
                stringBuilder.AppendLine("     , 0 as 현재고_중간 ");
                stringBuilder.AppendLine("     , 0 as 현재고_낱개 ");
            }
            else
            {
                stringBuilder.AppendLine("     , '0' as 전일재고_박스 ");
                stringBuilder.AppendLine("     , '0' as 전일재고_중간 ");
                stringBuilder.AppendLine("     , '0' as 전일재고_낱개 ");
                stringBuilder.AppendLine("     , '0' as 입고합계_박스 ");
                stringBuilder.AppendLine("     , '0' as 입고합계_중간 ");
                stringBuilder.AppendLine("     , '0' as 입고합계_낱개 ");
                stringBuilder.AppendLine("     , '0' as 출고합계_박스 ");
                stringBuilder.AppendLine("     , '0' as 출고합계_중간 ");
                stringBuilder.AppendLine("     , '0' as 출고합계_낱개 ");
                stringBuilder.AppendLine("     , '0' as 불량반품합계_박스 ");
                stringBuilder.AppendLine("     , '0' as 불량반품합계_중간 ");
                stringBuilder.AppendLine("     , '0' as 불량반품합계_낱개 ");
                stringBuilder.AppendLine("     , '0' as 현재고_박스 ");
                stringBuilder.AppendLine("     , '0' as 현재고_중간 ");
                stringBuilder.AppendLine("     , '0' as 현재고_낱개 ");
            }
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("\t    a.코드 as 창고코드 ");
            stringBuilder.AppendLine("\t    , a.명칭 as 창고명 ");
            stringBuilder.AppendLine("\t    , b.정렬순서 ");
            stringBuilder.AppendLine("\t    , b.상품코드 ");
            stringBuilder.AppendLine("\t    , b.상품명 ");
            stringBuilder.AppendLine("\t    , b.규격 ");
            stringBuilder.AppendLine("\t    , b.상품유형코드 ");
            stringBuilder.AppendLine("\t    , b.제조사코드 ");
            stringBuilder.AppendLine("\t    , c.명칭 as 유형명 ");
            stringBuilder.AppendLine("\t    , d.명칭 as 제조사명 ");
            stringBuilder.AppendLine("\t    , isnull(b.입수수량, 0) as 입수수량 ");
            stringBuilder.AppendLine("\t    , isnull(b.중간입수수량, 0) as 중간입수수량 ");
            stringBuilder.AppendLine("\t    , isnull(b.박스입고단가, 0) as 박스입고단가 ");
            stringBuilder.AppendLine("\t    , isnull(b.낱개입고단가, 0) as 낱개입고단가 ");
            stringBuilder.AppendLine("\t    , convert(numeric(18,2), isnull(e.초기재고, 0) + isnull(q.전일매입_총수량, 0) + isnull(q.전일매입_서비스총수량, 0) ");
            stringBuilder.AppendLine("\t        - isnull(q.전일매출_총수량, 0) - isnull(q.전일매출_서비스총수량, 0) ");
            stringBuilder.AppendLine("\t        + isnull(s.전일_입고량, 0) - isnull(s.전일_출고량, 0) ) as 전일재고 ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("\t    , convert(numeric(18,2), (isnull(e.초기재고, 0) + isnull(q.전일매입_총수량, 0) + isnull(q.전일매입_서비스총수량, 0) ");
                stringBuilder.AppendLine("\t        - isnull(q.전일매출_총수량, 0) - isnull(q.전일매출_서비스총수량, 0) ");
                stringBuilder.AppendLine("\t        + isnull(s.전일_입고량, 0) - isnull(s.전일_출고량, 0)) * isnull(b.박스입고단가, 0) ) as 전일재고금액 ");
            }
            else
            {
                stringBuilder.AppendLine("\t    , convert(numeric(18,2), (isnull(e.초기재고, 0) + isnull(q.전일매입_총수량, 0) + isnull(q.전일매입_서비스총수량, 0) ");
                stringBuilder.AppendLine("\t        - isnull(q.전일매출_총수량, 0) - isnull(q.전일매출_서비스총수량, 0) ");
                stringBuilder.AppendLine("\t        + isnull(s.전일_입고량, 0) - isnull(s.전일_출고량, 0)) * isnull(b.낱개입고단가, 0) ) as 전일재고금액 ");
            }
            stringBuilder.AppendLine("\t    , isnull(qq.기간매입_총수량, 0) + isnull(qq.기간매입_서비스총수량, 0) + isnull(ss.기간_입고량, 0) as 입고합계 ");
            stringBuilder.AppendLine("\t    , isnull(qq.기간매출_총수량, 0) + isnull(qq.기간매출_서비스총수량, 0) + isnull(ss.기간_출고량, 0) as 출고합계 ");
            stringBuilder.AppendLine("\t    , isnull(qq.기간불량반품_총수량, 0) + isnull(qq.기간불량반품_서비스총수량, 0) as 불량반품합계 ");
            stringBuilder.AppendLine("\t    , convert(numeric(18,2), isnull(e.초기재고, 0) + isnull(q.전일매입_총수량, 0) + isnull(q.전일매입_서비스총수량, 0) ");
            stringBuilder.AppendLine("\t        - isnull(q.전일매출_총수량, 0) - isnull(q.전일매출_서비스총수량, 0) ");
            stringBuilder.AppendLine("\t        + isnull(s.전일_입고량, 0) - isnull(s.전일_출고량, 0) ");
            stringBuilder.AppendLine("\t        + isnull(qq.기간매입_총수량, 0) + isnull(qq.기간매입_서비스총수량, 0) + isnull(ss.기간_입고량, 0) ");
            stringBuilder.AppendLine("\t        - isnull(qq.기간매출_총수량, 0) - isnull(qq.기간매출_서비스총수량, 0) - isnull(ss.기간_출고량, 0) ) as 현재고 ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("\t    , convert(numeric(18,2), (isnull(e.초기재고, 0) + isnull(q.전일매입_총수량, 0) + isnull(q.전일매입_서비스총수량, 0) ");
                stringBuilder.AppendLine("\t        - isnull(q.전일매출_총수량, 0) - isnull(q.전일매출_서비스총수량, 0) ");
                stringBuilder.AppendLine("\t        + isnull(s.전일_입고량, 0) - isnull(s.전일_출고량, 0) ");
                stringBuilder.AppendLine("\t        + isnull(qq.기간매입_총수량, 0) + isnull(qq.기간매입_서비스총수량, 0) + isnull(ss.기간_입고량, 0) ");
                stringBuilder.AppendLine("\t        - isnull(qq.기간매출_총수량, 0) - isnull(qq.기간매출_서비스총수량, 0) - isnull(ss.기간_출고량, 0)) * isnull(b.박스입고단가, 0) ) as 현재고금액 ");
            }
            else
            {
                stringBuilder.AppendLine("\t    , convert(numeric(18,2), (isnull(e.초기재고, 0) + isnull(q.전일매입_총수량, 0) + isnull(q.전일매입_서비스총수량, 0) ");
                stringBuilder.AppendLine("\t        - isnull(q.전일매출_총수량, 0) - isnull(q.전일매출_서비스총수량, 0) ");
                stringBuilder.AppendLine("\t        + isnull(s.전일_입고량, 0) - isnull(s.전일_출고량, 0) ");
                stringBuilder.AppendLine("\t        + isnull(qq.기간매입_총수량, 0) + isnull(qq.기간매입_서비스총수량, 0) + isnull(ss.기간_입고량, 0) ");
                stringBuilder.AppendLine("\t        - isnull(qq.기간매출_총수량, 0) - isnull(qq.기간매출_서비스총수량, 0) - isnull(ss.기간_출고량, 0)) * isnull(b.낱개입고단가, 0) ) as 현재고금액 ");
            }
            stringBuilder.AppendLine(" from P_창고 a ");
            stringBuilder.AppendLine("\t    left outer join T_상품정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and isnull(b.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("\t    left outer join P_상품유형 c on c.사업자번호 = b.사업자번호 and c.지점코드 = '0' and c.코드 = b.상품유형코드 ");
            stringBuilder.AppendLine("\t    left outer join P_제조사 d on d.사업자번호 = b.사업자번호 and d.지점코드 = '0' and d.코드 = b.제조사코드 ");
            stringBuilder.AppendLine("\t    left outer join T_상품창고별재고 e on e.사업자번호 = b.사업자번호 and e.지점코드 = b.지점코드 and e.상품코드 = b.상품코드 and e.창고코드 = a.코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp매입매출계_전일_창고상품 q on q.창고코드 = a.코드 and q.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp창고이동계_전일_창고상품 s on s.창고코드 = a.코드 and s.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp매입매출계_기간_창고상품 qq on qq.창고코드 = a.코드 and qq.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp창고이동계_기간_창고상품 ss on ss.창고코드 = a.코드 and ss.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("\t    and a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("\t    and a.코드 = '" + sWare + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("\t    and b.상품코드 = '" + sProd + "' ");
            if (sFact != "")
                stringBuilder.AppendLine("\t    and b.제조사코드 = '" + sFact + "' ");
            if (sType != "")
                stringBuilder.AppendLine("\t    and b.상품유형코드 = '" + sType + "' ");
            stringBuilder.AppendLine(" ) a ");
            stringBuilder.AppendLine(" where 1=1 ");
            if (bNoZero)
                stringBuilder.AppendLine("\t    and a.현재고 <> 0 ");
            if (bOrder)
                stringBuilder.AppendLine(" order by a.창고코드 asc, a.정렬순서 asc, a.상품코드 asc ");
            else
                stringBuilder.AppendLine(" order by a.창고코드 asc, a.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_계산서이관_대상(
          string sDay1,
          string sDay2,
          string sCust,
          string sFlg,
          string sNotax,
          string sManNo,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("\tselect z.거래처코드, z.거래처명, z.대표자명, z.거래처사업자번호, z.부가세코드, max(z.과세구분) as 과세구분, max(z.발행율) as 발행율 ");
            stringBuilder.AppendLine("\t\t, sum(z.포함금액) as 매출금액계 ");
            stringBuilder.AppendLine("\t\t, round(sum(z.금액) * max(z.발행율) / 100, 0) as 금액 ");
            stringBuilder.AppendLine("\t\t, round(sum(z.공급가액) * max(z.발행율) / 100, 0) as 공급가액 ");
            stringBuilder.AppendLine("\t\t, round(sum(z.부가세액) * max(z.발행율) / 100, 0) as 부가세액 ");
            stringBuilder.AppendLine("\t\t, round(sum(z.포함금액) * max(z.발행율) / 100, 0) as 포함금액 ");
            stringBuilder.AppendLine("\t\t, 0 as PRT공급가액 ");
            stringBuilder.AppendLine("\t\t, 0 as PRT부가세액 ");
            stringBuilder.AppendLine("\t\t, 0 as PRT포함금액 ");
            stringBuilder.AppendLine("\t\t, isnull(max(m.카드수금액), 0) as 카드수금액 ");
            stringBuilder.AppendLine("\t\t, count(*) as 건수 ");
            stringBuilder.AppendLine("     , case when isnull(z.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(z.거래처사업자번호, 1, 3) + '-' + substring(z.거래처사업자번호, 4, 2) + '-' + substring(z.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("\tfrom ( ");
            stringBuilder.AppendLine("\t\tselect ");
            stringBuilder.AppendLine("\t\t\ta.매출일자 ");
            stringBuilder.AppendLine("\t\t\t, a.전표번호 ");
            stringBuilder.AppendLine("\t\t\t, a.거래처코드 ");
            stringBuilder.AppendLine("\t\t\t, a.부가세코드 ");
            stringBuilder.AppendLine("\t\t\t, c.거래처명 ");
            stringBuilder.AppendLine("\t\t\t, c.대표자명 ");
            stringBuilder.AppendLine("\t\t\t, c.거래처사업자번호 ");
            stringBuilder.AppendLine("\t\t\t, c.계산서여부 ");
            stringBuilder.AppendLine("\t\t\t, isnull(c.발행율, 0) as 발행율 ");
            stringBuilder.AppendLine("\t\t\t, b.항목순번 ");
            stringBuilder.AppendLine("\t\t\t, b.상품코드 ");
            stringBuilder.AppendLine("\t\t\t, p.상품명 ");
            stringBuilder.AppendLine("\t\t\t, p.규격 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.총수량 as 총수량 ");
            stringBuilder.AppendLine("\t\t\t, b.박스단가 ");
            stringBuilder.AppendLine("\t\t\t, b.낱개단가 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.금액 as 금액 ");
            stringBuilder.AppendLine("         , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             (case when b.과세구분 = '2' then b.금액 ");
            stringBuilder.AppendLine("             else ");
            stringBuilder.AppendLine("                 (case when a.부가세코드 = '1' then round(b.금액 / 1.1, 0) ");
            stringBuilder.AppendLine("                 else b.금액 end) ");
            stringBuilder.AppendLine("             end) as 공급가액 ");
            stringBuilder.AppendLine("         , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("             else ");
            stringBuilder.AppendLine("                 (case when a.부가세코드 = '1' then b.금액 - round(b.금액 / 1.1, 0) ");
            stringBuilder.AppendLine("                 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("             end) as 부가세액 ");
            stringBuilder.AppendLine("         , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             (case when b.과세구분 = '2' then b.금액 ");
            stringBuilder.AppendLine("             else ");
            stringBuilder.AppendLine("                 (case when a.부가세코드 = '1' then b.금액 ");
            stringBuilder.AppendLine("                 else b.금액 + round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("             end) as 포함금액 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("\t\t\t, b.과세구분 ");
            stringBuilder.AppendLine("\t\t\t, e.명칭 as 과세구분명 ");
            stringBuilder.AppendLine("\t\t\t, b.매출구분 ");
            stringBuilder.AppendLine("\t\t\t, d.명칭 as 매출구분명 ");
            stringBuilder.AppendLine("\t\tfrom T_매출 a ");
            stringBuilder.AppendLine("\t\t\tinner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("\t\t\tinner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("\t        inner join T_상품정보 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t\t\tleft outer join C_매출구분 d on d.코드 = b.매출구분 ");
            stringBuilder.AppendLine("\t\t\tleft outer join C_과세구분 e on e.코드 = b.과세구분 ");
            stringBuilder.AppendLine("\t\t\tleft outer join T_계산서매출항목 tx on tx.사업자번호 = b.사업자번호 and tx.지점코드 = b.지점코드 and tx.매출일자 = b.매출일자 and tx.전표번호 = b.전표번호 and tx.항목순번 = b.항목순번 ");
            stringBuilder.AppendLine("\t\twhere 1=1 ");
            stringBuilder.AppendLine("\t\t\tand a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\tand a.매출일자 >= @p_day1 ");
            stringBuilder.AppendLine("\t\t\tand a.매출일자 <= @p_day2 ");
            stringBuilder.AppendLine("\t\t\tand c.계산서여부 = 'Y' ");
            if (sCust != "")
                stringBuilder.AppendLine("\t\t\tand a.거래처코드 = '" + sCust + "' ");
            if (sManNo != "")
                stringBuilder.AppendLine("\t\t\tand c.사원번호 = '" + sManNo + "' ");
            if (sFlg == "1")
                stringBuilder.AppendLine("\t\t\tand isnull(tx.계산서일자, '') = '' ");
            if (sFlg == "2")
                stringBuilder.AppendLine("\t\t\tand isnull(tx.계산서일자, '') <> '' ");
            stringBuilder.AppendLine("\t\t\tand b.과세구분 = '" + sNotax + "' ");
            stringBuilder.AppendLine("\t) z ");
            stringBuilder.AppendLine(" left outer join ( select 사업자번호 ");
            stringBuilder.AppendLine("         , 거래처코드 ");
            stringBuilder.AppendLine("         , sum(isnull(수금액, 0)) as 카드수금액 ");
            stringBuilder.AppendLine("         , sum(isnull(할인액, 0)) as 할인액 ");
            stringBuilder.AppendLine("     from T_수금 ");
            stringBuilder.AppendLine("     where 사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("         and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("         and 수금구분 = '3'  ");
            stringBuilder.AppendLine("         and 수금일자 >= @p_day1  ");
            stringBuilder.AppendLine("         and 수금일자 <= @p_day2  ");
            if (sCust != "")
                stringBuilder.AppendLine("         and 거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine("     group by 사업자번호, 거래처코드 ");
            stringBuilder.AppendLine(" ) m on m.사업자번호 = '" + Common.p_strCompID + "' and m.거래처코드 = z.거래처코드   ");
            stringBuilder.AppendLine("\tgroup by z.거래처코드, z.거래처명, z.대표자명, z.거래처사업자번호, z.부가세코드 ");
            stringBuilder.AppendLine("\torder by z.거래처코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_계산서이관_대상_전체(
          string sDay1,
          string sDay2,
          string sCust,
          string sFlg,
          string sManNo,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("\tselect z.거래처코드, z.과세구분, z.과세구분명, z.거래처명, z.대표자명, z.거래처사업자번호, z.부가세코드, max(z.발행율) as 발행율 ");
            stringBuilder.AppendLine("\t\t, sum(z.포함금액) as 매출금액계 ");
            stringBuilder.AppendLine("\t\t, round(sum(z.금액) * max(z.발행율) / 100, 0) as 금액 ");
            stringBuilder.AppendLine("\t\t, round(sum(z.공급가액) * max(z.발행율) / 100, 0) as 공급가액 ");
            stringBuilder.AppendLine("\t\t, round(sum(z.부가세액) * max(z.발행율) / 100, 0) as 부가세액 ");
            stringBuilder.AppendLine("\t\t, round(sum(z.포함금액) * max(z.발행율) / 100, 0) as 포함금액 ");
            stringBuilder.AppendLine("\t\t, 0 as PRT공급가액 ");
            stringBuilder.AppendLine("\t\t, 0 as PRT부가세액 ");
            stringBuilder.AppendLine("\t\t, 0 as PRT포함금액 ");
            stringBuilder.AppendLine("\t\t, isnull(max(m.카드수금액), 0) as 카드수금액 ");
            stringBuilder.AppendLine("\t\t, 0 as 카드적용액 ");
            stringBuilder.AppendLine("\t\t, count(*) as 건수 ");
            stringBuilder.AppendLine("     , case when isnull(z.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(z.거래처사업자번호, 1, 3) + '-' + substring(z.거래처사업자번호, 4, 2) + '-' + substring(z.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("\tfrom ( ");
            stringBuilder.AppendLine("\t\tselect ");
            stringBuilder.AppendLine("\t\t\ta.매출일자 ");
            stringBuilder.AppendLine("\t\t\t, a.전표번호 ");
            stringBuilder.AppendLine("\t\t\t, a.거래처코드 ");
            stringBuilder.AppendLine("\t\t\t, a.부가세코드 ");
            stringBuilder.AppendLine("\t\t\t, c.거래처명 ");
            stringBuilder.AppendLine("\t\t\t, c.대표자명 ");
            stringBuilder.AppendLine("\t\t\t, c.거래처사업자번호 ");
            stringBuilder.AppendLine("\t\t\t, c.계산서여부 ");
            stringBuilder.AppendLine("\t\t\t, isnull(c.발행율, 0) as 발행율 ");
            stringBuilder.AppendLine("\t\t\t, b.항목순번 ");
            stringBuilder.AppendLine("\t\t\t, b.상품코드 ");
            stringBuilder.AppendLine("\t\t\t, p.상품명 ");
            stringBuilder.AppendLine("\t\t\t, p.규격 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.총수량 as 총수량 ");
            stringBuilder.AppendLine("\t\t\t, b.박스단가 ");
            stringBuilder.AppendLine("\t\t\t, b.낱개단가 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.금액 as 금액 ");
            stringBuilder.AppendLine("         , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             (case when b.과세구분 = '2' then b.금액 ");
            stringBuilder.AppendLine("             else ");
            stringBuilder.AppendLine("                 (case when a.부가세코드 = '1' then round(b.금액 / 1.1, 0) ");
            stringBuilder.AppendLine("                 else b.금액 end) ");
            stringBuilder.AppendLine("             end) as 공급가액 ");
            stringBuilder.AppendLine("         , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("             else ");
            stringBuilder.AppendLine("                 (case when a.부가세코드 = '1' then b.금액 - round(b.금액 / 1.1, 0) ");
            stringBuilder.AppendLine("                 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("             end) as 부가세액 ");
            stringBuilder.AppendLine("         , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             (case when b.과세구분 = '2' then b.금액 ");
            stringBuilder.AppendLine("             else ");
            stringBuilder.AppendLine("                 (case when a.부가세코드 = '1' then b.금액 ");
            stringBuilder.AppendLine("                 else b.금액 + round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("             end) as 포함금액 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("\t\t\t, b.과세구분 ");
            stringBuilder.AppendLine("\t\t\t, e.명칭 as 과세구분명 ");
            stringBuilder.AppendLine("\t\t\t, b.매출구분 ");
            stringBuilder.AppendLine("\t\t\t, d.명칭 as 매출구분명 ");
            stringBuilder.AppendLine("\t\tfrom T_매출 a ");
            stringBuilder.AppendLine("\t\t\tinner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("\t\t\tinner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("\t        inner join T_상품정보 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t\t\tleft outer join C_매출구분 d on d.코드 = b.매출구분 ");
            stringBuilder.AppendLine("\t\t\tleft outer join C_과세구분 e on e.코드 = b.과세구분 ");
            stringBuilder.AppendLine("\t\t\tleft outer join T_계산서매출항목 tx on tx.사업자번호 = b.사업자번호 and tx.지점코드 = b.지점코드 and tx.매출일자 = b.매출일자 and tx.전표번호 = b.전표번호 and tx.항목순번 = b.항목순번 ");
            stringBuilder.AppendLine("\t\twhere 1=1 ");
            stringBuilder.AppendLine("\t\t\tand a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\tand a.매출일자 >= @p_day1 ");
            stringBuilder.AppendLine("\t\t\tand a.매출일자 <= @p_day2 ");
            stringBuilder.AppendLine("\t\t\tand c.계산서여부 = 'Y' ");
            if (sCust != "")
                stringBuilder.AppendLine("\t\t\tand a.거래처코드 = '" + sCust + "' ");
            if (sManNo != "")
                stringBuilder.AppendLine("\t\t\tand c.사원번호 = '" + sManNo + "' ");
            if (sFlg == "1")
                stringBuilder.AppendLine("\t\t\tand isnull(tx.계산서일자, '') = '' ");
            if (sFlg == "2")
                stringBuilder.AppendLine("\t\t\tand isnull(tx.계산서일자, '') <> '' ");
            stringBuilder.AppendLine("\t) z ");
            stringBuilder.AppendLine(" left outer join ( select 사업자번호 ");
            stringBuilder.AppendLine("         , 거래처코드 ");
            stringBuilder.AppendLine("         , sum(isnull(수금액, 0)) as 카드수금액 ");
            stringBuilder.AppendLine("         , sum(isnull(할인액, 0)) as 할인액 ");
            stringBuilder.AppendLine("     from T_수금 ");
            stringBuilder.AppendLine("     where 사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("         and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("         and 수금구분 = '3'  ");
            stringBuilder.AppendLine("         and 수금일자 >= @p_day1  ");
            stringBuilder.AppendLine("         and 수금일자 <= @p_day2  ");
            if (sCust != "")
                stringBuilder.AppendLine("         and 거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine("     group by 사업자번호, 거래처코드 ");
            stringBuilder.AppendLine(" ) m on m.사업자번호 = '" + Common.p_strCompID + "' and m.거래처코드 = z.거래처코드   ");
            stringBuilder.AppendLine("\tgroup by z.거래처코드, z.과세구분, z.과세구분명,z.거래처명, z.대표자명, z.거래처사업자번호, z.부가세코드 ");
            stringBuilder.AppendLine("\torder by z.거래처코드 asc, z.과세구분 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_계산서이관_대상_항목(
          string sDay1,
          string sDay2,
          bool chkOnly,
          string sCust,
          string sMan,
          string sFlg,
          string sVat,
          string sNotax,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("\t\tselect ");
            stringBuilder.AppendLine("\t\t\ta.매출일자 ");
            stringBuilder.AppendLine("\t\t\t, a.전표번호 ");
            stringBuilder.AppendLine("\t\t\t, a.거래처코드 ");
            stringBuilder.AppendLine("\t\t\t, a.부가세코드 ");
            stringBuilder.AppendLine("\t\t\t, c.거래처명 ");
            stringBuilder.AppendLine("\t\t\t, c.사원번호 ");
            stringBuilder.AppendLine("\t\t\t, u.사용자명 ");
            stringBuilder.AppendLine("\t\t\t, c.대표자명 ");
            stringBuilder.AppendLine("\t\t\t, c.거래처사업자번호 ");
            stringBuilder.AppendLine("\t\t\t, c.계산서여부 ");
            stringBuilder.AppendLine("\t\t\t, b.항목순번 ");
            stringBuilder.AppendLine("\t\t\t, b.상품코드 ");
            stringBuilder.AppendLine("\t\t\t, p.상품명 ");
            stringBuilder.AppendLine("\t\t\t, p.규격 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.총수량 as 총수량 ");
            stringBuilder.AppendLine("\t\t\t, b.박스단가 ");
            stringBuilder.AppendLine("\t\t\t, b.낱개단가 ");
            stringBuilder.AppendLine("\t\t\t, convert(float, floor(b.박스단가 * 100) / 100) as V박스단가");
            stringBuilder.AppendLine("\t\t\t, convert(float, floor(b.낱개단가 * 100) / 100) as V낱개단가");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.금액 as 금액 ");
            stringBuilder.AppendLine("         , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             (case when b.과세구분 = '2' then b.금액 ");
            stringBuilder.AppendLine("             else ");
            stringBuilder.AppendLine("                 (case when a.부가세코드 = '1' then round(b.금액 / 1.1, 0) ");
            stringBuilder.AppendLine("                 else b.금액 end) ");
            stringBuilder.AppendLine("             end) as 공급가액 ");
            stringBuilder.AppendLine("         , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("             else ");
            stringBuilder.AppendLine("                 (case when a.부가세코드 = '1' then b.금액 - round(b.금액 / 1.1, 0) ");
            stringBuilder.AppendLine("                 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("             end) as 부가세액 ");
            stringBuilder.AppendLine("         , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             (case when b.과세구분 = '2' then b.금액 ");
            stringBuilder.AppendLine("             else ");
            stringBuilder.AppendLine("                 (case when a.부가세코드 = '1' then b.금액 ");
            stringBuilder.AppendLine("                 else b.금액 + round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("             end) as 포함금액 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("\t\t\t, b.과세구분 ");
            stringBuilder.AppendLine("\t\t\t, e.명칭 as 과세구분명 ");
            stringBuilder.AppendLine("\t\t\t, b.매출구분 ");
            stringBuilder.AppendLine("\t\t\t, d.명칭 as 매출구분명 ");
            stringBuilder.AppendLine("\t\t\t, p.입수수량 ");
            stringBuilder.AppendLine("\t\t\t, p.중간입수수량 ");
            stringBuilder.AppendLine("\t\t\t, 0 as 단가 ");
            stringBuilder.AppendLine("\t\t\t, 0 as 서비스 ");
            stringBuilder.AppendLine("         , case when b.과세구분 = '2' then '면세' ");
            stringBuilder.AppendLine("             else v.명칭 end as 부가세명 ");
            stringBuilder.AppendLine("\t\tfrom T_매출 a ");
            stringBuilder.AppendLine("\t\t\tinner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("\t\t\tinner join T_사용자정보 u on u.사업자번호 = c.사업자번호 and u.지점코드 = c.지점코드 and u.사원번호 = c.사원번호 ");
            stringBuilder.AppendLine("\t\t\tinner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("\t        left outer join T_상품정보 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t\t\tleft outer join C_매출구분 d on d.코드 = b.매출구분 ");
            stringBuilder.AppendLine("\t\t\tleft outer join C_과세구분 e on e.코드 = b.과세구분 ");
            stringBuilder.AppendLine("\t\t\tleft outer join C_부가세코드 v on v.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("\t\t\tleft outer join T_계산서매출항목 tx on tx.사업자번호 = b.사업자번호 and tx.지점코드 = b.지점코드 and tx.매출일자 = b.매출일자 and tx.전표번호 = b.전표번호 and tx.항목순번 = b.항목순번 ");
            stringBuilder.AppendLine("\t\twhere 1=1 ");
            stringBuilder.AppendLine("\t\t\tand a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\tand a.매출일자 >= @p_day1 ");
            stringBuilder.AppendLine("\t\t\tand a.매출일자 <= @p_day2 ");
            if (chkOnly)
                stringBuilder.AppendLine("\t\t\tand c.계산서여부 = 'Y' ");
            if (sCust != "")
                stringBuilder.AppendLine("\t\t\tand a.거래처코드 = '" + sCust + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            if (sFlg == "1")
                stringBuilder.AppendLine("\t\t\tand isnull(tx.계산서일자, '') = '' ");
            if (sFlg == "2")
                stringBuilder.AppendLine("\t\t\tand isnull(tx.계산서일자, '') <> '' ");
            if (sNotax != "")
                stringBuilder.AppendLine("\t\t\tand b.과세구분 = '" + sNotax + "' ");
            if (sVat != "")
                stringBuilder.AppendLine("\t\t\tand a.부가세코드 = '" + sVat + "' ");
            stringBuilder.AppendLine("\torder by a.매출일자 asc, a.전표번호 asc, b.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_계산서이관_대상_항목_계산서여부무시(
          string sDay1,
          string sDay2,
          string sCust,
          string sMan,
          string sFlg,
          string sVat,
          string sNotax,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("\t\tselect ");
            stringBuilder.AppendLine("\t\t\ta.매출일자 ");
            stringBuilder.AppendLine("\t\t\t, a.전표번호 ");
            stringBuilder.AppendLine("\t\t\t, a.거래처코드 ");
            stringBuilder.AppendLine("\t\t\t, a.부가세코드 ");
            stringBuilder.AppendLine("\t\t\t, c.거래처명 ");
            stringBuilder.AppendLine("\t\t\t, c.사원번호 ");
            stringBuilder.AppendLine("\t\t\t, u.사용자명 ");
            stringBuilder.AppendLine("\t\t\t, c.대표자명 ");
            stringBuilder.AppendLine("\t\t\t, c.거래처사업자번호 ");
            stringBuilder.AppendLine("\t\t\t, c.계산서여부 ");
            stringBuilder.AppendLine("\t\t\t, b.항목순번 ");
            stringBuilder.AppendLine("\t\t\t, b.상품코드 ");
            stringBuilder.AppendLine("\t\t\t, p.상품명 ");
            stringBuilder.AppendLine("\t\t\t, p.규격 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.총수량 as 총수량 ");
            stringBuilder.AppendLine("\t\t\t, b.박스단가 ");
            stringBuilder.AppendLine("\t\t\t, b.낱개단가 ");
            stringBuilder.AppendLine("\t\t\t, convert(float, floor(b.박스단가 * 100) / 100) as V박스단가");
            stringBuilder.AppendLine("\t\t\t, convert(float, floor(b.낱개단가 * 100) / 100) as V낱개단가");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.금액 as 금액 ");
            stringBuilder.AppendLine("         , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             (case when b.과세구분 = '2' then b.금액 ");
            stringBuilder.AppendLine("             else ");
            stringBuilder.AppendLine("                 (case when a.부가세코드 = '1' then round(b.금액 / 1.1, 0) ");
            stringBuilder.AppendLine("                 else b.금액 end) ");
            stringBuilder.AppendLine("             end) as 공급가액 ");
            stringBuilder.AppendLine("         , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("             else ");
            stringBuilder.AppendLine("                 (case when a.부가세코드 = '1' then b.금액 - round(b.금액 / 1.1, 0) ");
            stringBuilder.AppendLine("                 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("             end) as 부가세액 ");
            stringBuilder.AppendLine("         , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             (case when b.과세구분 = '2' then b.금액 ");
            stringBuilder.AppendLine("             else ");
            stringBuilder.AppendLine("                 (case when a.부가세코드 = '1' then b.금액 ");
            stringBuilder.AppendLine("                 else b.금액 + round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("             end) as 포함금액 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("\t\t\t, (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("\t\t\t, b.과세구분 ");
            stringBuilder.AppendLine("\t\t\t, e.명칭 as 과세구분명 ");
            stringBuilder.AppendLine("\t\t\t, b.매출구분 ");
            stringBuilder.AppendLine("\t\t\t, d.명칭 as 매출구분명 ");
            stringBuilder.AppendLine("\t\t\t, p.입수수량 ");
            stringBuilder.AppendLine("\t\t\t, p.중간입수수량 ");
            stringBuilder.AppendLine("\t\t\t, 0 as 단가 ");
            stringBuilder.AppendLine("\t\t\t, 0 as 서비스 ");
            stringBuilder.AppendLine("\t\t\t, v.명칭 as 부가세명 ");
            stringBuilder.AppendLine("\t\tfrom T_매출 a ");
            stringBuilder.AppendLine("\t\t\tinner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("\t\t\tinner join T_사용자정보 u on u.사업자번호 = c.사업자번호 and u.지점코드 = c.지점코드 and u.사원번호 = c.사원번호 ");
            stringBuilder.AppendLine("\t\t\tinner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("\t        left outer join T_상품정보 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t\t\tleft outer join C_매출구분 d on d.코드 = b.매출구분 ");
            stringBuilder.AppendLine("\t\t\tleft outer join C_과세구분 e on e.코드 = b.과세구분 ");
            stringBuilder.AppendLine("\t\t\tleft outer join C_부가세코드 v on v.코드 = a.부가세코드 ");
            stringBuilder.AppendLine("\t\t\tleft outer join T_계산서매출항목 tx on tx.사업자번호 = b.사업자번호 and tx.지점코드 = b.지점코드 and tx.매출일자 = b.매출일자 and tx.전표번호 = b.전표번호 and tx.항목순번 = b.항목순번 ");
            stringBuilder.AppendLine("\t\twhere 1=1 ");
            stringBuilder.AppendLine("\t\t\tand a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\tand a.매출일자 >= @p_day1 ");
            stringBuilder.AppendLine("\t\t\tand a.매출일자 <= @p_day2 ");
            if (sCust != "")
                stringBuilder.AppendLine("\t\t\tand a.거래처코드 = '" + sCust + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            if (sFlg == "1")
                stringBuilder.AppendLine("\t\t\tand isnull(tx.계산서일자, '') = '' ");
            if (sFlg == "2")
                stringBuilder.AppendLine("\t\t\tand isnull(tx.계산서일자, '') <> '' ");
            if (sNotax != "")
                stringBuilder.AppendLine("\t\t\tand b.과세구분 = '" + sNotax + "' ");
            if (sVat != "")
                stringBuilder.AppendLine("\t\t\tand a.부가세코드 = '" + sVat + "' ");
            stringBuilder.AppendLine("\torder by a.매출일자 asc, a.전표번호 asc, b.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_계산서이관_대상_수금항목(
          string sDay1,
          string sDay2,
          string sCust,
          string sFlg,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("\t\tselect ");
            stringBuilder.AppendLine("\t\t\ta.수금일자 ");
            stringBuilder.AppendLine("\t\t\t, a.전표번호 ");
            stringBuilder.AppendLine("\t\t\t, a.수금구분 ");
            stringBuilder.AppendLine("\t\t\t, d.명칭 as 수금구분명 ");
            stringBuilder.AppendLine("\t\t\t, a.거래처코드 ");
            stringBuilder.AppendLine("\t\t\t, c.거래처명 ");
            stringBuilder.AppendLine("\t\t\t, c.대표자명 ");
            stringBuilder.AppendLine("\t\t\t, c.거래처사업자번호 ");
            stringBuilder.AppendLine("\t\t\t, c.부가세코드 ");
            stringBuilder.AppendLine("\t\t\t, c.계산서여부 ");
            stringBuilder.AppendLine("\t\t\t, a.수금액 ");
            stringBuilder.AppendLine("\t\t\t, a.할인액 ");
            stringBuilder.AppendLine("\t\t\t, a.합계금액 ");
            stringBuilder.AppendLine("\t\t\t, a.계좌순번 ");
            stringBuilder.AppendLine("\t\t\t, k.계좌번호 ");
            stringBuilder.AppendLine("\t\t\t, k.은행명 ");
            stringBuilder.AppendLine("\t\t\t, k.예금주 ");
            stringBuilder.AppendLine("\t\t\t, k.계좌별칭 ");
            stringBuilder.AppendLine("\t\t\t, a.어음번호 ");
            stringBuilder.AppendLine("\t\t\t, a.발행일자 ");
            stringBuilder.AppendLine("\t\t\t, a.만기일자 ");
            stringBuilder.AppendLine("\t\t\t, a.발행은행 ");
            stringBuilder.AppendLine("\t\t\t, a.발행인 ");
            stringBuilder.AppendLine("\t\t\t, a.배서인 ");
            stringBuilder.AppendLine("\t\t\t, a.지급처 ");
            stringBuilder.AppendLine("\t\t\t, a.비고 ");
            stringBuilder.AppendLine("\t\tfrom T_수금 a ");
            stringBuilder.AppendLine("\t\t\tinner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("         left outer join C_금전구분 d on d.코드 = a.수금구분 ");
            stringBuilder.AppendLine("\t\t\tleft outer join T_계산서매출수금항목 tx on tx.사업자번호 = a.사업자번호 and tx.지점코드 = a.지점코드 and tx.수금일자 = a.수금일자 and tx.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("\t\t\tleft outer join T_업체계좌 k on k.사업자번호 = a.사업자번호 and k.지점코드 = a.지점코드 and k.계좌순번 = a.계좌순번 ");
            stringBuilder.AppendLine("\t\twhere 1=1 ");
            stringBuilder.AppendLine("\t\t\tand a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\tand a.수금일자 >= @p_day1 ");
            stringBuilder.AppendLine("\t\t\tand a.수금일자 <= @p_day2 ");
            if (sCust != "")
                stringBuilder.AppendLine("\t\t\tand a.거래처코드 = '" + sCust + "' ");
            if (sFlg == "1")
                stringBuilder.AppendLine("\t\t\tand isnull(tx.계산서일자, '') = '' ");
            if (sFlg == "2")
                stringBuilder.AppendLine("\t\t\tand isnull(tx.계산서일자, '') <> '' ");
            stringBuilder.AppendLine("\torder by a.수금일자 asc, a.전표번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출계산서_현황_거래처별_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sMan,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.거래처코드 ");
            stringBuilder.AppendLine("     , 0 as 정렬순서 ");
            stringBuilder.AppendLine("     , a.거래처코드 as V거래처코드 ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , a.계산서일자 ");
            stringBuilder.AppendLine("     , a.계산서번호 ");
            stringBuilder.AppendLine("     , case when a.부가세구분 = '0' then '별도' ");
            stringBuilder.AppendLine("             when a.부가세구분 = '1' then '포함' ");
            stringBuilder.AppendLine("             when a.부가세구분 = '2' then '영세율' ");
            stringBuilder.AppendLine("             else '면세' end as 부가세구분명 ");
            stringBuilder.AppendLine("     , a.공급가합계 ");
            stringBuilder.AppendLine("     , a.부가세합계 ");
            stringBuilder.AppendLine("     , a.금액합계 ");
            stringBuilder.AppendLine(" from T_계산서매출 a ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select z.거래처코드 ");
            stringBuilder.AppendLine("     , 1 as 정렬순서 ");
            stringBuilder.AppendLine("     , '소계' as V거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , '' as 사용자명 ");
            stringBuilder.AppendLine("     , '' as 계산서일자 ");
            stringBuilder.AppendLine("     , NULL as 계산서번호 ");
            stringBuilder.AppendLine("     , '' as 부가세구분명 ");
            stringBuilder.AppendLine("     , sum(z.공급가합계) as 공급가합계 ");
            stringBuilder.AppendLine("     , sum(z.부가세합계) as 부가세합계 ");
            stringBuilder.AppendLine("     , sum(z.금액합계) as 금액합계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.*           ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.거래처사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine(" from T_계산서매출 a ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" group by z.거래처코드 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select 'ZZZZZZ' as 거래처코드 ");
            stringBuilder.AppendLine("     , 2 as 정렬순서 ");
            stringBuilder.AppendLine("     , '합계' as V거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , '' as 사용자명 ");
            stringBuilder.AppendLine("     , '' as 계산서일자 ");
            stringBuilder.AppendLine("     , NULL as 계산서번호 ");
            stringBuilder.AppendLine("     , '' as 부가세구분명 ");
            stringBuilder.AppendLine("     , sum(z.공급가합계) as 공급가합계 ");
            stringBuilder.AppendLine("     , sum(z.부가세합계) as 부가세합계 ");
            stringBuilder.AppendLine("     , sum(z.금액합계) as 금액합계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.*           ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.거래처사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine(" from T_계산서매출 a ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine(" order by x.거래처코드 asc, x.정렬순서 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출계산서_현황_일자별_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sMan,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.계산서일자 ");
            stringBuilder.AppendLine("     , a.계산서일자 as V계산서일자 ");
            stringBuilder.AppendLine("     , 0 as 정렬순서 ");
            stringBuilder.AppendLine("     , a.계산서번호 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , a.공급가합계 ");
            stringBuilder.AppendLine("     , a.부가세합계 ");
            stringBuilder.AppendLine("     , a.금액합계 ");
            stringBuilder.AppendLine(" from T_계산서매출 a ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select z.계산서일자 ");
            stringBuilder.AppendLine("     , '소계' as V계산서일자 ");
            stringBuilder.AppendLine("     , 1 as 정렬순서 ");
            stringBuilder.AppendLine("     , NULL as 계산서번호 ");
            stringBuilder.AppendLine("     , '' as 거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , '' as 사용자명 ");
            stringBuilder.AppendLine("     , sum(z.공급가합계) as 공급가합계 ");
            stringBuilder.AppendLine("     , sum(z.부가세합계) as 부가세합계 ");
            stringBuilder.AppendLine("     , sum(z.금액합계) as 금액합계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.*           ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.거래처사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine(" from T_계산서매출 a ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" group by z.계산서일자 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 계산서일자 ");
            stringBuilder.AppendLine("     , '합계' as V계산서일자 ");
            stringBuilder.AppendLine("     , 2 as 정렬순서 ");
            stringBuilder.AppendLine("     , NULL as 계산서번호 ");
            stringBuilder.AppendLine("     , '' as 거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , '' as 사용자명 ");
            stringBuilder.AppendLine("     , sum(z.공급가합계) as 공급가합계 ");
            stringBuilder.AppendLine("     , sum(z.부가세합계) as 부가세합계 ");
            stringBuilder.AppendLine("     , sum(z.금액합계) as 금액합계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.*           ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.거래처사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine(" from T_계산서매출 a ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and d.사원번호 = '" + sMan + "' ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine(" order by x.계산서일자 asc, x.정렬순서 asc, x.계산서번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매입계산서_현황_거래처별_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.거래처코드 ");
            stringBuilder.AppendLine("     , 0 as 정렬순서 ");
            stringBuilder.AppendLine("     , a.거래처코드 as V거래처코드 ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , a.계산서일자 ");
            stringBuilder.AppendLine("     , a.계산서번호 ");
            stringBuilder.AppendLine("     , b.공급가액 as 공급가합계 ");
            stringBuilder.AppendLine("     , b.부가세액 as 부가세합계 ");
            stringBuilder.AppendLine("     , b.포함금액 as 금액합계   ");
            stringBuilder.AppendLine(" from T_계산서매입 a ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 공급가액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) - round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 부가세액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_계산서매입 a ");
            stringBuilder.AppendLine("                             inner join T_계산서매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                             and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select z.거래처코드 ");
            stringBuilder.AppendLine("     , 1 as 정렬순서 ");
            stringBuilder.AppendLine("     , '소계' as V거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , '' as 사용자명 ");
            stringBuilder.AppendLine("     , '' as 계산서일자 ");
            stringBuilder.AppendLine("     , NULL as 계산서번호 ");
            stringBuilder.AppendLine("     , sum(z.공급가액) as 공급가합계 ");
            stringBuilder.AppendLine("     , sum(z.부가세액) as 부가세합계 ");
            stringBuilder.AppendLine("     , sum(z.포함금액) as 금액합계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.*           ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.거래처사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , b.공급가액    ");
            stringBuilder.AppendLine("     , b.부가세액    ");
            stringBuilder.AppendLine("     , b.포함금액    ");
            stringBuilder.AppendLine(" from T_계산서매입 a ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 공급가액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) - round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 부가세액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_계산서매입 a ");
            stringBuilder.AppendLine("                             inner join T_계산서매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                             and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" group by z.거래처코드 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select 'ZZZZZZ' as 거래처코드 ");
            stringBuilder.AppendLine("     , 2 as 정렬순서 ");
            stringBuilder.AppendLine("     , '합계' as V거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , '' as 사용자명 ");
            stringBuilder.AppendLine("     , '' as 계산서일자 ");
            stringBuilder.AppendLine("     , NULL as 계산서번호 ");
            stringBuilder.AppendLine("     , sum(z.공급가액) as 공급가합계 ");
            stringBuilder.AppendLine("     , sum(z.부가세액) as 부가세합계 ");
            stringBuilder.AppendLine("     , sum(z.포함금액) as 금액합계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.*           ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.거래처사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , b.공급가액    ");
            stringBuilder.AppendLine("     , b.부가세액    ");
            stringBuilder.AppendLine("     , b.포함금액    ");
            stringBuilder.AppendLine(" from T_계산서매입 a ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 공급가액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) - round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 부가세액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_계산서매입 a ");
            stringBuilder.AppendLine("                             inner join T_계산서매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                             and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine(" order by x.거래처코드 asc, x.정렬순서 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매입계산서_현황_일자별_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.계산서일자 ");
            stringBuilder.AppendLine("     , a.계산서일자 as V계산서일자 ");
            stringBuilder.AppendLine("     , 0 as 정렬순서 ");
            stringBuilder.AppendLine("     , a.계산서번호 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , b.공급가액 as 공급가합계 ");
            stringBuilder.AppendLine("     , b.부가세액 as 부가세합계 ");
            stringBuilder.AppendLine("     , b.포함금액 as 금액합계   ");
            stringBuilder.AppendLine(" from T_계산서매입 a ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 공급가액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) - round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 부가세액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_계산서매입 a ");
            stringBuilder.AppendLine("                             inner join T_계산서매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                             and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select z.계산서일자 ");
            stringBuilder.AppendLine("     , '소계' as V계산서일자 ");
            stringBuilder.AppendLine("     , 1 as 정렬순서 ");
            stringBuilder.AppendLine("     , NULL as 계산서번호 ");
            stringBuilder.AppendLine("     , '' as 거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , '' as 사용자명 ");
            stringBuilder.AppendLine("     , sum(z.공급가액) as 공급가합계 ");
            stringBuilder.AppendLine("     , sum(z.부가세액) as 부가세합계 ");
            stringBuilder.AppendLine("     , sum(z.포함금액) as 금액합계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.*           ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.거래처사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , b.공급가액    ");
            stringBuilder.AppendLine("     , b.부가세액    ");
            stringBuilder.AppendLine("     , b.포함금액    ");
            stringBuilder.AppendLine(" from T_계산서매입 a ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 공급가액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) - round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 부가세액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_계산서매입 a ");
            stringBuilder.AppendLine("                             inner join T_계산서매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                             and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" group by z.계산서일자 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 계산서일자 ");
            stringBuilder.AppendLine("     , '합계' as V계산서일자 ");
            stringBuilder.AppendLine("     , 2 as 정렬순서 ");
            stringBuilder.AppendLine("     , NULL as 계산서번호 ");
            stringBuilder.AppendLine("     , '' as 거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , '' as 사용자명 ");
            stringBuilder.AppendLine("     , sum(z.공급가액) as 공급가합계 ");
            stringBuilder.AppendLine("     , sum(z.부가세액) as 부가세합계 ");
            stringBuilder.AppendLine("     , sum(z.포함금액) as 금액합계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.*           ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.거래처사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , b.공급가액    ");
            stringBuilder.AppendLine("     , b.부가세액    ");
            stringBuilder.AppendLine("     , b.포함금액    ");
            stringBuilder.AppendLine(" from T_계산서매입 a ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 공급가액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) - round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 부가세액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_계산서매입 a ");
            stringBuilder.AppendLine("                             inner join T_계산서매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                             and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine(" order by x.계산서일자 asc, x.정렬순서 asc, x.계산서번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출계산서_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sManNo,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , case when a.작업구분 = '0' then isnull(b.품목수, 0)   else isnull(bb.품목수, 0)   end as 품목수 ");
            stringBuilder.AppendLine("     , case when a.작업구분 = '0' then isnull(b.포함금액, 0) else isnull(bb.금액, 0)     end as 금액 ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.거래처사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine(" from T_계산서매출 a ");
            stringBuilder.AppendLine("      inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_계산서매출 a ");
            stringBuilder.AppendLine("                             inner join T_계산서매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine("      left outer join (select 사업자번호, 계산서일자, 계산서번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , isnull(sum(금액), 0) as 금액 ");
            stringBuilder.AppendLine("                         from T_계산서매출수금항목 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and 계산서일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by 사업자번호, 계산서일자, 계산서번호 ");
            stringBuilder.AppendLine("                         ) bb on bb.사업자번호 = a.사업자번호 and bb.계산서일자 = a.계산서일자 and bb.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sManNo != "")
                stringBuilder.AppendLine("     and d.사원번호 = '" + sManNo + "' ");
            stringBuilder.AppendLine(" order by a.계산서일자 desc, a.계산서번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출계산서_Detail(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , d.거래처구분  ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.정식명칭    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.대표자명    ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 전체주소 ");
            stringBuilder.AppendLine("     , d.업태    ");
            stringBuilder.AppendLine("     , d.종목    ");
            stringBuilder.AppendLine("     , substring(a.계산서일자, 1, 4) as 발행년 ");
            stringBuilder.AppendLine("     , substring(a.계산서일자, 6, 2) as 발행월 ");
            stringBuilder.AppendLine("     , substring(a.계산서일자, 9, 2) as 발행일 ");
            stringBuilder.AppendLine("     , '11' as 공란수 ");
            stringBuilder.AppendLine("     , '' as Price11 ");
            stringBuilder.AppendLine("     , '' as Price10 ");
            stringBuilder.AppendLine("     , '' as Price09 ");
            stringBuilder.AppendLine("     , '' as Price08 ");
            stringBuilder.AppendLine("     , '' as Price07 ");
            stringBuilder.AppendLine("     , '' as Price06 ");
            stringBuilder.AppendLine("     , '' as Price05 ");
            stringBuilder.AppendLine("     , '' as Price04 ");
            stringBuilder.AppendLine("     , '' as Price03 ");
            stringBuilder.AppendLine("     , '' as Price02 ");
            stringBuilder.AppendLine("     , '' as Price01 ");
            stringBuilder.AppendLine("     , '' as Vat10 ");
            stringBuilder.AppendLine("     , '' as Vat09 ");
            stringBuilder.AppendLine("     , '' as Vat08 ");
            stringBuilder.AppendLine("     , '' as Vat07 ");
            stringBuilder.AppendLine("     , '' as Vat06 ");
            stringBuilder.AppendLine("     , '' as Vat05 ");
            stringBuilder.AppendLine("     , '' as Vat04 ");
            stringBuilder.AppendLine("     , '' as Vat03 ");
            stringBuilder.AppendLine("     , '' as Vat02 ");
            stringBuilder.AppendLine("     , '' as Vat01 ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine("     , ff.개인사업자번호 as 대체사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(ff.개인사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(ff.개인사업자번호, 1, 3) + '-' + substring(ff.개인사업자번호, 4, 2) + '-' + substring(ff.개인사업자번호, 6, 5) end as 대체사업자번호2 ");
            stringBuilder.AppendLine("     , ff.대표자명 as 대체대표자 ");
            stringBuilder.AppendLine("     , ff.상호명 as 대체상호명 ");
            stringBuilder.AppendLine("     , ff.이메일 as 대체이메일 ");
            stringBuilder.AppendLine("     , ff.업태 as 대체업태 ");
            stringBuilder.AppendLine("     , ff.종목 as 대체종목 ");
            stringBuilder.AppendLine("     , ff.사업우편번호 as 대체우편번호 ");
            stringBuilder.AppendLine("     , ff.사업주소 + ' ' + ff.사업상세주소 as 대체주소 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 + ' / ' + f.사용자명 as 대체연락처 ");
            stringBuilder.AppendLine("     , ff.직인 as 대체직인 ");
            stringBuilder.AppendLine("     , '' as 대체직인파일 ");
            stringBuilder.AppendLine("     , ff.직인형식 as 대체직인형식 ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명   ");
            stringBuilder.AppendLine(" from T_계산서매출 a ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 ff on ff.사업자번호 = d.사업자번호 and ff.지점코드 = d.지점코드 and ff.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.계산서번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출계산서항목_List(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(a.총수량, a.사업자번호, a.지점코드, a.상품코드) as 박스표시 ");
            stringBuilder.AppendLine(" from T_계산서매출항목 a ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.계산서번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.항목번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출항목_Detail(
          string sKey1,
          string sKey2,
          string sKey3,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(a.총수량, a.사업자번호, a.지점코드, a.상품코드) as 박스표시 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산((case when a.매출구분 in ('1', '2') then 1 else -1 end) * a.총수량, a.사업자번호, a.지점코드, a.상품코드) as V박스표시 ");
            stringBuilder.AppendLine("     , (case when a.매출구분 in ('1', '2') then 1 else -1 end) * a.박스수량 as V박스수량 ");
            stringBuilder.AppendLine("     , (case when a.매출구분 in ('1', '2') then 1 else -1 end) * a.중간수량 as V중간수량 ");
            stringBuilder.AppendLine("     , (case when a.매출구분 in ('1', '2') then 1 else -1 end) * a.낱개수량 as V낱개수량 ");
            stringBuilder.AppendLine("     , (case when a.매출구분 in ('1', '2') then 1 else -1 end) * a.총수량 as V총수량 ");
            stringBuilder.AppendLine("     , (case when a.매출구분 in ('1', '2') then 1 else -1 end) * a.금액 as V금액 ");
            stringBuilder.AppendLine(" from T_매출항목 a ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.전표번호 = @p_2 ");
            stringBuilder.AppendLine("     and a.항목순번 = @p_3 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            sCommand.Parameters.AddWithValue("@p_3", (object)sKey3);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출계산서항목_수금_List(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine(" from T_계산서매출수금항목 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.계산서번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.항목번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매입계산서_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , b.품목수      ");
            stringBuilder.AppendLine("     , b.공급가액    ");
            stringBuilder.AppendLine("     , b.부가세액    ");
            stringBuilder.AppendLine("     , b.포함금액    ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine(" from T_계산서매입 a ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 공급가액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) - round(isnull(b.금액, 0) / 1.1, 0) ");
            stringBuilder.AppendLine("                                         else round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 부가세액 ");
            stringBuilder.AppendLine("                             , sum(1 * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세구분 = '1' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액 ");
            stringBuilder.AppendLine("                         from T_계산서매입 a ");
            stringBuilder.AppendLine("                             inner join T_계산서매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.계산서일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.계산서일자, a.계산서번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.계산서일자 desc, a.계산서번호 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매입계산서_Detail(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , d.거래처구분  ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , d.여신        ");
            stringBuilder.AppendLine("     , d.초기잔고    ");
            stringBuilder.AppendLine("     , f.사용자명    ");
            stringBuilder.AppendLine("     , f.근무형태코드 ");
            stringBuilder.AppendLine("     , isnull(d.중상여부, '0') as 중상여부 ");
            stringBuilder.AppendLine(" from T_계산서매입 a ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.계산서번호 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매입계산서항목_List(string sKey1, string sKey2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , g.상품명      ");
            stringBuilder.AppendLine("     , g.규격        ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine(" from T_계산서매입항목 a ");
            stringBuilder.AppendLine("      left outer join T_상품정보 g on g.사업자번호 = a.사업자번호 and g.지점코드 = a.지점코드 and g.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 = @p_1 ");
            stringBuilder.AppendLine("     and a.계산서번호 = @p_2 ");
            stringBuilder.AppendLine(" order by a.항목번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sKey1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sKey2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출계산서_전자신고(
          string sDay1,
          string sDay2,
          string sGubun,
          string sCustName,
          string sNoTax,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine("     , d.거래처구분  ");
            stringBuilder.AppendLine("     , d.거래처명    ");
            stringBuilder.AppendLine("     , d.정식명칭    ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , case when isnull(d.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(d.거래처사업자번호, 1, 3) + '-' + substring(d.거래처사업자번호, 4, 2) + '-' + substring(d.거래처사업자번호, 6, 5) end as 거래처사업자번호2 ");
            stringBuilder.AppendLine("     , d.대표자명    ");
            stringBuilder.AppendLine("     , d.주소 + ' ' + d.상세주소 as 전체주소 ");
            stringBuilder.AppendLine("     , d.업태    ");
            stringBuilder.AppendLine("     , d.종목    ");
            stringBuilder.AppendLine("     , d.전화번호    ");
            stringBuilder.AppendLine("     , d.이메일    ");
            stringBuilder.AppendLine("     , substring(a.계산서일자, 1, 4) as 발행년 ");
            stringBuilder.AppendLine("     , substring(a.계산서일자, 6, 2) as 발행월 ");
            stringBuilder.AppendLine("     , substring(a.계산서일자, 9, 2) as 발행일 ");
            stringBuilder.AppendLine("     , ff.개인사업자번호 as 대체사업자번호 ");
            stringBuilder.AppendLine("     , case when isnull(ff.개인사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(ff.개인사업자번호, 1, 3) + '-' + substring(ff.개인사업자번호, 4, 2) + '-' + substring(ff.개인사업자번호, 6, 5) end as 대체사업자번호2 ");
            stringBuilder.AppendLine("     , ff.대표자명 as 대체대표자 ");
            stringBuilder.AppendLine("     , ff.상호명 as 대체상호명 ");
            stringBuilder.AppendLine("     , ff.이메일 as 대체이메일 ");
            stringBuilder.AppendLine("     , ff.업태 as 대체업태 ");
            stringBuilder.AppendLine("     , ff.종목 as 대체종목 ");
            stringBuilder.AppendLine("     , ff.사업우편번호 as 대체우편번호 ");
            stringBuilder.AppendLine("     , ff.사업주소 + ' ' + ff.사업상세주소 as 대체주소 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 ");
            stringBuilder.AppendLine(" from T_계산서매출 a ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 ff on ff.사업자번호 = d.사업자번호 and ff.지점코드 = d.지점코드 and ff.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join T_홈택스항목 ht on ht.사업자번호 = a.사업자번호 and ht.지점코드 = a.지점코드 and ht.계산서일자 = a.계산서일자 and ht.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.계산서일자 >= @p_1 ");
            stringBuilder.AppendLine("     and a.계산서일자 <= @p_2 ");
            if (sGubun == "1")
                stringBuilder.AppendLine("     and ht.발행일자 is not null ");
            else
                stringBuilder.AppendLine("     and ht.발행일자 is null ");
            if (sNoTax == "2")
                stringBuilder.AppendLine("     and a.부가세구분 = '5' ");
            else
                stringBuilder.AppendLine("     and a.부가세구분 <> '5' ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_상품원장_List(
          string sDay1,
          string sDay2,
          string sWare,
          string sProd,
          string sConn)
        {
            StringBuilder stringBuilder1 = new StringBuilder();
            StringBuilder stringBuilder2 = new StringBuilder();
            StringBuilder stringBuilder3 = new StringBuilder();
            stringBuilder2.AppendLine(" select '' as 일자 ");
            stringBuilder2.AppendLine("     , 0 as 박스수량  ");
            stringBuilder2.AppendLine("     , 0 as 중간수량  ");
            stringBuilder2.AppendLine("     , 0 as 낱개수량  ");
            stringBuilder2.AppendLine("     , isnull(a.초기재고, 0) as 총수량 ");
            stringBuilder2.AppendLine("     , 0 as 서비스낱개  ");
            stringBuilder2.AppendLine("     , 0 as 서비스박스  ");
            stringBuilder2.AppendLine("     , 0 as 서비스총수량  ");
            stringBuilder2.AppendLine(" from T_상품창고별재고 a       ");
            stringBuilder2.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder2.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder2.AppendLine("     and a.창고코드 = '" + sWare + "' ");
            stringBuilder2.AppendLine("     and a.상품코드 = '" + sProd + "' ");
            stringBuilder2.AppendLine(" union all ");
            stringBuilder2.AppendLine(" select a.매입일자 as 일자 ");
            stringBuilder2.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.박스수량 as 박스수량 ");
            stringBuilder2.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.중간수량 as 중간수량 ");
            stringBuilder2.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder2.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.총수량 as 총수량 ");
            stringBuilder2.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.서비스낱개 as 서비스낱개 ");
            stringBuilder2.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.서비스박스 as 서비스박스 ");
            stringBuilder2.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.서비스총수량 as 서비스총수량 ");
            stringBuilder2.AppendLine(" from T_매입 a       ");
            stringBuilder2.AppendLine("      inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 and b.상품코드 = '" + sProd + "' ");
            stringBuilder2.AppendLine("      left outer join C_매입구분 r on r.코드 = b.매입구분 ");
            stringBuilder2.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder2.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder2.AppendLine("     and a.매입일자 < '" + sDay1 + "' ");
            stringBuilder2.AppendLine("     and a.창고코드 = '" + sWare + "' ");
            stringBuilder2.AppendLine(" union all ");
            stringBuilder2.AppendLine(" select a.매출일자 as 일자 ");
            stringBuilder2.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.박스수량 as 박스수량 ");
            stringBuilder2.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.중간수량 as 중간수량 ");
            stringBuilder2.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder2.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.총수량 as 총수량 ");
            stringBuilder2.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.서비스낱개 as 서비스낱개 ");
            stringBuilder2.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.서비스박스 as 서비스박스 ");
            stringBuilder2.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder2.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder2.AppendLine("                 else 0 end) * b.서비스총수량 as 서비스총수량 ");
            stringBuilder2.AppendLine(" from T_매출 a       ");
            stringBuilder2.AppendLine("      inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 and b.상품코드 = '" + sProd + "' ");
            stringBuilder2.AppendLine("                                 and b.매출구분 <> '4' ");
            stringBuilder2.AppendLine("      left outer join C_매출구분 r on r.코드 = b.매출구분 ");
            stringBuilder2.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder2.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder2.AppendLine("     and a.매출일자 < '" + sDay1 + "' ");
            stringBuilder2.AppendLine("     and a.창고코드 = '" + sWare + "' ");
            stringBuilder2.AppendLine(" union all ");
            stringBuilder2.AppendLine(" select a.수불일자 as 일자 ");
            stringBuilder2.AppendLine("     , b.박스수량 ");
            stringBuilder2.AppendLine("     , b.중간수량 ");
            stringBuilder2.AppendLine("     , b.낱개수량 ");
            stringBuilder2.AppendLine("     , b.총수량 ");
            stringBuilder2.AppendLine("     , 0 as 서비스낱개 ");
            stringBuilder2.AppendLine("     , 0 as 서비스박스 ");
            stringBuilder2.AppendLine("     , 0 as 서비스총수량  ");
            stringBuilder2.AppendLine(" from T_창고이동 a ");
            stringBuilder2.AppendLine("     inner join T_창고이동항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.수불일자 = a.수불일자 and b.수불번호 = a.수불번호 and b.상품코드 = '" + sProd + "' ");
            stringBuilder2.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder2.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder2.AppendLine("     and a.수불일자 < '" + sDay1 + "' ");
            stringBuilder2.AppendLine("     and a.입고창고코드 = '" + sWare + "' ");
            stringBuilder2.AppendLine(" union all ");
            stringBuilder2.AppendLine(" select a.수불일자 as 일자 ");
            stringBuilder2.AppendLine("     , -1 * b.박스수량 as 박스수량 ");
            stringBuilder2.AppendLine("     , -1 * b.중간수량 as 중간수량 ");
            stringBuilder2.AppendLine("     , -1 * b.낱개수량 as 낱개수량 ");
            stringBuilder2.AppendLine("     , -1 * b.총수량 as 총수량 ");
            stringBuilder2.AppendLine("     , 0 as 서비스낱개 ");
            stringBuilder2.AppendLine("     , 0 as 서비스박스 ");
            stringBuilder2.AppendLine("     , 0 as 서비스총수량  ");
            stringBuilder2.AppendLine(" from T_창고이동 a ");
            stringBuilder2.AppendLine("     inner join T_창고이동항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.수불일자 = a.수불일자 and b.수불번호 = a.수불번호 and b.상품코드 = '" + sProd + "' ");
            stringBuilder2.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder2.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder2.AppendLine("     and a.수불일자 < '" + sDay1 + "' ");
            stringBuilder2.AppendLine("     and a.출고창고코드 = '" + sWare + "' ");
            stringBuilder3.AppendLine(" select a.매입일자 as 일자 ");
            stringBuilder3.AppendLine("     , a.매입일자 as 일자명칭 ");
            stringBuilder3.AppendLine("     , 1 as 정렬구분 ");
            stringBuilder3.AppendLine("     , a.전표번호    ");
            stringBuilder3.AppendLine("     , b.매입구분 as 구분 ");
            stringBuilder3.AppendLine("     , r.명칭 as 구분명칭 ");
            stringBuilder3.AppendLine("     , p.거래처명 as 내역 ");
            stringBuilder3.AppendLine("     , b.비고 ");
            stringBuilder3.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.박스수량 as 박스수량 ");
            stringBuilder3.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.중간수량 as 중간수량 ");
            stringBuilder3.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder3.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.총수량 as 총수량 ");
            stringBuilder3.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.서비스낱개 as 서비스낱개 ");
            stringBuilder3.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.서비스박스 as 서비스박스 ");
            stringBuilder3.AppendLine("     , (case when b.매입구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매입구분 = '4' then -1 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.서비스총수량 as 서비스총수량 ");
            stringBuilder3.AppendLine("     , 0 as 재고 ");
            stringBuilder3.AppendLine(" from T_매입 a       ");
            stringBuilder3.AppendLine("      inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 and b.상품코드 = '" + sProd + "' ");
            stringBuilder3.AppendLine("      left outer join C_매입구분 r on r.코드 = b.매입구분 ");
            stringBuilder3.AppendLine("      left outer join T_거래처정보 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.거래처코드 = a.거래처코드 ");
            stringBuilder3.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder3.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder3.AppendLine("     and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder3.AppendLine("     and a.매입일자 <= '" + sDay2 + "' ");
            stringBuilder3.AppendLine("     and a.창고코드 = '" + sWare + "' ");
            stringBuilder3.AppendLine(" union all ");
            stringBuilder3.AppendLine(" select a.매출일자 as 일자 ");
            stringBuilder3.AppendLine("     , a.매출일자 as 일자명칭 ");
            stringBuilder3.AppendLine("     , 4 as 정렬구분 ");
            stringBuilder3.AppendLine("     , a.전표번호    ");
            stringBuilder3.AppendLine("     , b.매출구분 as 구분 ");
            stringBuilder3.AppendLine("     , r.명칭 as 구분명칭 ");
            stringBuilder3.AppendLine("     , p.거래처명 as 내역 ");
            stringBuilder3.AppendLine("     , b.비고 ");
            stringBuilder3.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.박스수량 as 박스수량 ");
            stringBuilder3.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.중간수량 as 중간수량 ");
            stringBuilder3.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder3.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.총수량 as 총수량 ");
            stringBuilder3.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.서비스낱개 as 서비스낱개 ");
            stringBuilder3.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.서비스박스 as 서비스박스 ");
            stringBuilder3.AppendLine("     , -1 * (case when b.매출구분 = '1' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '2' then 1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '3' then -1 ");
            stringBuilder3.AppendLine("                 when b.매출구분 = '4' then 0 ");
            stringBuilder3.AppendLine("                 else 0 end) * b.서비스총수량 as 서비스총수량 ");
            stringBuilder3.AppendLine("     , 0 as 재고 ");
            stringBuilder3.AppendLine(" from T_매출 a       ");
            stringBuilder3.AppendLine("      inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 and b.상품코드 = '" + sProd + "' ");
            stringBuilder3.AppendLine("                                 and b.매출구분 <> '4' ");
            stringBuilder3.AppendLine("      left outer join C_매출구분 r on r.코드 = b.매출구분 ");
            stringBuilder3.AppendLine("      left outer join T_거래처정보 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.거래처코드 = a.거래처코드 ");
            stringBuilder3.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder3.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder3.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder3.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder3.AppendLine("     and a.창고코드 = '" + sWare + "' ");
            stringBuilder3.AppendLine(" union all ");
            stringBuilder3.AppendLine(" select a.수불일자 as 일자 ");
            stringBuilder3.AppendLine("     , a.수불일자 as 일자명칭 ");
            stringBuilder3.AppendLine("     , 2 as 정렬구분 ");
            stringBuilder3.AppendLine("     , convert(nvarchar(6), a.수불번호) as 수불번호 ");
            stringBuilder3.AppendLine("     , '' as 구분 ");
            stringBuilder3.AppendLine("     , '이동입고' as 구분명칭 ");
            stringBuilder3.AppendLine("     , '[ ' + p.명칭 + ' ]로부터 입고' as 내역 ");
            stringBuilder3.AppendLine("     , a.비고 ");
            stringBuilder3.AppendLine("     , b.박스수량 ");
            stringBuilder3.AppendLine("     , b.중간수량 ");
            stringBuilder3.AppendLine("     , b.낱개수량 ");
            stringBuilder3.AppendLine("     , b.총수량 ");
            stringBuilder3.AppendLine("     , 0 as 서비스낱개 ");
            stringBuilder3.AppendLine("     , 0 as 서비스박스 ");
            stringBuilder3.AppendLine("     , 0 as 서비스총수량  ");
            stringBuilder3.AppendLine("     , 0 as 재고 ");
            stringBuilder3.AppendLine(" from T_창고이동 a ");
            stringBuilder3.AppendLine("     inner join T_창고이동항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.수불일자 = a.수불일자 and b.수불번호 = a.수불번호 and b.상품코드 = '" + sProd + "' ");
            stringBuilder3.AppendLine("     left outer join P_창고 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.코드 = a.출고창고코드 ");
            stringBuilder3.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder3.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder3.AppendLine("     and a.수불일자 >= '" + sDay1 + "' ");
            stringBuilder3.AppendLine("     and a.수불일자 <= '" + sDay2 + "' ");
            stringBuilder3.AppendLine("     and a.입고창고코드 = '" + sWare + "' ");
            stringBuilder3.AppendLine(" union all ");
            stringBuilder3.AppendLine(" select a.수불일자 as 일자 ");
            stringBuilder3.AppendLine("     , a.수불일자 as 일자명칭 ");
            stringBuilder3.AppendLine("     , 3 as 정렬구분 ");
            stringBuilder3.AppendLine("     , convert(nvarchar(6), a.수불번호) as 수불번호 ");
            stringBuilder3.AppendLine("     , '' as 구분 ");
            stringBuilder3.AppendLine("     , '이동출고' as 구분명칭 ");
            stringBuilder3.AppendLine("     , '[ ' + p.명칭 + ' ]로 출고' as 내역 ");
            stringBuilder3.AppendLine("     , a.비고 ");
            stringBuilder3.AppendLine("     , -1 * b.박스수량 as 박스수량 ");
            stringBuilder3.AppendLine("     , -1 * b.중간수량 as 중간수량 ");
            stringBuilder3.AppendLine("     , -1 * b.낱개수량 as 낱개수량 ");
            stringBuilder3.AppendLine("     , -1 * b.총수량 as 총수량 ");
            stringBuilder3.AppendLine("     , 0 as 서비스낱개 ");
            stringBuilder3.AppendLine("     , 0 as 서비스박스 ");
            stringBuilder3.AppendLine("     , 0 as 서비스총수량  ");
            stringBuilder3.AppendLine("     , 0 as 재고 ");
            stringBuilder3.AppendLine(" from T_창고이동 a ");
            stringBuilder3.AppendLine("     inner join T_창고이동항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.수불일자 = a.수불일자 and b.수불번호 = a.수불번호 and b.상품코드 = '" + sProd + "' ");
            stringBuilder3.AppendLine("     left outer join P_창고 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.코드 = a.입고창고코드 ");
            stringBuilder3.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder3.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder3.AppendLine("     and a.수불일자 >= '" + sDay1 + "' ");
            stringBuilder3.AppendLine("     and a.수불일자 <= '" + sDay2 + "' ");
            stringBuilder3.AppendLine("     and a.출고창고코드 = '" + sWare + "' ");
            stringBuilder1.AppendLine(" select z.* ");
            if (Common.p_strBox == "2")
                stringBuilder1.AppendLine("     , z.서비스박스 as 표시서비스 ");
            else
                stringBuilder1.AppendLine("     , z.서비스낱개 as 표시서비스 ");
            stringBuilder1.AppendLine("     , (select 입수수량 from T_상품정보 where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 상품코드 = '" + sProd + "' ) as 입수수량 ");
            stringBuilder1.AppendLine("     , (select 중간입수수량 from T_상품정보 where 사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and 상품코드 = '" + sProd + "' ) as 중간입수수량 ");
            stringBuilder1.AppendLine(" from ( ");
            stringBuilder1.AppendLine(" select '0000-00-00' as 일자 ");
            stringBuilder1.AppendLine("     , '== 전잔고 ==' as 일자명칭 ");
            stringBuilder1.AppendLine("     , 0 as 정렬구분 ");
            stringBuilder1.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder1.AppendLine("     , '' as 구분 ");
            stringBuilder1.AppendLine("     , '' as 구분명칭 ");
            stringBuilder1.AppendLine("     , '' as 내역 ");
            stringBuilder1.AppendLine("     , '' as 비고 ");
            stringBuilder1.AppendLine("     , 0 as 박스수량 ");
            stringBuilder1.AppendLine("     , 0 as 중간수량 ");
            stringBuilder1.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder1.AppendLine("     , 0 as 총수량 ");
            stringBuilder1.AppendLine("     , 0 as 서비스낱개 ");
            stringBuilder1.AppendLine("     , 0 as 서비스박스 ");
            stringBuilder1.AppendLine("     , 0 as 서비스총수량  ");
            stringBuilder1.AppendLine("     , isnull(sum(a.총수량), 0) + isnull(sum(a.서비스낱개), 0) + isnull(sum(a.서비스박스), 0) as 재고 ");
            stringBuilder1.AppendLine(" from ( ");
            stringBuilder1.AppendLine(stringBuilder2.ToString());
            stringBuilder1.AppendLine(" ) a ");
            stringBuilder1.AppendLine(" union all ");
            stringBuilder1.AppendLine(stringBuilder3.ToString());
            stringBuilder1.AppendLine(" union all ");
            stringBuilder1.AppendLine(" select a.매출일자 as 일자 ");
            stringBuilder1.AppendLine("     , a.매출일자 as 일자명칭 ");
            stringBuilder1.AppendLine("     , 4 as 정렬구분 ");
            stringBuilder1.AppendLine("     , a.전표번호    ");
            stringBuilder1.AppendLine("     , b.매출구분 as 구분 ");
            stringBuilder1.AppendLine("     , r.명칭 as 구분명칭 ");
            stringBuilder1.AppendLine("     , p.거래처명 as 내역 ");
            stringBuilder1.AppendLine("     , b.비고 ");
            stringBuilder1.AppendLine("     , -1 * (case when b.매출구분 = '4' then 1 ");
            stringBuilder1.AppendLine("                 else 0 end) * b.박스수량 as 박스수량 ");
            stringBuilder1.AppendLine("     , -1 * (case when b.매출구분 = '4' then 1 ");
            stringBuilder1.AppendLine("                 else 0 end) * b.중간수량 as 중간수량 ");
            stringBuilder1.AppendLine("     , -1 * (case when b.매출구분 = '4' then 1 ");
            stringBuilder1.AppendLine("                 else 0 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder1.AppendLine("     , -1 * (case when b.매출구분 = '4' then 1 ");
            stringBuilder1.AppendLine("                 else 0 end) * b.총수량 as 총수량 ");
            stringBuilder1.AppendLine("     , -1 * (case when b.매출구분 = '4' then 1 ");
            stringBuilder1.AppendLine("                 else 0 end) * b.서비스낱개 as 서비스낱개 ");
            stringBuilder1.AppendLine("     , -1 * (case when b.매출구분 = '4' then 1 ");
            stringBuilder1.AppendLine("                 else 0 end) * b.서비스박스 as 서비스박스 ");
            stringBuilder1.AppendLine("     , -1 * (case when b.매출구분 = '4' then 1 ");
            stringBuilder1.AppendLine("                 else 0 end) * b.서비스총수량 as 서비스총수량 ");
            stringBuilder1.AppendLine("     , 0 as 재고 ");
            stringBuilder1.AppendLine(" from T_매출 a       ");
            stringBuilder1.AppendLine("      inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 and b.상품코드 = '" + sProd + "' ");
            stringBuilder1.AppendLine("                                 and b.매출구분 = '4' ");
            stringBuilder1.AppendLine("      left outer join C_매출구분 r on r.코드 = b.매출구분 ");
            stringBuilder1.AppendLine("      left outer join T_거래처정보 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.거래처코드 = a.거래처코드 ");
            stringBuilder1.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder1.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder1.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder1.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder1.AppendLine("     and a.창고코드 = '" + sWare + "' ");
            stringBuilder1.AppendLine(" union all ");
            stringBuilder1.AppendLine(" select SUBSTRING(a.일자, 1, 7) + '-99' as 일자 ");
            stringBuilder1.AppendLine("     , '=== 월계 ===' as 일자명칭 ");
            stringBuilder1.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder1.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder1.AppendLine("     , '' as 구분 ");
            stringBuilder1.AppendLine("     , '' as 구분명칭 ");
            stringBuilder1.AppendLine("     , '' as 내역 ");
            stringBuilder1.AppendLine("     , '' as 비고 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.박스수량), 0) as 박스수량 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.중간수량), 0) as 중간수량 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.낱개수량), 0) as 낱개수량 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.총수량), 0) as 총수량 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.서비스낱개), 0) as 서비스낱개 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.서비스박스), 0) as 서비스박스 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.서비스총수량), 0) as 서비스총수량 ");
            stringBuilder1.AppendLine("     , 0 as 재고 ");
            stringBuilder1.AppendLine(" from ( ");
            stringBuilder1.AppendLine(stringBuilder3.ToString());
            stringBuilder1.AppendLine(" ) a ");
            stringBuilder1.AppendLine(" group by SUBSTRING(a.일자, 1, 7) ");
            stringBuilder1.AppendLine(" union all ");
            stringBuilder1.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder1.AppendLine("     , '=== 합계 ===' as 일자명칭 ");
            stringBuilder1.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder1.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder1.AppendLine("     , '' as 구분 ");
            stringBuilder1.AppendLine("     , '' as 구분명칭 ");
            stringBuilder1.AppendLine("     , '' as 내역 ");
            stringBuilder1.AppendLine("     , '' as 비고 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.박스수량), 0) as 박스수량 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.중간수량), 0) as 중간수량 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.낱개수량), 0) as 낱개수량 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.총수량), 0) as 총수량 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.서비스낱개), 0) as 서비스낱개 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.서비스박스), 0) as 서비스박스 ");
            stringBuilder1.AppendLine("     , isnull(sum(a.서비스총수량), 0) as 서비스총수량 ");
            stringBuilder1.AppendLine("     , 0 as 재고 ");
            stringBuilder1.AppendLine(" from ( ");
            stringBuilder1.AppendLine(stringBuilder3.ToString());
            stringBuilder1.AppendLine(" ) a ");
            stringBuilder1.AppendLine(" ) z ");
            stringBuilder1.AppendLine(" order by z.일자 asc, z.정렬구분 asc, z.전표번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder1.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_주요변동이력_List(
          string sDay1,
          string sDay2,
          string sCond,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select z.* ");
            stringBuilder.AppendLine(" \t, m.사용자명 as 변경자 ");
            stringBuilder.AppendLine(" \t, z1.거래처명 as 변경전_거래처 ");
            stringBuilder.AppendLine(" \t, z2.거래처명 as 거래처 ");
            stringBuilder.AppendLine(" \t, z3.거래처명 as 변경후_거래처 ");
            stringBuilder.AppendLine(" \t, y1.명칭 as 변경전_출고창고 ");
            stringBuilder.AppendLine(" \t, y2.명칭 as 출고창고 ");
            stringBuilder.AppendLine(" \t, y3.명칭 as 변경후_출고창고 ");
            stringBuilder.AppendLine(" \t, x1.명칭 as 변경전_입고창고 ");
            stringBuilder.AppendLine(" \t, x2.명칭 as 입고창고 ");
            stringBuilder.AppendLine(" \t, x3.명칭 as 변경후_입고창고 ");
            stringBuilder.AppendLine(" \t, m1.사용자명 as 변경전_지출사원 ");
            stringBuilder.AppendLine(" \t, m2.사용자명 as 지출사원 ");
            stringBuilder.AppendLine(" \t, m3.사용자명 as 변경후_지출사원 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine(" \ta.사업자번호 ");
            stringBuilder.AppendLine(" \t, a.지점코드 ");
            stringBuilder.AppendLine(" \t, CONVERT(nvarchar(20), a.발생일시, 120) as 발생일시 ");
            stringBuilder.AppendLine(" \t, a.발생사원번호 ");
            stringBuilder.AppendLine(" \t, a.전표구분 ");
            stringBuilder.AppendLine(" \t, a.작업구분 ");
            stringBuilder.AppendLine(" \t, b.전표일자 as 변경전전표일자 ");
            stringBuilder.AppendLine(" \t, b.전표번호 as 변경전전표번호 ");
            stringBuilder.AppendLine(" \t, a.전표일자 ");
            stringBuilder.AppendLine(" \t, a.전표번호 ");
            stringBuilder.AppendLine(" \t, case when a.전표구분 = '견적' then a1.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '매출' then s1.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '수금' then k1.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '발주' then b1.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '매입' then w1.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '지급' then p1.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '매출계산서' then x1.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '매입계산서' then y1.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '장비대여' then d1.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\telse '' end as 변경전_거래처코드 ");
            stringBuilder.AppendLine(" \t, case when a.전표구분 = '견적' then a2.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '매출' then s2.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '수금' then k2.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '발주' then b2.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '매입' then w2.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '지급' then p2.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '매출계산서' then x2.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '매입계산서' then y2.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '장비대여' then d2.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\telse '' end as 거래처코드 ");
            stringBuilder.AppendLine(" \t, case when a.전표구분 = '견적' then a3.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '매출' then s3.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '수금' then k3.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '발주' then b3.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '매입' then w3.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '지급' then p3.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '매출계산서' then x3.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '매입계산서' then y3.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '창고이동' then y3.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\twhen a.전표구분 = '장비대여' then d3.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\telse '' end as 변경후_거래처코드 ");
            stringBuilder.AppendLine(" \t, case when a.전표구분 = '수불' then h1.출고창고코드  ");
            stringBuilder.AppendLine(" \t\t\telse '' end as 변경전_출고창고코드 ");
            stringBuilder.AppendLine(" \t, case when a.전표구분 = '수불' then h2.출고창고코드  ");
            stringBuilder.AppendLine(" \t\t\telse '' end as 출고창고코드 ");
            stringBuilder.AppendLine(" \t, case when a.전표구분 = '수불' then h3.출고창고코드  ");
            stringBuilder.AppendLine(" \t\t\telse '' end as 변경후_출고창고코드 ");
            stringBuilder.AppendLine(" \t, case when a.전표구분 = '수불' then h1.입고창고코드  ");
            stringBuilder.AppendLine(" \t\t\telse '' end as 변경전_입고창고코드 ");
            stringBuilder.AppendLine(" \t, case when a.전표구분 = '수불' then h2.입고창고코드  ");
            stringBuilder.AppendLine(" \t\t\telse '' end as 입고창고코드 ");
            stringBuilder.AppendLine(" \t, case when a.전표구분 = '수불' then h3.입고창고코드  ");
            stringBuilder.AppendLine(" \t\t\telse '' end as 변경후_입고창고코드 ");
            stringBuilder.AppendLine(" \t, case when a.전표구분 = '지출' then m1.사원번호  ");
            stringBuilder.AppendLine(" \t\t\telse '' end as 변경전_사원번호 ");
            stringBuilder.AppendLine(" \t, case when a.전표구분 = '지출' then m2.사원번호  ");
            stringBuilder.AppendLine(" \t\t\telse '' end as 사원번호 ");
            stringBuilder.AppendLine(" \t, case when a.전표구분 = '지출' then m3.사원번호  ");
            stringBuilder.AppendLine(" \t\t\telse '' end as 변경후_사원번호 ");
            stringBuilder.AppendLine(" \t, a.변경전표일자 as 변경후전표일자 ");
            stringBuilder.AppendLine(" \t, a.변경전표번호 as 변경후전표번호 ");
            stringBuilder.AppendLine(" \t, b.발생일자 as 변경전_발생일자 ");
            stringBuilder.AppendLine(" \t, b.발생일련번호 as 변경전_발생일련번호 ");
            stringBuilder.AppendLine(" \t, a.발생일자 as 현재_발생일자 ");
            stringBuilder.AppendLine(" \t, a.발생일련번호 as 현재_발생일련번호 ");
            stringBuilder.AppendLine(" \t, a.변경발생일자 as 변경후_발생일자 ");
            stringBuilder.AppendLine(" \t, a.변경발생일련번호 as 변경후_발생일련번호 ");
            stringBuilder.AppendLine(" from T_주요변동이력 a ");
            stringBuilder.AppendLine(" \tleft outer join T_주요변동이력 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.변경발생일자 = a.발생일자 and b.변경발생일련번호 = a.발생일련번호 ");
            stringBuilder.AppendLine(" \tleft outer join T_견적_HIS a1 on a1.사업자번호 = b.사업자번호 and a1.지점코드 = b.지점코드 ");
            stringBuilder.AppendLine(" \t\tand a1.발생일자 = b.발생일자  ");
            stringBuilder.AppendLine(" \t\tand a1.발생일련번호 = b.발생일련번호 and a.전표구분 = '견적' ");
            stringBuilder.AppendLine(" \tleft outer join T_견적_HIS a2 on a2.사업자번호 = a.사업자번호 and a2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand a2.발생일자 = a.발생일자  ");
            stringBuilder.AppendLine(" \t\tand a2.발생일련번호 = a.발생일련번호 and a.전표구분 = '견적' ");
            stringBuilder.AppendLine(" \tleft outer join T_견적_HIS a3 on a3.사업자번호 = a.사업자번호 and a3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand a3.발생일자 = a.변경발생일자  ");
            stringBuilder.AppendLine(" \t\tand a3.발생일련번호 = a.변경발생일련번호 and a.전표구분 = '견적' ");
            stringBuilder.AppendLine(" \tleft outer join T_매출_HIS s1 on s1.사업자번호 = b.사업자번호 and s1.지점코드 = b.지점코드 ");
            stringBuilder.AppendLine(" \t\tand s1.발생일자 = b.발생일자  ");
            stringBuilder.AppendLine(" \t\tand s1.발생일련번호 = b.발생일련번호 and a.전표구분 = '매출' ");
            stringBuilder.AppendLine(" \tleft outer join T_매출_HIS s2 on s2.사업자번호 = a.사업자번호 and s2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand s2.발생일자 = a.발생일자  ");
            stringBuilder.AppendLine(" \t\tand s2.발생일련번호 = a.발생일련번호 and a.전표구분 = '매출' ");
            stringBuilder.AppendLine(" \tleft outer join T_매출_HIS s3 on s3.사업자번호 = a.사업자번호 and s3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand s3.발생일자 = a.변경발생일자  ");
            stringBuilder.AppendLine(" \t\tand s3.발생일련번호 = a.변경발생일련번호 and a.전표구분 = '매출' ");
            stringBuilder.AppendLine(" \tleft outer join T_수금_HIS k1 on k1.사업자번호 = b.사업자번호 and k1.지점코드 = b.지점코드 ");
            stringBuilder.AppendLine(" \t\tand k1.발생일자 = b.발생일자  ");
            stringBuilder.AppendLine(" \t\tand k1.발생일련번호 = b.발생일련번호 and a.전표구분 = '수금' ");
            stringBuilder.AppendLine(" \tleft outer join T_수금_HIS k2 on k2.사업자번호 = a.사업자번호 and k2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand k2.발생일자 = a.발생일자  ");
            stringBuilder.AppendLine(" \t\tand k2.발생일련번호 = a.발생일련번호 and a.전표구분 = '수금' ");
            stringBuilder.AppendLine(" \tleft outer join T_수금_HIS k3 on k3.사업자번호 = a.사업자번호 and k3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand k3.발생일자 = a.변경발생일자  ");
            stringBuilder.AppendLine(" \t\tand k3.발생일련번호 = a.변경발생일련번호 and a.전표구분 = '수금' ");
            stringBuilder.AppendLine(" \tleft outer join T_수금_HIS b1 on b1.사업자번호 = b.사업자번호 and b1.지점코드 = b.지점코드 ");
            stringBuilder.AppendLine(" \t\tand b1.발생일자 = b.발생일자  ");
            stringBuilder.AppendLine(" \t\tand b1.발생일련번호 = b.발생일련번호 and a.전표구분 = '발주' ");
            stringBuilder.AppendLine(" \tleft outer join T_수금_HIS b2 on b2.사업자번호 = a.사업자번호 and b2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand b2.발생일자 = a.발생일자  ");
            stringBuilder.AppendLine(" \t\tand b2.발생일련번호 = a.발생일련번호 and a.전표구분 = '발주' ");
            stringBuilder.AppendLine(" \tleft outer join T_수금_HIS b3 on b3.사업자번호 = a.사업자번호 and b3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand b3.발생일자 = a.변경발생일자  ");
            stringBuilder.AppendLine(" \t\tand b3.발생일련번호 = a.변경발생일련번호 and a.전표구분 = '발주' ");
            stringBuilder.AppendLine(" \tleft outer join T_매입_HIS w1 on w1.사업자번호 = b.사업자번호 and w1.지점코드 = b.지점코드 ");
            stringBuilder.AppendLine(" \t\tand w1.발생일자 = b.발생일자  ");
            stringBuilder.AppendLine(" \t\tand w1.발생일련번호 = b.발생일련번호 and a.전표구분 = '매입' ");
            stringBuilder.AppendLine(" \tleft outer join T_매입_HIS w2 on w2.사업자번호 = a.사업자번호 and w2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand w2.발생일자 = a.발생일자  ");
            stringBuilder.AppendLine(" \t\tand w2.발생일련번호 = a.발생일련번호 and a.전표구분 = '매입' ");
            stringBuilder.AppendLine(" \tleft outer join T_매입_HIS w3 on w3.사업자번호 = a.사업자번호 and w3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand w3.발생일자 = a.변경발생일자  ");
            stringBuilder.AppendLine(" \t\tand w3.발생일련번호 = a.변경발생일련번호 and a.전표구분 = '매입' ");
            stringBuilder.AppendLine(" \tleft outer join T_지급_HIS p1 on p1.사업자번호 = b.사업자번호 and p1.지점코드 = b.지점코드 ");
            stringBuilder.AppendLine(" \t\tand p1.발생일자 = b.발생일자  ");
            stringBuilder.AppendLine(" \t\tand p1.발생일련번호 = b.발생일련번호 and a.전표구분 = '지급' ");
            stringBuilder.AppendLine(" \tleft outer join T_지급_HIS p2 on p2.사업자번호 = a.사업자번호 and p2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand p2.발생일자 = a.발생일자  ");
            stringBuilder.AppendLine(" \t\tand p2.발생일련번호 = a.발생일련번호 and a.전표구분 = '지급' ");
            stringBuilder.AppendLine(" \tleft outer join T_지급_HIS p3 on p3.사업자번호 = a.사업자번호 and p3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand p3.발생일자 = a.변경발생일자  ");
            stringBuilder.AppendLine(" \t\tand p3.발생일련번호 = a.변경발생일련번호 and a.전표구분 = '지급' ");
            stringBuilder.AppendLine(" \tleft outer join T_계산서매출_HIS x1 on x1.사업자번호 = b.사업자번호 and x1.지점코드 = b.지점코드 ");
            stringBuilder.AppendLine(" \t\tand x1.발생일자 = b.발생일자  ");
            stringBuilder.AppendLine(" \t\tand x1.발생일련번호 = b.발생일련번호 and a.전표구분 = '매출계산서' ");
            stringBuilder.AppendLine(" \tleft outer join T_계산서매출_HIS x2 on x2.사업자번호 = a.사업자번호 and x2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand x2.발생일자 = a.발생일자  ");
            stringBuilder.AppendLine(" \t\tand x2.발생일련번호 = a.발생일련번호 and a.전표구분 = '매출계산서' ");
            stringBuilder.AppendLine(" \tleft outer join T_계산서매출_HIS x3 on x3.사업자번호 = a.사업자번호 and x3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand x3.발생일자 = a.변경발생일자  ");
            stringBuilder.AppendLine(" \t\tand x3.발생일련번호 = a.변경발생일련번호 and a.전표구분 = '매출계산서' ");
            stringBuilder.AppendLine(" \tleft outer join T_계산서매입_HIS y1 on y1.사업자번호 = b.사업자번호 and y1.지점코드 = b.지점코드 ");
            stringBuilder.AppendLine(" \t\tand y1.발생일자 = b.발생일자  ");
            stringBuilder.AppendLine(" \t\tand y1.발생일련번호 = b.발생일련번호 and a.전표구분 = '매입계산서' ");
            stringBuilder.AppendLine(" \tleft outer join T_계산서매입_HIS y2 on y2.사업자번호 = a.사업자번호 and y2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand y2.발생일자 = a.발생일자  ");
            stringBuilder.AppendLine(" \t\tand y2.발생일련번호 = a.발생일련번호 and a.전표구분 = '매입계산서' ");
            stringBuilder.AppendLine(" \tleft outer join T_계산서매입_HIS y3 on y3.사업자번호 = a.사업자번호 and y3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand y3.발생일자 = a.변경발생일자  ");
            stringBuilder.AppendLine(" \t\tand y3.발생일련번호 = a.변경발생일련번호 and a.전표구분 = '매입계산서' ");
            stringBuilder.AppendLine(" \tleft outer join T_창고이동_HIS h1 on h1.사업자번호 = b.사업자번호 and h1.지점코드 = b.지점코드 ");
            stringBuilder.AppendLine(" \t\tand h1.발생일자 = b.발생일자  ");
            stringBuilder.AppendLine(" \t\tand h1.발생일련번호 = b.발생일련번호 and a.전표구분 = '수불' ");
            stringBuilder.AppendLine(" \tleft outer join T_창고이동_HIS h2 on h2.사업자번호 = a.사업자번호 and h2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand h2.발생일자 = a.발생일자  ");
            stringBuilder.AppendLine(" \t\tand h2.발생일련번호 = a.발생일련번호 and a.전표구분 = '수불' ");
            stringBuilder.AppendLine(" \tleft outer join T_창고이동_HIS h3 on h3.사업자번호 = a.사업자번호 and h3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand h3.발생일자 = a.변경발생일자  ");
            stringBuilder.AppendLine(" \t\tand h3.발생일련번호 = a.변경발생일련번호 and a.전표구분 = '수불' ");
            stringBuilder.AppendLine(" \tleft outer join T_지출_HIS m1 on m1.사업자번호 = b.사업자번호 and m1.지점코드 = b.지점코드 ");
            stringBuilder.AppendLine(" \t\tand m1.발생일자 = b.발생일자  ");
            stringBuilder.AppendLine(" \t\tand m1.발생일련번호 = b.발생일련번호 and a.전표구분 = '지출' ");
            stringBuilder.AppendLine(" \tleft outer join T_지출_HIS m2 on m2.사업자번호 = a.사업자번호 and m2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand m2.발생일자 = a.발생일자  ");
            stringBuilder.AppendLine(" \t\tand m2.발생일련번호 = a.발생일련번호 and a.전표구분 = '지출' ");
            stringBuilder.AppendLine(" \tleft outer join T_지출_HIS m3 on m3.사업자번호 = a.사업자번호 and m3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand m3.발생일자 = a.변경발생일자  ");
            stringBuilder.AppendLine(" \t\tand m3.발생일련번호 = a.변경발생일련번호 and a.전표구분 = '지출' ");
            stringBuilder.AppendLine(" \tleft outer join T_장비대여_HIS d1 on d1.사업자번호 = b.사업자번호 and d1.지점코드 = b.지점코드 ");
            stringBuilder.AppendLine(" \t\tand d1.발생일자 = b.발생일자  ");
            stringBuilder.AppendLine(" \t\tand d1.발생일련번호 = b.발생일련번호 and a.전표구분 = '장비대여' ");
            stringBuilder.AppendLine(" \tleft outer join T_장비대여_HIS d2 on d2.사업자번호 = a.사업자번호 and d2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand d2.발생일자 = a.발생일자  ");
            stringBuilder.AppendLine(" \t\tand d2.발생일련번호 = a.발생일련번호 and a.전표구분 = '장비대여' ");
            stringBuilder.AppendLine(" \tleft outer join T_장비대여_HIS d3 on d3.사업자번호 = a.사업자번호 and d3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand d3.발생일자 = a.변경발생일자  ");
            stringBuilder.AppendLine(" \t\tand d3.발생일련번호 = a.변경발생일련번호 and a.전표구분 = '장비대여' ");
            stringBuilder.AppendLine(" \tleft outer join T_장비회수_HIS e1 on e1.사업자번호 = b.사업자번호 and e1.지점코드 = b.지점코드 ");
            stringBuilder.AppendLine(" \t\tand e1.발생일자 = b.발생일자  ");
            stringBuilder.AppendLine(" \t\tand e1.발생일련번호 = b.발생일련번호 and a.전표구분 = '장비회수' ");
            stringBuilder.AppendLine(" \tleft outer join T_장비회수_HIS e2 on e2.사업자번호 = a.사업자번호 and e2.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand e2.발생일자 = a.발생일자  ");
            stringBuilder.AppendLine(" \t\tand e2.발생일련번호 = a.발생일련번호 and a.전표구분 = '장비회수' ");
            stringBuilder.AppendLine(" \tleft outer join T_장비회수_HIS e3 on e3.사업자번호 = a.사업자번호 and e3.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine(" \t\tand e3.발생일자 = a.변경발생일자  ");
            stringBuilder.AppendLine(" \t\tand e3.발생일련번호 = a.변경발생일련번호 and a.전표구분 = '장비회수' ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" \tand a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \tand a.발생일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine(" \tand a.발생일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t" + sCond + " ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" \tleft outer join T_사용자정보 m on m.사업자번호 = z.사업자번호 and m.지점코드 = z.지점코드 and m.사원번호 = z.발생사원번호 ");
            stringBuilder.AppendLine(" \tleft outer join T_거래처정보 z1 on z1.사업자번호 = z.사업자번호 and z1.지점코드 = z.지점코드 and z1.거래처코드 = z.변경전_거래처코드 ");
            stringBuilder.AppendLine(" \tleft outer join T_거래처정보 z2 on z2.사업자번호 = z.사업자번호 and z2.지점코드 = z.지점코드 and z2.거래처코드 = z.거래처코드 ");
            stringBuilder.AppendLine(" \tleft outer join T_거래처정보 z3 on z3.사업자번호 = z.사업자번호 and z3.지점코드 = z.지점코드 and z3.거래처코드 = z.변경후_거래처코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_창고 y1 on y1.사업자번호 = z.사업자번호 and y1.지점코드 = z.지점코드 and y1.코드 = z.변경전_출고창고코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_창고 y2 on y2.사업자번호 = z.사업자번호 and y2.지점코드 = z.지점코드 and y2.코드 = z.출고창고코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_창고 y3 on y3.사업자번호 = z.사업자번호 and y3.지점코드 = z.지점코드 and y3.코드 = z.변경후_출고창고코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_창고 x1 on x1.사업자번호 = z.사업자번호 and x1.지점코드 = z.지점코드 and x1.코드 = z.변경전_입고창고코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_창고 x2 on x2.사업자번호 = z.사업자번호 and x2.지점코드 = z.지점코드 and x2.코드 = z.입고창고코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_창고 x3 on x3.사업자번호 = z.사업자번호 and x3.지점코드 = z.지점코드 and x3.코드 = z.변경후_입고창고코드 ");
            stringBuilder.AppendLine(" \tleft outer join T_사용자정보 m1 on m1.사업자번호 = z.사업자번호 and m1.지점코드 = z.지점코드 and m1.사원번호 = z.변경전_사원번호 ");
            stringBuilder.AppendLine(" \tleft outer join T_사용자정보 m2 on m2.사업자번호 = z.사업자번호 and m2.지점코드 = z.지점코드 and m2.사원번호 = z.사원번호 ");
            stringBuilder.AppendLine(" \tleft outer join T_사용자정보 m3 on m3.사업자번호 = z.사업자번호 and m3.지점코드 = z.지점코드 and m3.사원번호 = z.변경후_사원번호 ");
            stringBuilder.AppendLine(" order by z.발생일시 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_활동보고서_매출처별_List(
          string sDay1,
          string sDay2,
          string sMan,
          string strAllFlag,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호  ");
            stringBuilder.AppendLine(" \t\t\t\t, a.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\t\t, sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.금액  ");
            stringBuilder.AppendLine(" \t\t\t\t\t+ (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t\t(case when b.과세구분 = '2' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\t\telse  ");
            stringBuilder.AppendLine(" \t\t\t\t\t\t(case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t\tend)) as 매출계  ");
            stringBuilder.AppendLine(" \t\t\tinto #Tmp현매출  ");
            stringBuilder.AppendLine(" \t\t\tfrom T_매출 a  ");
            stringBuilder.AppendLine(" \t\t\t\tinner join T_매출항목 b   ");
            stringBuilder.AppendLine(" \t\t\t\t\ton b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드   ");
            stringBuilder.AppendLine(" \t\t\t\t\tand b.매출일자 = a.매출일자   ");
            stringBuilder.AppendLine(" \t\t\t\t\tand b.전표번호 = a.전표번호   ");
            stringBuilder.AppendLine(" \t\t\twhere a.사업자번호 = '" + Common.p_strCompID + "'   ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t\t\t\tand a.매출일자 <= '" + sDay2 + "'  ");
            stringBuilder.AppendLine(" \t\t\tgroup by a.사업자번호, a.거래처코드  ");
            stringBuilder.AppendLine(" select 사업자번호  ");
            stringBuilder.AppendLine(" \t\t\t\t, 거래처코드  ");
            stringBuilder.AppendLine(" \t\t\t\t, sum(합계금액) as 수금계  ");
            stringBuilder.AppendLine(" \t\t\tinto #Tmp현수금  ");
            stringBuilder.AppendLine(" \t\t\tfrom T_수금  ");
            stringBuilder.AppendLine(" \t\t\twhere 사업자번호 = '" + Common.p_strCompID + "'   ");
            stringBuilder.AppendLine("                 and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t\t\t\tand 수금일자 <= '" + sDay2 + "'   ");
            stringBuilder.AppendLine(" \t\t\tgroup by 사업자번호, 거래처코드  ");
            stringBuilder.AppendLine(" select a.사업자번호  ");
            stringBuilder.AppendLine(" \t\t\t\t, a.거래처코드  ");
            stringBuilder.AppendLine(" \t\t\t\t, sum((case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.금액  ");
            stringBuilder.AppendLine(" \t\t\t\t\t+ (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t\t(case when b.과세구분 = '2' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\t\telse  ");
            stringBuilder.AppendLine(" \t\t\t\t\t\t(case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t\tend)) as 매입계  ");
            stringBuilder.AppendLine(" \t\t\tinto #Tmp현매입  ");
            stringBuilder.AppendLine(" \t\t\tfrom T_매입 a  ");
            stringBuilder.AppendLine(" \t\t\t\tinner join T_매입항목 b   ");
            stringBuilder.AppendLine(" \t\t\t\t\ton b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드  ");
            stringBuilder.AppendLine(" \t\t\t\t\t\tand b.매입일자 = a.매입일자   ");
            stringBuilder.AppendLine(" \t\t\t\t\t\tand b.전표번호 = a.전표번호   ");
            stringBuilder.AppendLine(" \t\t\twhere a.사업자번호 = '" + Common.p_strCompID + "'   ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t\t\t\tand a.매입일자 <= '" + sDay2 + "'   ");
            stringBuilder.AppendLine(" \t\t\tgroup by a.사업자번호, a.거래처코드  ");
            stringBuilder.AppendLine(" select 사업자번호  ");
            stringBuilder.AppendLine(" \t\t\t\t, 거래처코드  ");
            stringBuilder.AppendLine(" \t\t\t\t, sum(합계금액) as 지급계  ");
            stringBuilder.AppendLine(" \t\t\tinto #Tmp현지급  ");
            stringBuilder.AppendLine(" \t\t\tfrom T_지급  ");
            stringBuilder.AppendLine(" \t\t\twhere 사업자번호 = '" + Common.p_strCompID + "'   ");
            stringBuilder.AppendLine("                 and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t\t\t\tand 지급일자 <= '" + sDay2 + "'   ");
            stringBuilder.AppendLine(" \t\t\tgroup by 사업자번호, 거래처코드  ");
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.매출일자 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.매출시각 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , a.창고코드 ");
            stringBuilder.AppendLine("     , a.부가세코드 ");
            stringBuilder.AppendLine("     , p.상품명 ");
            stringBuilder.AppendLine("     , p.규격 ");
            stringBuilder.AppendLine(" \t, isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) * aa.박스수량, 0) as 박스수량  ");
            stringBuilder.AppendLine(" \t, isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) * aa.중간수량, 0) as 중간수량  ");
            stringBuilder.AppendLine(" \t, isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) * aa.낱개수량, 0) as 낱개수량  ");
            stringBuilder.AppendLine(" \t, isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) * aa.총수량, 0) as 총수량  ");
            stringBuilder.AppendLine(" \t, isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) * aa.서비스박스, 0) as 서비스박스  ");
            stringBuilder.AppendLine(" \t, isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) * aa.서비스낱개, 0) as 서비스낱개  ");
            stringBuilder.AppendLine(" \t, isnull(convert(float, floor(aa.박스단가 * 100) / 100), 0) as 박스단가  ");
            stringBuilder.AppendLine(" \t, isnull(convert(float, floor(aa.낱개단가 * 100) / 100), 0) as 낱개단가  ");
            stringBuilder.AppendLine(" \t, isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) * aa.금액  ");
            stringBuilder.AppendLine(" \t\t+ (case when aa.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t(case when aa.과세구분 = '2' then 0  ");
            stringBuilder.AppendLine(" \t\telse  ");
            stringBuilder.AppendLine(" \t\t\t(case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(aa.금액 * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\tend), 0) as 포함금액  ");
            stringBuilder.AppendLine(" \t, isnull(b.포함금액계, 0) as 매출계 ");
            stringBuilder.AppendLine(" \t, isnull(convert(nvarchar(19), a.서명일시, 120), '') as 서명일시  ");
            stringBuilder.AppendLine("     , isnull(bb.수금액, 0) as 수금액 ");
            stringBuilder.AppendLine("     , isnull(bb.할인액, 0) as 할인액 ");
            stringBuilder.AppendLine("     , aa.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , case when isnull(bb.수금구분명, '') = '' then '' else '[' + bb.수금구분명 + '] ' end + a.비고 as 비고 ");
            stringBuilder.AppendLine(" \t, isnull(d.초기잔고, 0) as 초기잔고  ");
            stringBuilder.AppendLine(" \t, isnull(d.초기잔고, 0) + isnull(pre.매출계, 0) - isnull(pre2.수금계, 0) - isnull(pr.매입계, 0) + isnull(pr2.지급계, 0) as 잔고  ");
            stringBuilder.AppendLine(" \t, isnull(convert(float, floor(aa.박스입고단가 * 100) / 100), 0) as 박스입고단가  ");
            stringBuilder.AppendLine(" \t, isnull(convert(float, floor(aa.낱개입고단가 * 100) / 100), 0) as 낱개입고단가  ");
            stringBuilder.AppendLine(" \t, isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\tround(aa.금액 - aa.박스수량 * aa.박스입고단가, 0), 0) as 박스이익금  ");
            stringBuilder.AppendLine(" \t, isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\tround(aa.금액 - aa.총수량 * aa.낱개입고단가, 0), 0) as 낱개이익금  ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) * aa.박스수량, 0) as 표시총수량  ");
                stringBuilder.AppendLine("     , isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) * aa.서비스박스, 0) as 표시서비스  ");
                stringBuilder.AppendLine("     , isnull(convert(float, floor(aa.박스단가 * 100) / 100), 0) as 표시단가  ");
                stringBuilder.AppendLine("     , isnull(convert(float, floor(aa.박스입고단가 * 100) / 100), 0) as 표시입고단가  ");
                stringBuilder.AppendLine("     , isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) *  ");
                stringBuilder.AppendLine("             round(aa.금액 - aa.박스수량 * aa.박스입고단가, 0), 0) as 표시이익금  ");
            }
            else
            {
                stringBuilder.AppendLine("     , isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) * aa.총수량, 0) as 표시총수량  ");
                stringBuilder.AppendLine("     , isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) * aa.서비스낱개, 0) as 표시서비스  ");
                stringBuilder.AppendLine("     , isnull(convert(float, floor(aa.낱개단가 * 100) / 100), 0) as 표시단가  ");
                stringBuilder.AppendLine("     , isnull(convert(float, floor(aa.낱개입고단가 * 100) / 100), 0) as 표시입고단가  ");
                stringBuilder.AppendLine("     , isnull((case when aa.매출구분 in ('1', '2') then 1 else -1 end) *  ");
                stringBuilder.AppendLine("             round(aa.금액 - aa.총수량 * aa.낱개입고단가, 0), 0) as 표시이익금  ");
            }
            stringBuilder.AppendLine("     , d.거래처명 ");
            stringBuilder.AppendLine("     , a.등록사원번호 ");
            stringBuilder.AppendLine("     , a.담당사원 ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine(" \t, isnull(convert(nvarchar(19), a.등록일시, 120), '') as 등록일시  ");
            stringBuilder.AppendLine("     , c6.계좌별칭 ");
            stringBuilder.AppendLine(" from T_매출 a ");
            stringBuilder.AppendLine("      inner join T_매출항목 aa on aa.사업자번호 = a.사업자번호 and aa.지점코드 = a.지점코드 and aa.매출일자 = a.매출일자 and aa.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join T_상품정보 p on p.사업자번호 = aa.사업자번호 and p.지점코드 = aa.지점코드 and p.상품코드 = aa.상품코드 ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("      left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("      left outer join T_업체계좌 c6 on c6.계좌순번 = d.계좌순번 and c6.사업자번호 = d.사업자번호 and c6.지점코드 = d.지점코드 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                             , count(*) as 품목수 ");
            stringBuilder.AppendLine("                             , sum(b.총수량) as 총수량 ");
            stringBuilder.AppendLine("                             , sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("                                     (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                     else ");
            stringBuilder.AppendLine("                                         (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("                                         else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("                                     end) ");
            stringBuilder.AppendLine("                                 ) as 포함금액계 ");
            stringBuilder.AppendLine("                         from T_매출 a ");
            stringBuilder.AppendLine("                             inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매출일자, a.전표번호 ");
            stringBuilder.AppendLine("                         ) b on b.사업자번호 = a.사업자번호 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      left outer join (select a.사업자번호, a.매출일자, a.매출전표번호 ");
            stringBuilder.AppendLine("                             , max(c9.명칭) as 수금구분명 ");
            stringBuilder.AppendLine("                             , sum(a.수금액) as 수금액 ");
            stringBuilder.AppendLine("                             , sum(a.할인액) as 할인액 ");
            stringBuilder.AppendLine("                             , sum(a.합계금액) as 수금합계 ");
            stringBuilder.AppendLine("                         from T_수금 a ");
            stringBuilder.AppendLine("                             left outer join C_금전구분 c9 on c9.코드 = a.수금구분 ");
            stringBuilder.AppendLine("                         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                             and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                         group by a.사업자번호, a.매출일자, a.매출전표번호 ");
            stringBuilder.AppendLine("                         ) bb on d.사업자번호 = a.사업자번호 and bb.매출일자 = a.매출일자 and bb.매출전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" \tleft outer join #Tmp현매출 pre on pre.사업자번호 = a.사업자번호 and pre.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \tleft outer join #Tmp현수금 pre2 on pre2.사업자번호 = a.사업자번호 and pre2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \tleft outer join #Tmp현매입 pr on pr.사업자번호 = a.사업자번호 and pr.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \tleft outer join #Tmp현지급 pr2 on pr2.사업자번호 = a.사업자번호 and pr2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                {
                    stringBuilder.AppendLine("                         and a.등록사원번호 = '" + sMan + "' ");
                }
                else
                {
                    stringBuilder.AppendLine("                         and a.거래처코드 in (select 거래처코드 from T_거래처정보 ");
                    stringBuilder.AppendLine("                                             where 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine("                                             and 사원번호 = '" + sMan + "') ");
                }
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.수금일자 ");
            stringBuilder.AppendLine("     , convert(nvarchar(10), a.전표번호) ");
            stringBuilder.AppendLine("     , '수금' as 매출시각 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , '' as 창고코드 ");
            stringBuilder.AppendLine("     , '' as 부가세코드 ");
            stringBuilder.AppendLine("     , '수금 [' + c9.명칭 + ']' as 상품명 ");
            stringBuilder.AppendLine("     , '' as 규격 ");
            stringBuilder.AppendLine(" \t, 0 as 박스수량  ");
            stringBuilder.AppendLine(" \t, 0 as 중간수량  ");
            stringBuilder.AppendLine(" \t, 0 as 낱개수량  ");
            stringBuilder.AppendLine(" \t, 0 as 총수량  ");
            stringBuilder.AppendLine(" \t, 0 as 서비스박스  ");
            stringBuilder.AppendLine(" \t, 0 as 서비스낱개  ");
            stringBuilder.AppendLine(" \t, 0 as 박스단가  ");
            stringBuilder.AppendLine(" \t, 0 as 낱개단가  ");
            stringBuilder.AppendLine(" \t, 0 as 포함금액  ");
            stringBuilder.AppendLine(" \t, 0 as 매출계 ");
            stringBuilder.AppendLine("     , '' as 서명일시 ");
            stringBuilder.AppendLine("     , isnull(a.수금액, 0) as 수금액 ");
            stringBuilder.AppendLine("     , isnull(a.할인액, 0) as 할인액 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , '[' + c9.명칭 + '] ' + a.비고 as 비고 ");
            stringBuilder.AppendLine(" \t, isnull(d.초기잔고, 0) as 초기잔고  ");
            stringBuilder.AppendLine(" \t, isnull(d.초기잔고, 0) + isnull(pre.매출계, 0) - isnull(pre2.수금계, 0) - isnull(pr.매입계, 0) + isnull(pr2.지급계, 0) as 잔고  ");
            stringBuilder.AppendLine(" \t, 0 as 박스입고단가  ");
            stringBuilder.AppendLine(" \t, 0 as 낱개입고단가  ");
            stringBuilder.AppendLine(" \t, 0 as 박스이익금  ");
            stringBuilder.AppendLine(" \t, 0 as 낱개이익금  ");
            stringBuilder.AppendLine("     , 0 as 표시총수량  ");
            stringBuilder.AppendLine("     , 0 as 표시서비스  ");
            stringBuilder.AppendLine("     , 0 as 표시단가  ");
            stringBuilder.AppendLine("     , 0 as 표시입고단가  ");
            stringBuilder.AppendLine("     , 0 as 표시이익금  ");
            stringBuilder.AppendLine("     , d.거래처명 ");
            stringBuilder.AppendLine("     , a.등록사원번호 ");
            stringBuilder.AppendLine("     , a.담당사원 ");
            stringBuilder.AppendLine("     , '' as 창고명 ");
            stringBuilder.AppendLine(" \t, isnull(convert(nvarchar(19), a.등록일시, 120), '') as 등록일시  ");
            stringBuilder.AppendLine("     , c6.계좌별칭 ");
            stringBuilder.AppendLine(" from T_수금 a ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_업체계좌 c6 on c6.계좌순번 = d.계좌순번 and c6.지점코드 = d.지점코드 and c6.사업자번호 = d.사업자번호 ");
            stringBuilder.AppendLine("      left outer join C_금전구분 c9 on c9.코드 = a.수금구분 ");
            stringBuilder.AppendLine(" \tleft outer join #Tmp현매출 pre on pre.사업자번호 = a.사업자번호 and pre.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \tleft outer join #Tmp현수금 pre2 on pre2.사업자번호 = a.사업자번호 and pre2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \tleft outer join #Tmp현매입 pr on pr.사업자번호 = a.사업자번호 and pr.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \tleft outer join #Tmp현지급 pr2 on pr2.사업자번호 = a.사업자번호 and pr2.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수금일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.수금일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("     and isnull(a.매출일자, '') = '' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                {
                    stringBuilder.AppendLine("                         and a.등록사원번호 = '" + sMan + "' ");
                }
                else
                {
                    stringBuilder.AppendLine("                         and a.거래처코드 in (select 거래처코드 from T_거래처정보 ");
                    stringBuilder.AppendLine("                                             where 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine("                                             and 사원번호 = '" + sMan + "') ");
                }
            }
            stringBuilder.AppendLine(" ) a ");
            stringBuilder.AppendLine(" order by a.등록일시 asc, a.매출일자 asc, a.전표번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_활동보고서_상품별(
          string sDay1,
          string sWare,
          string sMan,
          bool bOrder,
          bool bZero,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                    else 0 end) * y.총수량) as 금일매입량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                    else 0 end) * y.서비스총수량) as 금일매입서비스총수량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp금일매입 ");
            stringBuilder.AppendLine("\t\t    from T_매입 x ");
            stringBuilder.AppendLine("\t\t\t    left outer join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.매입일자 = @p_day1 ");
            stringBuilder.AppendLine("\t\t\t    and x.창고코드 = '" + sWare + "' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                {
                    stringBuilder.AppendLine("             and x.등록사원번호 = '" + sMan + "' ");
                }
                else
                {
                    stringBuilder.AppendLine("\t\t\t    and x.거래처코드 in (select 거래처코드 from T_거래처정보 ");
                    stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine("                             and 사원번호 = '" + sMan + "') ");
                }
            }
            stringBuilder.AppendLine("\t\t    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("                         else 0 end) * y.총수량) as 금일매출량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '3' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("                         else 0 end) * y.총수량) as 금일정상반품량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '3' then 0 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '4' then 1 ");
            stringBuilder.AppendLine("                         else 0 end) * y.총수량) as 금일불량반품량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("                         else 0 end) * y.서비스총수량) as 금일매출서비스총수량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '3' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("                         else 0 end) * y.서비스총수량) as 금일정상반품서비스총수량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '3' then 0 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '4' then 1 ");
            stringBuilder.AppendLine("                         else 0 end) * y.서비스총수량) as 금일불량반품서비스총수량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp금일매출 ");
            stringBuilder.AppendLine("\t\t    from T_매출 x ");
            stringBuilder.AppendLine("\t\t\t    left outer join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.매출일자 = @p_day1 ");
            stringBuilder.AppendLine("\t\t\t    and x.창고코드 = '" + sWare + "' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                {
                    stringBuilder.AppendLine("             and x.등록사원번호 = '" + sMan + "' ");
                }
                else
                {
                    stringBuilder.AppendLine("\t\t\t    and x.거래처코드 in (select 거래처코드 from T_거래처정보 ");
                    stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine("                             and 사원번호 = '" + sMan + "') ");
                }
            }
            stringBuilder.AppendLine("\t\t    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.입고창고코드, y.상품코드, sum(y.총수량) as 금일입고량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp금일입고 ");
            stringBuilder.AppendLine("\t\t    from T_창고이동 x ");
            stringBuilder.AppendLine("\t\t\t    left outer join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.수불일자 = @p_day1 ");
            stringBuilder.AppendLine("\t\t\t    and x.입고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\t    group by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.출고창고코드, y.상품코드, sum(y.총수량) as 금일출고량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp금일출고 ");
            stringBuilder.AppendLine("\t\t    from T_창고이동 x ");
            stringBuilder.AppendLine("\t\t\t    left outer join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.수불일자 = @p_day1 ");
            stringBuilder.AppendLine("\t\t\t    and x.출고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\t    group by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                    else 0 end) * y.총수량) as 전체매입량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                    else 0 end) * y.서비스총수량) as 전체매입서비스총수량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp매입 ");
            stringBuilder.AppendLine("\t\t    from T_매입 x ");
            stringBuilder.AppendLine("\t\t\t    left outer join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.매입일자 <= @p_day1 ");
            stringBuilder.AppendLine("\t\t\t    and x.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\t    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("                         else 0 end) * y.총수량) as 전체매출량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("                         else 0 end) * y.서비스총수량) as 전체매출서비스총수량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp매출 ");
            stringBuilder.AppendLine("\t\t    from T_매출 x ");
            stringBuilder.AppendLine("\t\t\t    left outer join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.매출일자 <= @p_day1 ");
            stringBuilder.AppendLine("\t\t\t    and x.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\t    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.입고창고코드, y.상품코드, sum(y.총수량) as 전체입고량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp입고 ");
            stringBuilder.AppendLine("\t\t    from T_창고이동 x ");
            stringBuilder.AppendLine("\t\t\t    left outer join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.수불일자 <= @p_day1 ");
            stringBuilder.AppendLine("\t\t\t    and x.입고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\t    group by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.출고창고코드, y.상품코드, sum(y.총수량) as 전체출고량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp출고 ");
            stringBuilder.AppendLine("\t\t    from T_창고이동 x ");
            stringBuilder.AppendLine("\t\t\t    left outer join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.수불일자 <= @p_day1 ");
            stringBuilder.AppendLine("\t\t\t    and x.출고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\t    group by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                    else 0 end) * y.총수량) as 전체매입량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                    else 0 end) * y.서비스총수량) as 전체매입서비스총수량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp전일매입 ");
            stringBuilder.AppendLine("\t\t    from T_매입 x ");
            stringBuilder.AppendLine("\t\t\t    left outer join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.매입일자 < @p_day1 ");
            stringBuilder.AppendLine("\t\t\t    and x.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\t    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("                         else 0 end) * y.총수량) as 전체매출량 ");
            stringBuilder.AppendLine("\t\t        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("                         when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("                         else 0 end) * y.서비스총수량) as 전체매출서비스총수량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp전일매출 ");
            stringBuilder.AppendLine("\t\t    from T_매출 x ");
            stringBuilder.AppendLine("\t\t\t    left outer join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.매출일자 < @p_day1 ");
            stringBuilder.AppendLine("\t\t\t    and x.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\t    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.입고창고코드, y.상품코드, sum(y.총수량) as 전체입고량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp전일입고 ");
            stringBuilder.AppendLine("\t\t    from T_창고이동 x ");
            stringBuilder.AppendLine("\t\t\t    left outer join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.수불일자 < @p_day1 ");
            stringBuilder.AppendLine("\t\t\t    and x.입고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\t    group by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.출고창고코드, y.상품코드, sum(y.총수량) as 전체출고량 ");
            stringBuilder.AppendLine("\t\t    into #Tmp전일출고 ");
            stringBuilder.AppendLine("\t\t    from T_창고이동 x ");
            stringBuilder.AppendLine("\t\t\t    left outer join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("\t\t    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t    and x.수불일자 < @p_day1 ");
            stringBuilder.AppendLine("\t\t\t    and x.출고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\t    group by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine("select  ");
            stringBuilder.AppendLine("\t    b.상품코드 ");
            stringBuilder.AppendLine("\t    , b.상품명 ");
            stringBuilder.AppendLine("\t    , b.규격 ");
            stringBuilder.AppendLine("\t    , isnull(q.금일매입량, 0) + isnull(q.금일매입서비스총수량, 0) + isnull(s.금일입고량, 0) as 금일입고 ");
            stringBuilder.AppendLine("\t    , isnull(w.금일출고량, 0) as 금일출고 ");
            stringBuilder.AppendLine("\t    , isnull(r.금일매출량, 0) + isnull(r.금일매출서비스총수량, 0) as 금일판매 ");
            stringBuilder.AppendLine("\t    , isnull(r.금일정상반품량, 0) + isnull(r.금일정상반품서비스총수량, 0) as 금일정상반품 ");
            stringBuilder.AppendLine("\t    , isnull(r.금일불량반품량, 0) + isnull(r.금일불량반품서비스총수량, 0) as 금일불량반품 ");
            stringBuilder.AppendLine("\t    , isnull(e.초기재고, 0) + isnull(a1.전체매입량, 0) + isnull(a1.전체매입서비스총수량, 0) ");
            stringBuilder.AppendLine("\t        - isnull(a2.전체매출량, 0) - isnull(a2.전체매출서비스총수량, 0) ");
            stringBuilder.AppendLine("\t        + isnull(a3.전체입고량, 0) - isnull(a4.전체출고량, 0) as 현재고 ");
            stringBuilder.AppendLine("\t    , isnull(e.초기재고, 0) + isnull(b1.전체매입량, 0) + isnull(b1.전체매입서비스총수량, 0) ");
            stringBuilder.AppendLine("\t        - isnull(b2.전체매출량, 0) - isnull(b2.전체매출서비스총수량, 0) ");
            stringBuilder.AppendLine("\t        + isnull(b3.전체입고량, 0) - isnull(b4.전체출고량, 0) as 전일재고 ");
            stringBuilder.AppendLine(" from T_상품정보 b ");
            stringBuilder.AppendLine("\t    left outer join T_상품창고별재고 e on e.사업자번호 = b.사업자번호 and e.지점코드 = b.지점코드 and e.상품코드 = b.상품코드 and e.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t    left outer join #Tmp금일매입 q on q.창고코드 = '" + sWare + "' and q.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp금일매출 r on r.창고코드 = '" + sWare + "' and r.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp금일입고 s on s.입고창고코드 = '" + sWare + "' and s.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp금일출고 w on w.출고창고코드 = '" + sWare + "' and w.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp매입 a1 on a1.창고코드 = '" + sWare + "' and a1.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp매출 a2 on a2.창고코드 = '" + sWare + "' and a2.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp입고 a3 on a3.입고창고코드 = '" + sWare + "' and a3.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp출고 a4 on a4.출고창고코드 = '" + sWare + "' and a4.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp전일매입 b1 on b1.창고코드 = '" + sWare + "' and b1.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp전일매출 b2 on b2.창고코드 = '" + sWare + "' and b2.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp전일입고 b3 on b3.입고창고코드 = '" + sWare + "' and b3.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp전일출고 b4 on b4.출고창고코드 = '" + sWare + "' and b4.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("\t    and b.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and b.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t    and b.사용여부 = '0' ");
            if (bZero)
            {
                stringBuilder.AppendLine("\t    and isnull(e.초기재고, 0) + isnull(a1.전체매입량, 0) + isnull(a1.전체매입서비스총수량, 0) ");
                stringBuilder.AppendLine("\t        - isnull(a2.전체매출량, 0) - isnull(a2.전체매출서비스총수량, 0) ");
                stringBuilder.AppendLine("\t        + isnull(a3.전체입고량, 0) - isnull(a4.전체출고량, 0) <> 0 ");
            }
            if (bOrder)
                stringBuilder.AppendLine(" order by b.정렬순서 asc, b.상품코드 asc ");
            else
                stringBuilder.AppendLine(" order by b.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_활동보고서_종합(
          string sDay1,
          string sWare,
          string sMan,
          string[] sProdCode,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select 사업자번호 ");
            stringBuilder.AppendLine("                         , 거래처코드 ");
            stringBuilder.AppendLine("                         , sum(수금액) as 수금액 ");
            stringBuilder.AppendLine("\t\t\t\t\t\tinto #Tmp금일수금 ");
            stringBuilder.AppendLine("\t\t\t\t\t\tfrom T_수금 ");
            stringBuilder.AppendLine("\t\t\t\t\t\twhere 사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("                         and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\tand 수금일자 = '" + sDay1 + "'  ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                {
                    stringBuilder.AppendLine("                         and 등록사원번호 = '" + sMan + "' ");
                }
                else
                {
                    stringBuilder.AppendLine("                         and 거래처코드 in (select 거래처코드 from T_거래처정보 ");
                    stringBuilder.AppendLine("                                             where 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine("                                             and 사원번호 = '" + sMan + "') ");
                }
            }
            stringBuilder.AppendLine("\t\t\t\t\t\tgroup by 사업자번호, 거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t, a.거래처코드 ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t, sum((case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.금액 ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t    + (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\t(case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\telse ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\t\t(case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\tend)) as 매출계 ");
            stringBuilder.AppendLine("\t\t\t\t\t\tinto #Tmp매출 ");
            stringBuilder.AppendLine("\t\t\t\t\t\tfrom T_매출 a ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\tleft outer join T_매출항목 b  ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\ton b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드  ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\tand b.매출일자 = a.매출일자  ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\tand b.전표번호 = a.전표번호  ");
            stringBuilder.AppendLine("\t\t\t\t\t\twhere a.사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("                         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\tand a.매출일자 <= '" + sDay1 + "'  ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                {
                    stringBuilder.AppendLine("                         and a.등록사원번호 = '" + sMan + "' ");
                }
                else
                {
                    stringBuilder.AppendLine("                         and a.거래처코드 in (select 거래처코드 from T_거래처정보 ");
                    stringBuilder.AppendLine("                                             where 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine("                                             and 사원번호 = '" + sMan + "') ");
                }
            }
            stringBuilder.AppendLine("\t\t\t\t\t\tgroup by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select 사업자번호 ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t, 거래처코드 ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t, sum(합계금액) as 수금계 ");
            stringBuilder.AppendLine("\t\t\t\t\t\tinto #Tmp수금 ");
            stringBuilder.AppendLine("\t\t\t\t\t\tfrom T_수금 ");
            stringBuilder.AppendLine("\t\t\t\t\t\twhere 사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("                         and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\tand 수금일자 <= '" + sDay1 + "'  ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                {
                    stringBuilder.AppendLine("                         and 등록사원번호 = '" + sMan + "' ");
                }
                else
                {
                    stringBuilder.AppendLine("                         and 거래처코드 in (select 거래처코드 from T_거래처정보 ");
                    stringBuilder.AppendLine("                                             where 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine("                                             and 사원번호 = '" + sMan + "') ");
                }
            }
            stringBuilder.AppendLine("\t\t\t\t\t\tgroup by 사업자번호, 거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t, a.거래처코드 ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t, sum((case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.금액 ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t    + (case when b.매입구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\t(case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\telse ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\t\t(case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\tend)) as 매입계 ");
            stringBuilder.AppendLine("\t\t\t\t\t\tinto #Tmp매입 ");
            stringBuilder.AppendLine("\t\t\t\t\t\tfrom T_매입 a ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\tleft outer join T_매입항목 b  ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\ton b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드  ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\tand b.매입일자 = a.매입일자  ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t\tand b.전표번호 = a.전표번호  ");
            stringBuilder.AppendLine("\t\t\t\t\t\twhere a.사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("                         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\tand a.매입일자 <= '" + sDay1 + "'  ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                {
                    stringBuilder.AppendLine("                         and a.등록사원번호 = '" + sMan + "' ");
                }
                else
                {
                    stringBuilder.AppendLine("                         and a.거래처코드 in (select 거래처코드 from T_거래처정보 ");
                    stringBuilder.AppendLine("                                             where 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine("                                             and 사원번호 = '" + sMan + "') ");
                }
            }
            stringBuilder.AppendLine("\t\t\t\t\t\tgroup by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select 사업자번호 ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t, 거래처코드 ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\t, sum(합계금액) as 지급계 ");
            stringBuilder.AppendLine("\t\t\t\t\t\tinto #Tmp지급 ");
            stringBuilder.AppendLine("\t\t\t\t\t\tfrom T_지급 ");
            stringBuilder.AppendLine("\t\t\t\t\t\twhere 사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("                         and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t\t\t\t\tand 지급일자 <= '" + sDay1 + "'  ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                {
                    stringBuilder.AppendLine("                         and 등록사원번호 = '" + sMan + "' ");
                }
                else
                {
                    stringBuilder.AppendLine("                         and 거래처코드 in (select 거래처코드 from T_거래처정보 ");
                    stringBuilder.AppendLine("                                             where 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine("                                             and 사원번호 = '" + sMan + "') ");
                }
            }
            stringBuilder.AppendLine("\t\t\t\t\t\tgroup by 사업자번호, 거래처코드 ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     x.* ");
            stringBuilder.AppendLine("     , isnull(m.수금액, 0) as 수금액 ");
            stringBuilder.AppendLine("     , isnull(x.초기잔고, 0) + isnull(pre.매출계, 0) - isnull(pre2.수금계, 0) - isnull(pr.매입계, 0) + isnull(pr2.지급계, 0) as 잔고 ");
            stringBuilder.AppendLine(" from (  ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     z.등록일시 ");
            stringBuilder.AppendLine("     , z.매출일자 ");
            stringBuilder.AppendLine("     , z.전표번호 ");
            stringBuilder.AppendLine("     , z.거래처코드 ");
            stringBuilder.AppendLine("     , max(z.거래처명) as 거래처명 ");
            for (int index = 0; index < sProdCode.Length; ++index)
                stringBuilder.AppendLine("     , sum(z.상품매출" + index.ToString() + ") as 상품매출" + index.ToString() + " ");
            stringBuilder.AppendLine("     , sum(z.매출계) as 매출계 ");
            stringBuilder.AppendLine("     , isnull(max(z.초기잔고), 0) as 초기잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     isnull(convert(nvarchar(19), a.등록일시, 120), '') as 등록일시 ");
            stringBuilder.AppendLine("     , a.매출일자     ");
            stringBuilder.AppendLine("     , a.전표번호     ");
            stringBuilder.AppendLine("     , a.거래처코드   ");
            stringBuilder.AppendLine("     , w.거래처명     ");
            stringBuilder.AppendLine("     , w.초기잔고     ");
            stringBuilder.AppendLine("     , c.입수수량     ");
            for (int index = 0; index < sProdCode.Length; ++index)
            {
                stringBuilder.AppendLine("     , case when b.상품코드 = '" + sProdCode[index] + "' then ");
                stringBuilder.AppendLine("         (case when b.매출구분 = '1' then 1 ");
                stringBuilder.AppendLine("             when b.매출구분 = '2' then 1 ");
                stringBuilder.AppendLine("             when b.매출구분 = '3' then -1 ");
                stringBuilder.AppendLine("             when b.매출구분 = '4' then -1 ");
                stringBuilder.AppendLine("             else 0 end) * b.총수량 ");
                stringBuilder.AppendLine("         + (case when b.매출구분 = '1' then 1 ");
                stringBuilder.AppendLine("             when b.매출구분 = '2' then 1 ");
                stringBuilder.AppendLine("             when b.매출구분 = '3' then -1 ");
                stringBuilder.AppendLine("             when b.매출구분 = '4' then -1 ");
                stringBuilder.AppendLine("             else 0 end) * b.서비스총수량 ");
                stringBuilder.AppendLine("         else 0 end as 상품매출" + index.ToString() + " ");
            }
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.금액 ");
            stringBuilder.AppendLine("         + (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("             else ");
            stringBuilder.AppendLine("                 (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) as 매출계 ");
            stringBuilder.AppendLine(" from T_매출 a ");
            stringBuilder.AppendLine("      inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호  ");
            stringBuilder.AppendLine("      inner join T_거래처정보 w on w.사업자번호 = a.사업자번호 and w.지점코드 = a.지점코드 and w.거래처코드 = a.거래처코드  ");
            stringBuilder.AppendLine("      inner join T_상품정보 c on c.사업자번호 = b.사업자번호 and c.지점코드 = b.지점코드 and c.상품코드 = b.상품코드  ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 = '" + sDay1 + "'  ");
            if (sWare != "")
                stringBuilder.AppendLine("     and a.창고코드 = '" + sWare + "' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                {
                    stringBuilder.AppendLine(" \tand a.거래처코드 in (  ");
                    stringBuilder.AppendLine(" \t\t\t\t\t\tselect 거래처코드 ");
                    stringBuilder.AppendLine(" \t\t\t\t\t\tfrom T_매출 ");
                    stringBuilder.AppendLine(" \t\t\t\t\t\twhere 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine(" \t\t\t\t\t\t\tand 매출일자 = '" + sDay1 + "' ");
                    stringBuilder.AppendLine("                             and 등록사원번호 = '" + sMan + "' ");
                    stringBuilder.AppendLine(" \t\t\t\t\t\tunion all ");
                    stringBuilder.AppendLine(" \t\t\t\t\t\tselect 거래처코드 ");
                    stringBuilder.AppendLine(" \t\t\t\t\t\tfrom T_수금 ");
                    stringBuilder.AppendLine(" \t\t\t\t\t\twhere 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine(" \t\t\t\t\t\t\tand 수금일자 = '" + sDay1 + "' ");
                    stringBuilder.AppendLine(" \t\t\t\t\t\t\tand isnull(매출일자, '') = ''  ");
                    stringBuilder.AppendLine("                             and 등록사원번호 = '" + sMan + "' ");
                    stringBuilder.AppendLine(" \t\t\t\t\t\t) ");
                }
                else
                {
                    stringBuilder.AppendLine("     and a.거래처코드 in (select 거래처코드 from T_거래처정보 ");
                    stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine("                             and 사원번호 = '" + sMan + "') ");
                }
            }
            stringBuilder.AppendLine(" ) z  ");
            stringBuilder.AppendLine(" group by z.등록일시 ");
            stringBuilder.AppendLine("     , z.매출일자 ");
            stringBuilder.AppendLine("     , z.전표번호 ");
            stringBuilder.AppendLine("     , z.거래처코드 ");
            stringBuilder.AppendLine(" ) x  ");
            stringBuilder.AppendLine("      left outer join #Tmp금일수금 m on m.사업자번호 = '" + Common.p_strCompID + "' and m.거래처코드 = x.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp매출 pre on pre.사업자번호 = '" + Common.p_strCompID + "' and pre.거래처코드 = x.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp수금 pre2 on pre2.사업자번호 ='" + Common.p_strCompID + "' and pre2.거래처코드 = x.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp매입 pr on pr.사업자번호 = '" + Common.p_strCompID + "' and pr.거래처코드 = x.거래처코드 ");
            stringBuilder.AppendLine("      left outer join #Tmp지급 pr2 on pr2.사업자번호 = '" + Common.p_strCompID + "' and pr2.거래처코드 = x.거래처코드 ");
            stringBuilder.AppendLine(" order by x.거래처코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_활동보고서_종합2(
          string sDay1,
          string sWare,
          string sMan,
          string[] sProdCode,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            string str = " '-1' ";
            for (int index = 0; index < sProdCode.Length; ++index)
                str = str + ", '" + sProdCode[index] + "'";
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.구분 ");
            for (int index = 0; index < sProdCode.Length; ++index)
                stringBuilder.AppendLine("     , sum(x.상품" + index.ToString() + ") as 상품" + index.ToString() + " ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     1 as 구분 ");
            for (int index = 0; index < sProdCode.Length; ++index)
            {
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index] + "' then 0 else ");
                stringBuilder.AppendLine("         isnull((select 초기재고 from T_상품창고별재고 where 사업자번호 = a.사업자번호 and 지점코드 = '" + Common.p_strSpotCode + "' and 상품코드 = '" + sProdCode[index] + "' and 창고코드 = '" + sWare + "'), 0) ");
                stringBuilder.AppendLine("         + isnull(b1.전일매입_량, 0) - isnull(b1.전일매출_량, 0) + isnull(b3.전일_입고량, 0) - isnull(b3.전일_출고량, 0) end as 상품" + index.ToString() + " ");
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index] + "' then 0 else ");
                stringBuilder.AppendLine("         a.입수수량 end as 입수수량" + index.ToString() + " ");
            }
            stringBuilder.AppendLine(" from T_상품정보 a ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("\t    left outer join dbo.Func_매입매출계2_전일_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_day1, '', '" + sWare + "', '" + sMan + "') b1 on b1.상품코드 = a.상품코드 ");
            else
                stringBuilder.AppendLine("\t    left outer join dbo.Func_매입매출계_전일_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_day1, '', '" + sWare + "', '') b1 on b1.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join dbo.Func_창고이동계_전일_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_day1, '" + sWare + "') b3 on b3.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 in (" + str + ") ");
            stringBuilder.AppendLine(" union all  ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     2 as 구분 ");
            int index1;
            for (index1 = 0; index1 < sProdCode.Length; ++index1)
            {
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index1] + "' then 0 else ");
                stringBuilder.AppendLine("         isnull(a1.기간매입_량, 0) + isnull(a3.기간_입고량, 0) end as 금일입고" + index1.ToString() + " ");
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index1] + "' then 0 else ");
                stringBuilder.AppendLine("         a.입수수량 end as 입수수량" + index1.ToString() + " ");
            }
            stringBuilder.AppendLine(" from T_상품정보 a ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("\t    left outer join dbo.Func_매입매출계2_기간_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_day1, @p_day1, '', '" + sWare + "', '') a1 on a1.상품코드 = a.상품코드 ");
            else
                stringBuilder.AppendLine("\t    left outer join dbo.Func_매입매출계_기간_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_day1, @p_day1, '', '" + sWare + "', '') a1 on a1.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join dbo.Func_창고이동계_기간_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_day1, @p_day1, '" + sWare + "') a3 on a3.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 in (" + str + ") ");
            stringBuilder.AppendLine(" union all  ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     3 as 구분 ");
            for (index1 = 0; index1 < sProdCode.Length; ++index1)
            {
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index1] + "' then 0 else ");
                stringBuilder.AppendLine("         isnull(a4.기간_출고량, 0) end as 금일출고" + index1.ToString() + " ");
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index1] + "' then 0 else ");
                stringBuilder.AppendLine("         a.입수수량 end as 입수수량" + index1.ToString() + " ");
            }
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine("\t    left outer join dbo.Func_창고이동계_기간_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_day1, @p_day1, '" + sWare + "') a4 on a4.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 in (" + str + ") ");
            stringBuilder.AppendLine(" union all  ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     4 as 구분 ");
            for (index1 = 0; index1 < sProdCode.Length; ++index1)
            {
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index1] + "' then 0 else ");
                stringBuilder.AppendLine("         isnull(a2.기간판매_량, 0) end as 금일매출" + index1.ToString() + " ");
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index1] + "' then 0 else ");
                stringBuilder.AppendLine("         a.입수수량 end as 입수수량" + index1.ToString() + " ");
            }
            stringBuilder.AppendLine(" from T_상품정보 a ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("\t    left outer join dbo.Func_매입매출계2_기간_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_day1, @p_day1, '', '" + sWare + "', '" + sMan + "') a2 on a2.상품코드 = a.상품코드 ");
            else
                stringBuilder.AppendLine("\t    left outer join dbo.Func_매입매출계_기간_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_day1, @p_day1, '', '" + sWare + "', '" + sMan + "') a2 on a2.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 in (" + str + ") ");
            stringBuilder.AppendLine(" union all  ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     5 as 구분 ");
            for (index1 = 0; index1 < sProdCode.Length; ++index1)
            {
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index1] + "' then 0 else ");
                stringBuilder.AppendLine("         isnull(c1.기간정상반품_량, 0) end as 금일정상반품" + index1.ToString() + " ");
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index1] + "' then 0 else ");
                stringBuilder.AppendLine("         a.입수수량 end as 입수수량" + index1.ToString() + " ");
            }
            stringBuilder.AppendLine(" from T_상품정보 a ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("\t    left outer join dbo.Func_매입매출계2_기간_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_day1, @p_day1, '', '" + sWare + "', '" + sMan + "') c1 on c1.상품코드 = a.상품코드 ");
            else
                stringBuilder.AppendLine("\t    left outer join dbo.Func_매입매출계_기간_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_day1, @p_day1, '', '" + sWare + "', '" + sMan + "') c1 on c1.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 in (" + str + ") ");
            stringBuilder.AppendLine(" union all  ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     6 as 구분 ");
            for (index1 = 0; index1 < sProdCode.Length; ++index1)
            {
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index1] + "' then 0 else ");
                stringBuilder.AppendLine("         isnull((select 초기재고 from T_상품창고별재고 where 사업자번호 = a.사업자번호 and 지점코드 = '" + Common.p_strSpotCode + "' and 상품코드 = '" + sProdCode[index1] + "' and 창고코드 = '" + sWare + "'), 0) ");
                stringBuilder.AppendLine("         + isnull(d1.기간매입_량, 0) - isnull(d1.기간매출_량, 0) + isnull(d3.기간_입고량, 0) - isnull(d3.기간_출고량, 0) end as 현재고" + index1.ToString() + " ");
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index1] + "' then 0 else ");
                stringBuilder.AppendLine("         a.입수수량 end as 입수수량" + index1.ToString() + " ");
            }
            stringBuilder.AppendLine(" from T_상품정보 a ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("\t    left outer join dbo.Func_매입매출계2_기간_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_day1, '', '" + sWare + "', '" + sMan + "') d1 on d1.상품코드 = a.상품코드 ");
            else
                stringBuilder.AppendLine("\t    left outer join dbo.Func_매입매출계_기간_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_day1, '', '" + sWare + "', '') d1 on d1.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join dbo.Func_창고이동계_기간_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '2000-01-01', @p_day1, '" + sWare + "') d3 on d3.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 in (" + str + ") ");
            stringBuilder.AppendLine(" union all  ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     7 as 구분 ");
            for (index1 = 0; index1 < sProdCode.Length; ++index1)
            {
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index1] + "' then 0 else ");
                stringBuilder.AppendLine("         isnull(c2.기간불량반품_량, 0) end as 금일불량반품" + index1.ToString() + " ");
                stringBuilder.AppendLine("     , case when a.상품코드 <> '" + sProdCode[index1] + "' then 0 else ");
                stringBuilder.AppendLine("         a.입수수량 end as 입수수량" + index1.ToString() + " ");
            }
            stringBuilder.AppendLine(" from T_상품정보 a ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("\t    left outer join dbo.Func_매입매출계2_기간_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_day1, @p_day1, '', '" + sWare + "', '" + sMan + "') c2 on c2.상품코드 = a.상품코드 ");
            else
                stringBuilder.AppendLine("\t    left outer join dbo.Func_매입매출계_기간_상품('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', @p_day1, @p_day1, '', '" + sWare + "', '" + sMan + "') c2 on c2.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 in (" + str + ") ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine(" group by x.구분 ");
            stringBuilder.AppendLine(" order by x.구분 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_상품_가로헤더(string sCnt, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select top " + sCnt + " ");
            stringBuilder.AppendLine("\t    a.상품코드 ");
            stringBuilder.AppendLine("\t    , a.상품명 ");
            stringBuilder.AppendLine("\t    , a.정렬순서 ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t    and a.사용여부 = '0' ");
            stringBuilder.AppendLine(" order by a.정렬순서 asc, a.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_사원별매출계_List(
          string sDay1,
          string sDay2,
          string sMan,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     sum(z.매출계) as 매출계 ");
            stringBuilder.AppendLine("     , sum(z.반품계) as 반품계 ");
            stringBuilder.AppendLine("     , sum(z.수금계) as 수금계 ");
            stringBuilder.AppendLine("     , sum(z.할인계) as 할인계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     sum( ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         ) as 매출계 ");
            stringBuilder.AppendLine("     , 0 as 반품계 ");
            stringBuilder.AppendLine("     , 0 as 수금계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine(" from T_매출 a ");
            stringBuilder.AppendLine("     inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("     and b.매출구분 in ('1', '2') ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                {
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                }
                else
                {
                    stringBuilder.AppendLine("     and a.거래처코드 in (select 거래처코드 from T_거래처정보 ");
                    stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine("                             and 사원번호 = '" + sMan + "') ");
                }
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     0 as 매출계 ");
            stringBuilder.AppendLine("     , sum( ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         ) as 반품계 ");
            stringBuilder.AppendLine("     , 0 as 수금계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine(" from T_매출 a ");
            stringBuilder.AppendLine("     inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("     and b.매출구분 in ('3', '4') ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                {
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                }
                else
                {
                    stringBuilder.AppendLine("     and a.거래처코드 in (select 거래처코드 from T_거래처정보 ");
                    stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine("                             and 사원번호 = '" + sMan + "') ");
                }
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     0 as 매출계 ");
            stringBuilder.AppendLine("     , 0 as 반품계 ");
            stringBuilder.AppendLine("     , sum(a.수금액) as 수금계 ");
            stringBuilder.AppendLine("     , sum(a.할인액) as 할인계 ");
            stringBuilder.AppendLine(" from T_수금 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수금일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.수금일자 <= '" + sDay2 + "' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                {
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                }
                else
                {
                    stringBuilder.AppendLine("     and a.거래처코드 in (select 거래처코드 from T_거래처정보 ");
                    stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
                    stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                    stringBuilder.AppendLine("                             and 사원번호 = '" + sMan + "') ");
                }
            }
            stringBuilder.AppendLine(") z ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_사원별신규거래처_Count(
          string sDay1,
          string sDay2,
          string sMan,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     count(*) as 거래처수");
            stringBuilder.AppendLine(" from T_거래처정보 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.거래개시일 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.거래개시일 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine("     and a.사원번호 = '" + sMan + "' ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출현황_전표번호별(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_매출현황(condition));
            stringBuilder.AppendLine(" select z.* from ( ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , a.일자명칭 ");
            stringBuilder.AppendLine("     , a.정렬구분 ");
            stringBuilder.AppendLine("     , a.전표분류 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.거래처별칭코드 ");
            stringBuilder.AppendLine("     , a.Old_Code ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , a.거래처명 ");
            stringBuilder.AppendLine("     , a.담당사원명 ");
            stringBuilder.AppendLine("     , a.상품코드  ");
            stringBuilder.AppendLine("     , a.상품명  ");
            stringBuilder.AppendLine("     , a.규격    ");
            stringBuilder.AppendLine("     , a.박스수량 ");
            stringBuilder.AppendLine("     , a.중간수량 ");
            stringBuilder.AppendLine("     , a.낱개수량 ");
            stringBuilder.AppendLine("     , a.총수량 ");
            stringBuilder.AppendLine("     , a.표시단가 ");
            stringBuilder.AppendLine("     , a.금액 ");
            stringBuilder.AppendLine("     , a.부가세액 ");
            stringBuilder.AppendLine("     , a.서비스 ");
            stringBuilder.AppendLine("     , a.서비스금액 ");
            stringBuilder.AppendLine("     , a.구분 ");
            stringBuilder.AppendLine("     , a.구분명칭 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매출현황 a ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , '전표계' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처별칭코드 ");
            stringBuilder.AppendLine("     , '' as Old_Code ");
            stringBuilder.AppendLine("     , '' as 거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , '' as 상품코드  ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 표시단가 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 서비스 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.서비스금액), 0) as 서비스금액 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매출현황 a ");
            stringBuilder.AppendLine(" group by a.일자, a.전표번호 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , '--- 일계 ---' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처별칭코드 ");
            stringBuilder.AppendLine("     , '' as Old_Code ");
            stringBuilder.AppendLine("     , '' as 거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , '' as 상품코드  ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 표시단가 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 서비스 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.서비스금액), 0) as 서비스금액 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매출현황 a ");
            stringBuilder.AppendLine(" group by a.일자 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처별칭코드 ");
            stringBuilder.AppendLine("     , '' as Old_Code ");
            stringBuilder.AppendLine("     , '' as 거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , '' as 상품코드  ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 표시단가 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.부가세액), 0) as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 서비스 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.서비스금액), 0) as 서비스금액 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매출현황 a ");
            stringBuilder.AppendLine(" ) z order by z.일자 asc, z.전표번호 asc, z.정렬구분 asc, z.등록일시 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출현황_거래처별(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_매출현황(condition));
            stringBuilder.AppendLine(" select z.* from ( ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , a.일자명칭 ");
            stringBuilder.AppendLine("     , a.정렬구분 ");
            stringBuilder.AppendLine("     , a.전표분류 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.거래처별칭코드 ");
            stringBuilder.AppendLine("     , a.Old_Code ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , a.거래처명 ");
            stringBuilder.AppendLine("     , a.담당사원명 ");
            stringBuilder.AppendLine("     , a.상품코드  ");
            stringBuilder.AppendLine("     , a.상품명  ");
            stringBuilder.AppendLine("     , a.규격    ");
            stringBuilder.AppendLine("     , a.박스수량 ");
            stringBuilder.AppendLine("     , a.중간수량 ");
            stringBuilder.AppendLine("     , a.낱개수량 ");
            stringBuilder.AppendLine("     , a.총수량 ");
            stringBuilder.AppendLine("     , a.표시단가 ");
            stringBuilder.AppendLine("     , a.금액 ");
            stringBuilder.AppendLine("     , a.부가세액 ");
            stringBuilder.AppendLine("     , a.서비스 ");
            stringBuilder.AppendLine("     , a.구분 ");
            stringBuilder.AppendLine("     , a.구분명칭 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매출현황 a ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder.AppendLine("     , '거래처계' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처별칭코드 ");
            stringBuilder.AppendLine("     , '' as Old_Code ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , '' as 상품코드  ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 표시단가 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 서비스 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매출현황 a ");
            stringBuilder.AppendLine(" group by a.거래처코드 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처별칭코드 ");
            stringBuilder.AppendLine("     , '' as Old_Code ");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , '' as 상품코드  ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 표시단가 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.부가세액), 0) as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 서비스 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매출현황 a ");
            stringBuilder.AppendLine(" ) z order by z.거래처코드, z.일자 asc, z.전표번호 asc, z.정렬구분 asc, z.등록일시 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string get_매출현황(string condition)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.매출일자 as 일자 ");
            stringBuilder.AppendLine("     , a.매출일자 as 일자명칭 ");
            stringBuilder.AppendLine("     , a.전표번호    ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , w.거래처명    ");
            stringBuilder.AppendLine("     , w.Old_Code as 거래처별칭코드 ");
            stringBuilder.AppendLine("     , w.사원번호    ");
            stringBuilder.AppendLine("     , u.사용자명 담당사원명 ");
            stringBuilder.AppendLine("     , b.상품코드    ");
            stringBuilder.AppendLine("     , c.상품명      ");
            stringBuilder.AppendLine("     , c.규격        ");
            stringBuilder.AppendLine("     , c.Old_Code    ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.총수량 as 총수량 ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , convert(float, floor(b.박스단가 * 100) / 100) as 표시단가 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스박스 as 서비스 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스박스 * b.박스단가 as 서비스금액 ");
            }
            else
            {
                stringBuilder.AppendLine("     , convert(float, floor(b.낱개단가 * 100) / 100) as 표시단가 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스낱개 as 서비스 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스낱개 * b.낱개단가 as 서비스금액 ");
            }
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.금액 as 금액 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) as 부가세액 ");
            stringBuilder.AppendLine("     , 1 as 정렬구분 ");
            stringBuilder.AppendLine("     , '매출' as 전표분류 ");
            stringBuilder.AppendLine("     , b.매출구분 as 구분 ");
            stringBuilder.AppendLine("     , r.명칭 as 구분명칭 ");
            stringBuilder.AppendLine("     , a.등록일시    ");
            stringBuilder.AppendLine(" into #Tmp매출현황 ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join T_상품정보 c on c.사업자번호 = b.사업자번호 and c.지점코드 = b.지점코드 and c.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("      inner join C_매출구분 r on r.코드 = b.매출구분 ");
            stringBuilder.AppendLine("      inner join T_거래처정보 w on w.사업자번호 = a.사업자번호 and w.지점코드 = a.지점코드 and w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = w.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     " + condition + " ");
            return stringBuilder.ToString();
        }

        public DataTable fn_수금현황_전표번호별(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_수금현황(condition));
            stringBuilder.AppendLine(" select z.* from ( ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , a.일자명칭 ");
            stringBuilder.AppendLine("     , a.정렬구분 ");
            stringBuilder.AppendLine("     , a.전표분류 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.거래처명 ");
            stringBuilder.AppendLine("     , a.담당사원명 ");
            stringBuilder.AppendLine("     , a.현금금액 ");
            stringBuilder.AppendLine("     , a.무통장금액 ");
            stringBuilder.AppendLine("     , a.카드금액 ");
            stringBuilder.AppendLine("     , a.어음금액 ");
            stringBuilder.AppendLine("     , a.할인액 ");
            stringBuilder.AppendLine("     , a.어음번호 ");
            stringBuilder.AppendLine("     , a.구분 ");
            stringBuilder.AppendLine("     , a.구분명칭 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine(" from #Tmp수금현황 a ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , '--- 일계 ---' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.현금금액), 0) as 현금금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.무통장금액), 0) as 무통장금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.카드금액), 0) as 카드금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.어음금액), 0) as 어음금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.할인액), 0) as 할인액 ");
            stringBuilder.AppendLine("     , '' as 어음번호 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp수금현황 a ");
            stringBuilder.AppendLine(" group by a.일자 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.현금금액), 0) as 현금금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.무통장금액), 0) as 무통장금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.카드금액), 0) as 카드금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.어음금액), 0) as 어음금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.할인액), 0) as 할인액 ");
            stringBuilder.AppendLine("     , '' as 어음번호 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp수금현황 a ");
            stringBuilder.AppendLine(" ) z order by z.일자 asc, z.전표번호 asc, z.정렬구분 asc, z.등록일시 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string get_수금현황(string condition)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.수금일자 as 일자 ");
            stringBuilder.AppendLine("     , a.수금일자 as 일자명칭 ");
            stringBuilder.AppendLine("     , convert(nvarchar(6), a.전표번호) as 전표번호 ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , w.거래처명    ");
            stringBuilder.AppendLine("     , w.사원번호    ");
            stringBuilder.AppendLine("     , u.사용자명 담당사원명 ");
            stringBuilder.AppendLine("     , case when a.수금구분 = '1' then a.수금액 else 0 end as 현금금액 ");
            stringBuilder.AppendLine("     , case when a.수금구분 = '2' then a.수금액 else 0 end as 무통장금액 ");
            stringBuilder.AppendLine("     , case when a.수금구분 = '3' then a.수금액 else 0 end as 카드금액 ");
            stringBuilder.AppendLine("     , case when a.수금구분 = '9' then a.수금액 else 0 end as 어음금액 ");
            stringBuilder.AppendLine("     , a.수금액 ");
            stringBuilder.AppendLine("     , a.할인액 ");
            stringBuilder.AppendLine("     , a.어음번호 ");
            stringBuilder.AppendLine("     , 2 as 정렬구분 ");
            stringBuilder.AppendLine("     , '수금' as 전표분류 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , b.명칭 as 구분명칭 ");
            stringBuilder.AppendLine("     , a.등록일시    ");
            stringBuilder.AppendLine(" into #Tmp수금현황 ");
            stringBuilder.AppendLine(" from T_수금 a ");
            stringBuilder.AppendLine("      inner join C_금전구분 b on b.코드 = a.수금구분 ");
            stringBuilder.AppendLine("      inner join T_거래처정보 w on w.사업자번호 = a.사업자번호 and w.지점코드 = a.지점코드 and w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = w.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     " + condition + " ");
            return stringBuilder.ToString();
        }

        public DataTable fn_매입현황_전표번호별(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_매입현황(condition));
            stringBuilder.AppendLine(" select z.* from ( ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , a.일자명칭 ");
            stringBuilder.AppendLine("     , a.정렬구분 ");
            stringBuilder.AppendLine("     , a.전표분류 ");
            stringBuilder.AppendLine("     , convert(nvarchar(50), a.전표번호) as 전표번호 ");
            stringBuilder.AppendLine("     , a.거래처별칭코드 ");
            stringBuilder.AppendLine("     , a.Old_Code ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , a.거래처명 ");
            stringBuilder.AppendLine("     , a.담당사원명 ");
            stringBuilder.AppendLine("     , a.상품코드 ");
            stringBuilder.AppendLine("     , a.상품명  ");
            stringBuilder.AppendLine("     , a.규격    ");
            stringBuilder.AppendLine("     , a.박스수량 ");
            stringBuilder.AppendLine("     , a.중간수량 ");
            stringBuilder.AppendLine("     , a.낱개수량 ");
            stringBuilder.AppendLine("     , a.총수량 ");
            stringBuilder.AppendLine("     , a.표시단가 ");
            stringBuilder.AppendLine("     , a.금액 ");
            stringBuilder.AppendLine("     , a.부가세액 ");
            stringBuilder.AppendLine("     , a.서비스 ");
            stringBuilder.AppendLine("     , a.구분 ");
            stringBuilder.AppendLine("     , a.구분명칭 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매입현황 a ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , '전표계' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , convert(nvarchar(50), a.전표번호) as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처별칭코드 ");
            stringBuilder.AppendLine("     , '' as Old_Code ");
            stringBuilder.AppendLine("     , '' as 거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , '' as 상품코드 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 표시단가 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 서비스 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매입현황 a ");
            stringBuilder.AppendLine(" group by a.일자, a.전표번호 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , '--- 일계 ---' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처별칭코드 ");
            stringBuilder.AppendLine("     , '' as Old_Code ");
            stringBuilder.AppendLine("     , '' as 거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , '' as 상품코드 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 표시단가 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.금액) as 금액 ");
            stringBuilder.AppendLine("     , sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.부가세액) as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 서비스 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매입현황 a ");
            stringBuilder.AppendLine(" group by a.일자 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처별칭코드 ");
            stringBuilder.AppendLine("     , '' as Old_Code ");
            stringBuilder.AppendLine("     , '' as 거래처코드 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , '' as 상품코드 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 표시단가 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.부가세액), 0) as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 서비스 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매입현황 a ");
            stringBuilder.AppendLine(" ) z order by z.일자 asc, z.전표번호 asc, z.정렬구분 asc, z.등록일시 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string get_매입현황(string condition)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.매입일자 as 일자 ");
            stringBuilder.AppendLine("     , a.매입일자 as 일자명칭 ");
            stringBuilder.AppendLine("     , a.전표번호    ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , w.거래처명    ");
            stringBuilder.AppendLine("     , w.Old_Code as 거래처별칭코드 ");
            stringBuilder.AppendLine("     , w.사원번호    ");
            stringBuilder.AppendLine("     , u.사용자명 담당사원명 ");
            stringBuilder.AppendLine("     , b.상품코드    ");
            stringBuilder.AppendLine("     , c.상품명      ");
            stringBuilder.AppendLine("     , c.규격        ");
            stringBuilder.AppendLine("     , c.Old_Code    ");
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.총수량 as 총수량 ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , convert(float, floor(b.박스단가 * 100) / 100) as 표시단가 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.서비스박스 as 서비스 ");
            }
            else
            {
                stringBuilder.AppendLine("     , convert(float, floor(b.낱개단가 * 100) / 100) as 표시단가 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.서비스낱개 as 서비스 ");
            }
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.금액 as 금액 ");
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) as 부가세액 ");
            stringBuilder.AppendLine("     , 3 as 정렬구분 ");
            stringBuilder.AppendLine("     , '매입' as 전표분류 ");
            stringBuilder.AppendLine("     , b.매입구분 as 구분 ");
            stringBuilder.AppendLine("     , r.명칭 as 구분명칭 ");
            stringBuilder.AppendLine("     , a.등록일시    ");
            stringBuilder.AppendLine(" into #Tmp매입현황 ");
            stringBuilder.AppendLine(" from T_매입 a ");
            stringBuilder.AppendLine("      inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join T_상품정보 c on c.사업자번호 = b.사업자번호 and c.지점코드 = b.지점코드 and c.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("      inner join C_매입구분 r on r.코드 = b.매입구분 ");
            stringBuilder.AppendLine("      inner join T_거래처정보 w on w.사업자번호 = a.사업자번호 and w.지점코드 = a.지점코드 and w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = w.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     " + condition + " ");
            return stringBuilder.ToString();
        }

        public DataTable fn_지급현황_전표번호별(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_지급현황(condition));
            stringBuilder.AppendLine(" select z.* from ( ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , a.일자명칭 ");
            stringBuilder.AppendLine("     , a.정렬구분 ");
            stringBuilder.AppendLine("     , a.전표분류 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.거래처명 ");
            stringBuilder.AppendLine("     , a.담당사원명 ");
            stringBuilder.AppendLine("     , a.현금금액 ");
            stringBuilder.AppendLine("     , a.무통장금액 ");
            stringBuilder.AppendLine("     , a.카드금액 ");
            stringBuilder.AppendLine("     , a.어음금액 ");
            stringBuilder.AppendLine("     , a.할인액 ");
            stringBuilder.AppendLine("     , a.어음번호 ");
            stringBuilder.AppendLine("     , a.구분 ");
            stringBuilder.AppendLine("     , a.구분명칭 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine(" from #Tmp지급현황 a ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , '--- 일계 ---' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.현금금액), 0) as 현금금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.무통장금액), 0) as 무통장금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.카드금액), 0) as 카드금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.어음금액), 0) as 어음금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.할인액), 0) as 할인액 ");
            stringBuilder.AppendLine("     , '' as 어음번호 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp지급현황 a ");
            stringBuilder.AppendLine(" group by a.일자 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.현금금액), 0) as 현금금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.무통장금액), 0) as 무통장금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.카드금액), 0) as 카드금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.어음금액), 0) as 어음금액 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.할인액), 0) as 할인액 ");
            stringBuilder.AppendLine("     , '' as 어음번호 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp지급현황 a ");
            stringBuilder.AppendLine(" ) z order by z.일자 asc, z.전표번호 asc, z.정렬구분 asc, z.등록일시 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string get_지급현황(string condition)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.지급일자 as 일자 ");
            stringBuilder.AppendLine("     , a.지급일자 as 일자명칭 ");
            stringBuilder.AppendLine("     , convert(nvarchar(6), a.전표번호) as 전표번호 ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , w.거래처명    ");
            stringBuilder.AppendLine("     , w.사원번호    ");
            stringBuilder.AppendLine("     , u.사용자명 담당사원명 ");
            stringBuilder.AppendLine("     , case when a.지급구분 = '1' then a.지급액 else 0 end as 현금금액 ");
            stringBuilder.AppendLine("     , case when a.지급구분 = '2' then a.지급액 else 0 end as 무통장금액 ");
            stringBuilder.AppendLine("     , case when a.지급구분 = '3' then a.지급액 else 0 end as 카드금액 ");
            stringBuilder.AppendLine("     , case when a.지급구분 = '9' then a.지급액 else 0 end as 어음금액 ");
            stringBuilder.AppendLine("     , a.지급액 ");
            stringBuilder.AppendLine("     , a.할인액 ");
            stringBuilder.AppendLine("     , a.어음번호 ");
            stringBuilder.AppendLine("     , 4 as 정렬구분 ");
            stringBuilder.AppendLine("     , '지급' as 전표분류 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , b.명칭 as 구분명칭 ");
            stringBuilder.AppendLine("     , a.등록일시    ");
            stringBuilder.AppendLine(" into #Tmp지급현황 ");
            stringBuilder.AppendLine(" from T_지급 a ");
            stringBuilder.AppendLine("      inner join C_금전구분 b on b.코드 = a.지급구분 ");
            stringBuilder.AppendLine("      inner join T_거래처정보 w on w.사업자번호 = a.사업자번호 and w.지점코드 = a.지점코드 and w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = w.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     " + condition + " ");
            return stringBuilder.ToString();
        }

        public DataTable fn_지출현황_전표번호별(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_지출현황(condition));
            stringBuilder.AppendLine(" select z.* from ( ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , a.일자명칭 ");
            stringBuilder.AppendLine("     , a.정렬구분 ");
            stringBuilder.AppendLine("     , a.전표분류 ");
            stringBuilder.AppendLine("     , convert(nvarchar(10), a.전표번호) as 전표번호 ");
            stringBuilder.AppendLine("     , a.계정코드 ");
            stringBuilder.AppendLine("     , a.계정명 ");
            stringBuilder.AppendLine("     , a.사원명 ");
            stringBuilder.AppendLine("     , a.적요  ");
            stringBuilder.AppendLine("     , a.금액 ");
            stringBuilder.AppendLine("     , a.구분 ");
            stringBuilder.AppendLine("     , a.구분명칭 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine(" from #Tmp지출현황 a ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , '--- 일계 ---' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 계정코드 ");
            stringBuilder.AppendLine("     , '' as 계정명 ");
            stringBuilder.AppendLine("     , '' as 사원명 ");
            stringBuilder.AppendLine("     , '' as 적요  ");
            stringBuilder.AppendLine("     , isnull(sum(a.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp지출현황 a ");
            stringBuilder.AppendLine(" group by a.일자 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 계정코드 ");
            stringBuilder.AppendLine("     , '' as 계정명 ");
            stringBuilder.AppendLine("     , '' as 사원명 ");
            stringBuilder.AppendLine("     , '' as 적요  ");
            stringBuilder.AppendLine("     , isnull(sum(a.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp지출현황 a ");
            stringBuilder.AppendLine(" ) z order by z.일자 asc, z.전표번호 asc, z.정렬구분 asc, z.등록일시 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string get_지출현황(string condition)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.지출일자 as 일자 ");
            stringBuilder.AppendLine("     , a.지출일자 as 일자명칭 ");
            stringBuilder.AppendLine("     , a.전표번호    ");
            stringBuilder.AppendLine("     , a.사원번호    ");
            stringBuilder.AppendLine("     , u.사용자명 as 사원명 ");
            stringBuilder.AppendLine("     , b.계정코드    ");
            stringBuilder.AppendLine("     , c.명칭 as 계정명 ");
            stringBuilder.AppendLine("     , b.적요        ");
            stringBuilder.AppendLine("     , b.금액        ");
            stringBuilder.AppendLine("     , 5 as 정렬구분 ");
            stringBuilder.AppendLine("     , '지출' as 전표분류 ");
            stringBuilder.AppendLine("     , b.지출구분 as 구분 ");
            stringBuilder.AppendLine("     , r.명칭 as 구분명칭 ");
            stringBuilder.AppendLine("     , a.등록일시    ");
            stringBuilder.AppendLine(" into #Tmp지출현황 ");
            stringBuilder.AppendLine(" from T_지출 a ");
            stringBuilder.AppendLine("      inner join T_지출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.지출일자 = a.지출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join P_계정 c on c.사업자번호 = b.사업자번호 and c.지점코드 = b.지점코드 and c.코드 = b.계정코드 ");
            stringBuilder.AppendLine("      inner join C_지출구분 r on r.코드 = b.지출구분 ");
            stringBuilder.AppendLine("      left outer join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     " + condition + " ");
            return stringBuilder.ToString();
        }

        public DataTable fn_매출서비스현황_전표번호별(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_매출현황(condition));
            stringBuilder.AppendLine(" select z.* from ( ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , a.일자명칭 ");
            stringBuilder.AppendLine("     , a.정렬구분 ");
            stringBuilder.AppendLine("     , a.전표분류 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.거래처명 ");
            stringBuilder.AppendLine("     , a.담당사원명 ");
            stringBuilder.AppendLine("     , a.상품명  ");
            stringBuilder.AppendLine("     , a.규격    ");
            stringBuilder.AppendLine("     , a.표시단가 ");
            stringBuilder.AppendLine("     , a.서비스 ");
            stringBuilder.AppendLine("     , a.서비스금액 ");
            stringBuilder.AppendLine("     , a.구분 ");
            stringBuilder.AppendLine("     , a.구분명칭 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매출현황 a ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.일자 ");
            stringBuilder.AppendLine("     , '--- 일계 ---' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 표시단가 ");
            stringBuilder.AppendLine("     , 0 as 서비스 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.서비스금액), 0) as 서비스금액 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매출현황 a ");
            stringBuilder.AppendLine(" group by a.일자 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select '9999-99-99' as 일자 ");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 일자명칭 ");
            stringBuilder.AppendLine("     , 9 as 정렬구분 ");
            stringBuilder.AppendLine("     , '' as 전표분류 ");
            stringBuilder.AppendLine("     , '999999' as 전표번호 ");
            stringBuilder.AppendLine("     , '' as 거래처명 ");
            stringBuilder.AppendLine("     , '' as 담당사원명 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 표시단가 ");
            stringBuilder.AppendLine("     , 0 as 서비스 ");
            stringBuilder.AppendLine("     , isnull(sum((case when a.전표분류 in ('매입', '지급') then 1 else 1 end) * a.서비스금액), 0) as 서비스금액 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , '' as 구분명칭 ");
            stringBuilder.AppendLine("     , NULL as 등록일시 ");
            stringBuilder.AppendLine(" from #Tmp매출현황 a ");
            stringBuilder.AppendLine(" ) z order by z.일자 asc, z.전표번호 asc, z.정렬구분 asc, z.등록일시 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_종합_이익금(
          string sDay1,
          string sDay2,
          string sMan,
          string sDept,
          string sWare,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_이익금목록(sDay1, sDay2, sMan, sDept, sWare));
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     round(sum(z.매출계), 0) as 매출계 ");
            stringBuilder.AppendLine("     , round(sum(z.매출공급가), 0) as 매출공급가 ");
            stringBuilder.AppendLine("     , round(sum(z.입고단가계), 0) as 입고단가계 ");
            stringBuilder.AppendLine("     , round(sum(z.수금계), 0) as 수금계 ");
            stringBuilder.AppendLine("     , round(sum(z.할인계), 0) as 할인계 ");
            stringBuilder.AppendLine("     , round(sum(z.매입계), 0) as 매입계 ");
            stringBuilder.AppendLine("     , round(sum(z.지급계), 0) as 지급계 ");
            stringBuilder.AppendLine("     , round(sum(z.지출계), 0) as 지출계 ");
            stringBuilder.AppendLine("     , round(sum(z.매출계) - sum(z.입고단가계) - sum(z.지출계) - sum(z.할인계), 0) as 이익금 ");
            stringBuilder.AppendLine("     , case when sum(z.매출계) = 0 then 0 else round((sum(z.매출계) - sum(z.입고단가계) - sum(z.지출계) - sum(z.할인계)) / sum(z.매출계) * 100, 2) end as 이익율 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp매출자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp수금자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp매입자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp지급자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp지출자료 ");
            stringBuilder.AppendLine(") z ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_종합_사원별(
          string sDay1,
          string sDay2,
          string sMan,
          string sDept,
          string sWare,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_사원별잔고(sDay1, sDay2, sMan, sDept, sWare));
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     z.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , sum(z.전일잔고) as 전일잔고 ");
            stringBuilder.AppendLine("     , sum(z.현잔고) as 현잔고 ");
            stringBuilder.AppendLine("     , sum(z.기간매출) as 기간매출 ");
            stringBuilder.AppendLine("     , sum(z.기간매출서비스) as 기간매출서비스 ");
            stringBuilder.AppendLine("     , sum(z.기간현금금액) as 기간현금금액 ");
            stringBuilder.AppendLine("     , sum(z.기간무통장금액) as 기간무통장금액 ");
            stringBuilder.AppendLine("     , sum(z.기간카드금액) as 기간카드금액 ");
            stringBuilder.AppendLine("     , sum(z.기간현금금액) + sum(z.기간무통장금액) + sum(z.기간카드금액) as 기간어음외금액 ");
            stringBuilder.AppendLine("     , sum(z.기간어음금액) as 기간어음금액 ");
            stringBuilder.AppendLine("     , sum(z.기간할인액) as 기간할인액 ");
            stringBuilder.AppendLine("     , sum(z.기간매입) as 기간매입 ");
            stringBuilder.AppendLine("     , sum(z.기간지급) as 기간지급 ");
            stringBuilder.AppendLine("     , sum(z.일매출) as 일매출 ");
            stringBuilder.AppendLine("     , sum(z.일매출서비스) as 일매출서비스 ");
            stringBuilder.AppendLine("     , sum(z.일현금금액) as 일현금금액 ");
            stringBuilder.AppendLine("     , sum(z.일무통장금액) as 일무통장금액 ");
            stringBuilder.AppendLine("     , sum(z.일카드금액) as 일카드금액 ");
            stringBuilder.AppendLine("     , sum(z.일현금금액) + sum(z.일무통장금액) + sum(z.일카드금액) as 일어음외금액 ");
            stringBuilder.AppendLine("     , sum(z.일어음금액) as 일어음금액 ");
            stringBuilder.AppendLine("     , sum(z.일할인액) as 일할인액 ");
            stringBuilder.AppendLine("     , sum(z.일매입) as 일매입 ");
            stringBuilder.AppendLine("     , sum(z.일지급) as 일지급 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp전일잔고 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp현잔고 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp기간자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp일자료 ");
            stringBuilder.AppendLine(") z ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and u.사원번호 = z.사원번호 ");
            stringBuilder.AppendLine(" group by z.사원번호 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원명");
            stringBuilder.AppendLine("     , sum(z.전일잔고) as 전일잔고 ");
            stringBuilder.AppendLine("     , sum(z.현잔고) as 현잔고 ");
            stringBuilder.AppendLine("     , sum(z.기간매출) as 기간매출 ");
            stringBuilder.AppendLine("     , sum(z.기간매출서비스) as 기간매출서비스 ");
            stringBuilder.AppendLine("     , sum(z.기간현금금액) as 기간현금금액 ");
            stringBuilder.AppendLine("     , sum(z.기간무통장금액) as 기간무통장금액 ");
            stringBuilder.AppendLine("     , sum(z.기간카드금액) as 기간카드금액 ");
            stringBuilder.AppendLine("     , sum(z.기간현금금액) + sum(z.기간무통장금액) + sum(z.기간카드금액) as 기간어음외금액 ");
            stringBuilder.AppendLine("     , sum(z.기간어음금액) as 기간어음금액 ");
            stringBuilder.AppendLine("     , sum(z.기간할인액) as 기간할인액 ");
            stringBuilder.AppendLine("     , sum(z.기간매입) as 기간매입 ");
            stringBuilder.AppendLine("     , sum(z.기간지급) as 기간지급 ");
            stringBuilder.AppendLine("     , sum(z.일매출) as 일매출 ");
            stringBuilder.AppendLine("     , sum(z.일매출서비스) as 일매출서비스 ");
            stringBuilder.AppendLine("     , sum(z.일현금금액) as 일현금금액 ");
            stringBuilder.AppendLine("     , sum(z.일무통장금액) as 일무통장금액 ");
            stringBuilder.AppendLine("     , sum(z.일카드금액) as 일카드금액 ");
            stringBuilder.AppendLine("     , sum(z.일현금금액) + sum(z.일무통장금액) + sum(z.일카드금액) as 일어음외금액 ");
            stringBuilder.AppendLine("     , sum(z.일어음금액) as 일어음금액 ");
            stringBuilder.AppendLine("     , sum(z.일할인액) as 일할인액 ");
            stringBuilder.AppendLine("     , sum(z.일매입) as 일매입 ");
            stringBuilder.AppendLine("     , sum(z.일지급) as 일지급 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp전일잔고 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp현잔고 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp기간자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp일자료 ");
            stringBuilder.AppendLine(") z ");
            stringBuilder.AppendLine(") x ");
            stringBuilder.AppendLine(" order by x.사원번호 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string get_사원별잔고(string sDay1, string sDay2, string sMan, string sDept, string sWare)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 전일매출 ");
            stringBuilder.AppendLine("             into #Tmp전일매출 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 < '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 전일매입 ");
            stringBuilder.AppendLine("             into #Tmp전일매입 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 < '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 전일수금 ");
            stringBuilder.AppendLine("             into #Tmp전일수금 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 < '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 전일지급 ");
            stringBuilder.AppendLine("             into #Tmp전일지급 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 < '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매출 ");
            stringBuilder.AppendLine("             into #Tmp현매출 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매입 ");
            stringBuilder.AppendLine("             into #Tmp현매입 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 현수금 ");
            stringBuilder.AppendLine("             into #Tmp현수금 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 현지급 ");
            stringBuilder.AppendLine("             into #Tmp현지급 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간매출 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then b.박스단가 * b.서비스박스  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then b.박스단가 * b.서비스박스  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else b.박스단가 * b.서비스박스 + round(b.박스단가 * b.서비스박스 * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간서비스박스 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then b.낱개단가 * b.서비스낱개  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then b.낱개단가 * b.서비스낱개  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else b.낱개단가 * b.서비스낱개 + round(b.낱개단가 * b.서비스낱개 * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간서비스낱개 ");
            stringBuilder.AppendLine("             into #Tmp기간매출 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간매입 ");
            stringBuilder.AppendLine("             into #Tmp기간매입 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '1' then a.수금액 else 0 end) as 기간현금금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '2' then a.수금액 else 0 end) as 기간무통장금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '3' then a.수금액 else 0 end) as 기간카드금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '9' then a.수금액 else 0 end) as 기간어음금액 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(a.할인액) as 기간할인액 ");
            stringBuilder.AppendLine("             into #Tmp기간수금 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 기간지급 ");
            stringBuilder.AppendLine("             into #Tmp기간지급 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 일매출 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then b.박스단가 * b.서비스박스  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then b.박스단가 * b.서비스박스  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else b.박스단가 * b.서비스박스 + round(b.박스단가 * b.서비스박스 * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 일서비스박스 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then b.낱개단가 * b.서비스낱개  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then b.낱개단가 * b.서비스낱개  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else b.낱개단가 * b.서비스낱개 + round(b.낱개단가 * b.서비스낱개 * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 일서비스낱개 ");
            stringBuilder.AppendLine("             into #Tmp일매출 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 >= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 일매입 ");
            stringBuilder.AppendLine("             into #Tmp일매입 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 >= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '1' then a.수금액 else 0 end) as 일현금금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '2' then a.수금액 else 0 end) as 일무통장금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '3' then a.수금액 else 0 end) as 일카드금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '9' then a.수금액 else 0 end) as 일어음금액 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(a.할인액) as 일할인액 ");
            stringBuilder.AppendLine("             into #Tmp일수금 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 >= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 일지급 ");
            stringBuilder.AppendLine("             into #Tmp일지급 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 >= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.사원번호 ");
            stringBuilder.AppendLine("     , sum(x.전일잔고) as 전일잔고 ");
            stringBuilder.AppendLine("     , 0 as 현잔고 ");
            stringBuilder.AppendLine("     , 0 as 기간매출 ");
            stringBuilder.AppendLine("     , 0 as 기간매출서비스 ");
            stringBuilder.AppendLine("     , 0 as 기간현금금액 ");
            stringBuilder.AppendLine("     , 0 as 기간무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 기간카드금액 ");
            stringBuilder.AppendLine("     , 0 as 기간어음금액 ");
            stringBuilder.AppendLine("     , 0 as 기간할인액 ");
            stringBuilder.AppendLine("     , 0 as 기간매입 ");
            stringBuilder.AppendLine("     , 0 as 기간지급 ");
            stringBuilder.AppendLine("     , 0 as 일매출 ");
            stringBuilder.AppendLine("     , 0 as 일매출서비스 ");
            stringBuilder.AppendLine("     , 0 as 일현금금액 ");
            stringBuilder.AppendLine("     , 0 as 일무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 일카드금액 ");
            stringBuilder.AppendLine("     , 0 as 일어음금액 ");
            stringBuilder.AppendLine("     , 0 as 일할인액 ");
            stringBuilder.AppendLine("     , 0 as 일매입 ");
            stringBuilder.AppendLine("     , 0 as 일지급 ");
            stringBuilder.AppendLine(" into #Tmp전일잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , a.초기잔고 ");
            stringBuilder.AppendLine(" \t    , isnull(k.전일매출, 0) as 전일매출 ");
            stringBuilder.AppendLine(" \t    , isnull(h.전일매입, 0) as 전일매입 ");
            stringBuilder.AppendLine(" \t    , isnull(m.전일수금, 0) as 전일수금 ");
            stringBuilder.AppendLine(" \t    , isnull(p.전일지급, 0) as 전일지급 ");
            stringBuilder.AppendLine(" \t    , isnull(a.초기잔고, 0) + isnull(k.전일매출, 0) - isnull(m.전일수금, 0) - isnull(h.전일매입, 0) + isnull(p.전일지급, 0) as 전일잔고 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("             and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp전일매출 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp전일매입 h on h.사업자번호 = a.사업자번호 and h.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp전일수금 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp전일지급 p on p.사업자번호 = a.사업자번호 and p.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t    and a.거래처구분 in ('1', '3') ");
            stringBuilder.AppendLine(" \t\tand isnull(a.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("     ) x ");
            stringBuilder.AppendLine(" group by x.사원번호 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.사원번호 ");
            stringBuilder.AppendLine("     , 0 as 전일잔고 ");
            stringBuilder.AppendLine("     , sum(x.현잔고) as 현잔고 ");
            stringBuilder.AppendLine("     , 0 as 기간매출 ");
            stringBuilder.AppendLine("     , 0 as 기간매출서비스 ");
            stringBuilder.AppendLine("     , 0 as 기간현금금액 ");
            stringBuilder.AppendLine("     , 0 as 기간무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 기간카드금액 ");
            stringBuilder.AppendLine("     , 0 as 기간어음금액 ");
            stringBuilder.AppendLine("     , 0 as 기간할인액 ");
            stringBuilder.AppendLine("     , 0 as 기간매입 ");
            stringBuilder.AppendLine("     , 0 as 기간지급 ");
            stringBuilder.AppendLine("     , 0 as 일매출 ");
            stringBuilder.AppendLine("     , 0 as 일매출서비스 ");
            stringBuilder.AppendLine("     , 0 as 일현금금액 ");
            stringBuilder.AppendLine("     , 0 as 일무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 일카드금액 ");
            stringBuilder.AppendLine("     , 0 as 일어음금액 ");
            stringBuilder.AppendLine("     , 0 as 일할인액 ");
            stringBuilder.AppendLine("     , 0 as 일매입 ");
            stringBuilder.AppendLine("     , 0 as 일지급 ");
            stringBuilder.AppendLine(" into #Tmp현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , a.초기잔고 ");
            stringBuilder.AppendLine(" \t    , isnull(k.현매출, 0) as 현매출 ");
            stringBuilder.AppendLine(" \t    , isnull(h.현매입, 0) as 현매입 ");
            stringBuilder.AppendLine(" \t    , isnull(m.현수금, 0) as 현수금 ");
            stringBuilder.AppendLine(" \t    , isnull(p.현지급, 0) as 현지급 ");
            stringBuilder.AppendLine(" \t    , isnull(a.초기잔고, 0) + isnull(k.현매출, 0) - isnull(m.현수금, 0) - isnull(h.현매입, 0) + isnull(p.현지급, 0) as 현잔고 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("             and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp현매출 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp현매입 h on h.사업자번호 = a.사업자번호 and h.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp현수금 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp현지급 p on p.사업자번호 = a.사업자번호 and p.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t    and a.거래처구분 in ('1', '3') ");
            stringBuilder.AppendLine(" \t\tand isnull(a.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("     ) x ");
            stringBuilder.AppendLine(" group by x.사원번호 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.사원번호 ");
            stringBuilder.AppendLine("     , 0 as 전일잔고 ");
            stringBuilder.AppendLine("     , 0 as 현잔고 ");
            stringBuilder.AppendLine("     , sum(x.기간매출) as 기간매출 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine("     , sum(x.기간매출서비스박스) as 기간매출서비스 ");
            else
                stringBuilder.AppendLine("     , sum(x.기간매출서비스낱개) as 기간매출서비스 ");
            stringBuilder.AppendLine("     , sum(x.기간현금금액) as 기간현금금액 ");
            stringBuilder.AppendLine("     , sum(x.기간무통장금액) as 기간무통장금액 ");
            stringBuilder.AppendLine("     , sum(x.기간카드금액) as 기간카드금액 ");
            stringBuilder.AppendLine("     , sum(x.기간어음금액) as 기간어음금액 ");
            stringBuilder.AppendLine("     , sum(x.기간할인액) as 기간할인액 ");
            stringBuilder.AppendLine("     , sum(x.기간매입) as 기간매입 ");
            stringBuilder.AppendLine("     , sum(x.기간지급) as 기간지급 ");
            stringBuilder.AppendLine("     , 0 as 일매출 ");
            stringBuilder.AppendLine("     , 0 as 일매출서비스 ");
            stringBuilder.AppendLine("     , 0 as 일현금금액 ");
            stringBuilder.AppendLine("     , 0 as 일무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 일카드금액 ");
            stringBuilder.AppendLine("     , 0 as 일어음금액 ");
            stringBuilder.AppendLine("     , 0 as 일할인액 ");
            stringBuilder.AppendLine("     , 0 as 일매입 ");
            stringBuilder.AppendLine("     , 0 as 일지급 ");
            stringBuilder.AppendLine(" into #Tmp기간자료 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(k.기간매출, 0) as 기간매출 ");
            stringBuilder.AppendLine(" \t    , isnull(k.기간서비스박스, 0) as 기간매출서비스박스 ");
            stringBuilder.AppendLine(" \t    , isnull(k.기간서비스낱개, 0) as 기간매출서비스낱개 ");
            stringBuilder.AppendLine(" \t    , isnull(h.기간매입, 0) as 기간매입 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간현금금액, 0) as 기간현금금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간무통장금액, 0) as 기간무통장금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간카드금액, 0) as 기간카드금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간어음금액, 0) as 기간어음금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간할인액, 0) as 기간할인액 ");
            stringBuilder.AppendLine(" \t    , isnull(p.기간지급, 0) as 기간지급 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("             and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp기간매출 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp기간매입 h on h.사업자번호 = a.사업자번호 and h.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp기간수금 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp기간지급 p on p.사업자번호 = a.사업자번호 and p.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t    and a.거래처구분 in ('1', '3') ");
            stringBuilder.AppendLine(" \t\tand isnull(a.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("     ) x ");
            stringBuilder.AppendLine(" group by x.사원번호 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.사원번호 ");
            stringBuilder.AppendLine("     , 0 as 전일잔고 ");
            stringBuilder.AppendLine("     , 0 as 현잔고 ");
            stringBuilder.AppendLine("     , 0 as 기간매출 ");
            stringBuilder.AppendLine("     , 0 as 기간매출서비스 ");
            stringBuilder.AppendLine("     , 0 as 기간현금금액 ");
            stringBuilder.AppendLine("     , 0 as 기간무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 기간카드금액 ");
            stringBuilder.AppendLine("     , 0 as 기간어음금액 ");
            stringBuilder.AppendLine("     , 0 as 기간할인액 ");
            stringBuilder.AppendLine("     , 0 as 기간매입 ");
            stringBuilder.AppendLine("     , 0 as 기간지급 ");
            stringBuilder.AppendLine("     , sum(x.일매출) as 일매출 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine("     , sum(x.일매출서비스박스) as 일매출서비스 ");
            else
                stringBuilder.AppendLine("     , sum(x.일매출서비스낱개) as 일매출서비스 ");
            stringBuilder.AppendLine("     , sum(x.일현금금액) as 일현금금액 ");
            stringBuilder.AppendLine("     , sum(x.일무통장금액) as 일무통장금액 ");
            stringBuilder.AppendLine("     , sum(x.일카드금액) as 일카드금액 ");
            stringBuilder.AppendLine("     , sum(x.일어음금액) as 일어음금액 ");
            stringBuilder.AppendLine("     , sum(x.일할인액) as 일할인액 ");
            stringBuilder.AppendLine("     , sum(x.일매입) as 일매입 ");
            stringBuilder.AppendLine("     , sum(x.일지급) as 일지급 ");
            stringBuilder.AppendLine(" into #Tmp일자료 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(k.일매출, 0) as 일매출 ");
            stringBuilder.AppendLine(" \t    , isnull(k.일서비스박스, 0) as 일매출서비스박스 ");
            stringBuilder.AppendLine(" \t    , isnull(k.일서비스낱개, 0) as 일매출서비스낱개 ");
            stringBuilder.AppendLine(" \t    , isnull(h.일매입, 0) as 일매입 ");
            stringBuilder.AppendLine(" \t    , isnull(m.일현금금액, 0) as 일현금금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.일무통장금액, 0) as 일무통장금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.일카드금액, 0) as 일카드금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.일어음금액, 0) as 일어음금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.일할인액, 0) as 일할인액 ");
            stringBuilder.AppendLine(" \t    , isnull(p.일지급, 0) as 일지급 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("             and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp일매출 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp일매입 h on h.사업자번호 = a.사업자번호 and h.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp일수금 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp일지급 p on p.사업자번호 = a.사업자번호 and p.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" \t    and a.거래처구분 in ('1', '3') ");
            stringBuilder.AppendLine(" \t\tand isnull(a.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("     ) x ");
            stringBuilder.AppendLine(" group by x.사원번호 ");
            return stringBuilder.ToString();
        }

        public DataTable fn_종합_방문자별(
          string sDay1,
          string sDay2,
          string sMan,
          string sDept,
          string sWare,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_사원별잔고_방문자별(sDay1, sDay2, sMan, sDept, sWare));
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     z.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , sum(z.전일잔고) as 전일잔고 ");
            stringBuilder.AppendLine("     , sum(z.현잔고) as 현잔고 ");
            stringBuilder.AppendLine("     , sum(z.기간매출) as 기간매출 ");
            stringBuilder.AppendLine("     , sum(z.기간매출서비스) as 기간매출서비스 ");
            stringBuilder.AppendLine("     , sum(z.기간현금금액) as 기간현금금액 ");
            stringBuilder.AppendLine("     , sum(z.기간무통장금액) as 기간무통장금액 ");
            stringBuilder.AppendLine("     , sum(z.기간카드금액) as 기간카드금액 ");
            stringBuilder.AppendLine("     , sum(z.기간현금금액) + sum(z.기간무통장금액) + sum(z.기간카드금액) as 기간어음외금액 ");
            stringBuilder.AppendLine("     , sum(z.기간어음금액) as 기간어음금액 ");
            stringBuilder.AppendLine("     , sum(z.기간할인액) as 기간할인액 ");
            stringBuilder.AppendLine("     , sum(z.기간매입) as 기간매입 ");
            stringBuilder.AppendLine("     , sum(z.기간지급) as 기간지급 ");
            stringBuilder.AppendLine("     , sum(z.일매출) as 일매출 ");
            stringBuilder.AppendLine("     , sum(z.일매출서비스) as 일매출서비스 ");
            stringBuilder.AppendLine("     , sum(z.일현금금액) as 일현금금액 ");
            stringBuilder.AppendLine("     , sum(z.일무통장금액) as 일무통장금액 ");
            stringBuilder.AppendLine("     , sum(z.일카드금액) as 일카드금액 ");
            stringBuilder.AppendLine("     , sum(z.일현금금액) + sum(z.일무통장금액) + sum(z.일카드금액) as 일어음외금액 ");
            stringBuilder.AppendLine("     , sum(z.일어음금액) as 일어음금액 ");
            stringBuilder.AppendLine("     , sum(z.일할인액) as 일할인액 ");
            stringBuilder.AppendLine("     , sum(z.일매입) as 일매입 ");
            stringBuilder.AppendLine("     , sum(z.일지급) as 일지급 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp전일잔고 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp현잔고 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp기간자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp일자료 ");
            stringBuilder.AppendLine(") z ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and 지점코드 = '" + Common.p_strSpotCode + "' and u.사원번호 = z.사원번호 ");
            stringBuilder.AppendLine(" group by z.사원번호 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원명");
            stringBuilder.AppendLine("     , sum(z.전일잔고) as 전일잔고 ");
            stringBuilder.AppendLine("     , sum(z.현잔고) as 현잔고 ");
            stringBuilder.AppendLine("     , sum(z.기간매출) as 기간매출 ");
            stringBuilder.AppendLine("     , sum(z.기간매출서비스) as 기간매출서비스 ");
            stringBuilder.AppendLine("     , sum(z.기간현금금액) as 기간현금금액 ");
            stringBuilder.AppendLine("     , sum(z.기간무통장금액) as 기간무통장금액 ");
            stringBuilder.AppendLine("     , sum(z.기간카드금액) as 기간카드금액 ");
            stringBuilder.AppendLine("     , sum(z.기간현금금액) + sum(z.기간무통장금액) + sum(z.기간카드금액) as 기간어음외금액 ");
            stringBuilder.AppendLine("     , sum(z.기간어음금액) as 기간어음금액 ");
            stringBuilder.AppendLine("     , sum(z.기간할인액) as 기간할인액 ");
            stringBuilder.AppendLine("     , sum(z.기간매입) as 기간매입 ");
            stringBuilder.AppendLine("     , sum(z.기간지급) as 기간지급 ");
            stringBuilder.AppendLine("     , sum(z.일매출) as 일매출 ");
            stringBuilder.AppendLine("     , sum(z.일매출서비스) as 일매출서비스 ");
            stringBuilder.AppendLine("     , sum(z.일현금금액) as 일현금금액 ");
            stringBuilder.AppendLine("     , sum(z.일무통장금액) as 일무통장금액 ");
            stringBuilder.AppendLine("     , sum(z.일카드금액) as 일카드금액 ");
            stringBuilder.AppendLine("     , sum(z.일현금금액) + sum(z.일무통장금액) + sum(z.일카드금액) as 일어음외금액 ");
            stringBuilder.AppendLine("     , sum(z.일어음금액) as 일어음금액 ");
            stringBuilder.AppendLine("     , sum(z.일할인액) as 일할인액 ");
            stringBuilder.AppendLine("     , sum(z.일매입) as 일매입 ");
            stringBuilder.AppendLine("     , sum(z.일지급) as 일지급 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp전일잔고 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp현잔고 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp기간자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp일자료 ");
            stringBuilder.AppendLine(") z ");
            stringBuilder.AppendLine(") x ");
            stringBuilder.AppendLine(" order by x.사원번호 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string get_사원별잔고_방문자별(
          string sDay1,
          string sDay2,
          string sMan,
          string sDept,
          string sWare)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 전일매출 ");
            stringBuilder.AppendLine("             into #Tmp전일매출 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 < '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 전일매입 ");
            stringBuilder.AppendLine("             into #Tmp전일매입 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 < '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 전일수금 ");
            stringBuilder.AppendLine("             into #Tmp전일수금 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 < '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 전일지급 ");
            stringBuilder.AppendLine("             into #Tmp전일지급 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 < '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매출 ");
            stringBuilder.AppendLine("             into #Tmp현매출 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매입 ");
            stringBuilder.AppendLine("             into #Tmp현매입 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 현수금 ");
            stringBuilder.AppendLine("             into #Tmp현수금 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 현지급 ");
            stringBuilder.AppendLine("             into #Tmp현지급 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간매출 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then b.박스단가 * b.서비스박스  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then b.박스단가 * b.서비스박스  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else b.박스단가 * b.서비스박스 + round(b.박스단가 * b.서비스박스 * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간서비스박스 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then b.낱개단가 * b.서비스낱개  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then b.낱개단가 * b.서비스낱개  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else b.낱개단가 * b.서비스낱개 + round(b.낱개단가 * b.서비스낱개 * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간서비스낱개 ");
            stringBuilder.AppendLine("             into #Tmp기간매출 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간매입 ");
            stringBuilder.AppendLine("             into #Tmp기간매입 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '1' then a.수금액 else 0 end) as 기간현금금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '2' then a.수금액 else 0 end) as 기간무통장금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '3' then a.수금액 else 0 end) as 기간카드금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '9' then a.수금액 else 0 end) as 기간어음금액 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(a.할인액) as 기간할인액 ");
            stringBuilder.AppendLine("             into #Tmp기간수금 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 기간지급 ");
            stringBuilder.AppendLine("             into #Tmp기간지급 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 일매출 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then b.박스단가 * b.서비스박스  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then b.박스단가 * b.서비스박스  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else b.박스단가 * b.서비스박스 + round(b.박스단가 * b.서비스박스 * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 일서비스박스 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then b.낱개단가 * b.서비스낱개  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then b.낱개단가 * b.서비스낱개  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else b.낱개단가 * b.서비스낱개 + round(b.낱개단가 * b.서비스낱개 * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 일서비스낱개 ");
            stringBuilder.AppendLine("             into #Tmp일매출 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 >= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 일매입 ");
            stringBuilder.AppendLine("             into #Tmp일매입 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 >= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '1' then a.수금액 else 0 end) as 일현금금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '2' then a.수금액 else 0 end) as 일무통장금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '3' then a.수금액 else 0 end) as 일카드금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '9' then a.수금액 else 0 end) as 일어음금액 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(a.할인액) as 일할인액 ");
            stringBuilder.AppendLine("             into #Tmp일수금 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 >= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.등록사원번호 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 일지급 ");
            stringBuilder.AppendLine("             into #Tmp일지급 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 and isnull(c.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 >= '" + sDay2 + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.등록사원번호 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.사원번호 ");
            stringBuilder.AppendLine("     , 0 as 전일잔고 ");
            stringBuilder.AppendLine("     , 0 as 현잔고 ");
            stringBuilder.AppendLine("     , 0 as 기간매출 ");
            stringBuilder.AppendLine("     , 0 as 기간매출서비스 ");
            stringBuilder.AppendLine("     , 0 as 기간현금금액 ");
            stringBuilder.AppendLine("     , 0 as 기간무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 기간카드금액 ");
            stringBuilder.AppendLine("     , 0 as 기간어음금액 ");
            stringBuilder.AppendLine("     , 0 as 기간할인액 ");
            stringBuilder.AppendLine("     , 0 as 기간매입 ");
            stringBuilder.AppendLine("     , 0 as 기간지급 ");
            stringBuilder.AppendLine("     , 0 as 일매출 ");
            stringBuilder.AppendLine("     , 0 as 일매출서비스 ");
            stringBuilder.AppendLine("     , 0 as 일현금금액 ");
            stringBuilder.AppendLine("     , 0 as 일무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 일카드금액 ");
            stringBuilder.AppendLine("     , 0 as 일어음금액 ");
            stringBuilder.AppendLine("     , 0 as 일할인액 ");
            stringBuilder.AppendLine("     , 0 as 일매입 ");
            stringBuilder.AppendLine("     , 0 as 일지급 ");
            stringBuilder.AppendLine(" into #Tmp전일잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select u.사업자번호 ");
            stringBuilder.AppendLine(" \t    , u.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(k.전일매출, 0) as 전일매출 ");
            stringBuilder.AppendLine(" \t    , isnull(h.전일매입, 0) as 전일매입 ");
            stringBuilder.AppendLine(" \t    , isnull(m.전일수금, 0) as 전일수금 ");
            stringBuilder.AppendLine(" \t    , isnull(p.전일지급, 0) as 전일지급 ");
            stringBuilder.AppendLine("     from T_사용자정보 u ");
            //if (sMan != "")
            //    stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            //if (sDept != "")
            //    stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            //if (sWare != "")
            //    stringBuilder.AppendLine("             and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp전일매출 k on k.사업자번호 = u.사업자번호 and k.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp전일매입 h on h.사업자번호 = u.사업자번호 and h.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp전일수금 m on m.사업자번호 = u.사업자번호 and m.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp전일지급 p on p.사업자번호 = u.사업자번호 and p.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine("     where u.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and u.지점코드 = '" + Common.p_strSpotCode + "' "); 
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("             and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("     ) x ");
            stringBuilder.AppendLine(" group by x.사원번호 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.사원번호 ");
            stringBuilder.AppendLine("     , 0 as 전일잔고 ");
            stringBuilder.AppendLine("     , 0 as 현잔고 ");
            stringBuilder.AppendLine("     , 0 as 기간매출 ");
            stringBuilder.AppendLine("     , 0 as 기간매출서비스 ");
            stringBuilder.AppendLine("     , 0 as 기간현금금액 ");
            stringBuilder.AppendLine("     , 0 as 기간무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 기간카드금액 ");
            stringBuilder.AppendLine("     , 0 as 기간어음금액 ");
            stringBuilder.AppendLine("     , 0 as 기간할인액 ");
            stringBuilder.AppendLine("     , 0 as 기간매입 ");
            stringBuilder.AppendLine("     , 0 as 기간지급 ");
            stringBuilder.AppendLine("     , 0 as 일매출 ");
            stringBuilder.AppendLine("     , 0 as 일매출서비스 ");
            stringBuilder.AppendLine("     , 0 as 일현금금액 ");
            stringBuilder.AppendLine("     , 0 as 일무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 일카드금액 ");
            stringBuilder.AppendLine("     , 0 as 일어음금액 ");
            stringBuilder.AppendLine("     , 0 as 일할인액 ");
            stringBuilder.AppendLine("     , 0 as 일매입 ");
            stringBuilder.AppendLine("     , 0 as 일지급 ");
            stringBuilder.AppendLine(" into #Tmp현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select u.사업자번호 ");
            stringBuilder.AppendLine(" \t    , u.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(k.현매출, 0) as 현매출 ");
            stringBuilder.AppendLine(" \t    , isnull(h.현매입, 0) as 현매입 ");
            stringBuilder.AppendLine(" \t    , isnull(m.현수금, 0) as 현수금 ");
            stringBuilder.AppendLine(" \t    , isnull(p.현지급, 0) as 현지급 ");
            stringBuilder.AppendLine("     from T_사용자정보 u ");
            //if (sMan != "")
            //    stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            //if (sDept != "")
            //    stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            //if (sWare != "")
            //    stringBuilder.AppendLine("             and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp현매출 k on k.사업자번호 = u.사업자번호 and k.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp현매입 h on h.사업자번호 = u.사업자번호 and h.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp현수금 m on m.사업자번호 = u.사업자번호 and m.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp현지급 p on p.사업자번호 = u.사업자번호 and p.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine("     where u.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and u.지점코드 = '" + Common.p_strSpotCode + "' "); 
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("             and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("     ) x ");
            stringBuilder.AppendLine(" group by x.사원번호 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.사원번호 ");
            stringBuilder.AppendLine("     , 0 as 전일잔고 ");
            stringBuilder.AppendLine("     , 0 as 현잔고 ");
            stringBuilder.AppendLine("     , sum(x.기간매출) as 기간매출 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine("     , sum(x.기간매출서비스박스) as 기간매출서비스 ");
            else
                stringBuilder.AppendLine("     , sum(x.기간매출서비스낱개) as 기간매출서비스 ");
            stringBuilder.AppendLine("     , sum(x.기간현금금액) as 기간현금금액 ");
            stringBuilder.AppendLine("     , sum(x.기간무통장금액) as 기간무통장금액 ");
            stringBuilder.AppendLine("     , sum(x.기간카드금액) as 기간카드금액 ");
            stringBuilder.AppendLine("     , sum(x.기간어음금액) as 기간어음금액 ");
            stringBuilder.AppendLine("     , sum(x.기간할인액) as 기간할인액 ");
            stringBuilder.AppendLine("     , sum(x.기간매입) as 기간매입 ");
            stringBuilder.AppendLine("     , sum(x.기간지급) as 기간지급 ");
            stringBuilder.AppendLine("     , 0 as 일매출 ");
            stringBuilder.AppendLine("     , 0 as 일매출서비스 ");
            stringBuilder.AppendLine("     , 0 as 일현금금액 ");
            stringBuilder.AppendLine("     , 0 as 일무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 일카드금액 ");
            stringBuilder.AppendLine("     , 0 as 일어음금액 ");
            stringBuilder.AppendLine("     , 0 as 일할인액 ");
            stringBuilder.AppendLine("     , 0 as 일매입 ");
            stringBuilder.AppendLine("     , 0 as 일지급 ");
            stringBuilder.AppendLine(" into #Tmp기간자료 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select u.사업자번호 ");
            stringBuilder.AppendLine(" \t    , u.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(k.기간매출, 0) as 기간매출 ");
            stringBuilder.AppendLine(" \t    , isnull(k.기간서비스박스, 0) as 기간매출서비스박스 ");
            stringBuilder.AppendLine(" \t    , isnull(k.기간서비스낱개, 0) as 기간매출서비스낱개 ");
            stringBuilder.AppendLine(" \t    , isnull(h.기간매입, 0) as 기간매입 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간현금금액, 0) as 기간현금금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간무통장금액, 0) as 기간무통장금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간카드금액, 0) as 기간카드금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간어음금액, 0) as 기간어음금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간할인액, 0) as 기간할인액 ");
            stringBuilder.AppendLine(" \t    , isnull(p.기간지급, 0) as 기간지급 ");
            stringBuilder.AppendLine("     from T_사용자정보 u ");
            //if (sMan != "")
            //    stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            //if (sDept != "")
            //    stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            //if (sWare != "")
            //    stringBuilder.AppendLine("             and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp기간매출 k on k.사업자번호 = u.사업자번호 and k.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp기간매입 h on h.사업자번호 = u.사업자번호 and h.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp기간수금 m on m.사업자번호 = u.사업자번호 and m.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp기간지급 p on p.사업자번호 = u.사업자번호 and p.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine("     where u.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and u.지점코드 = '" + Common.p_strSpotCode + "' "); 
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("             and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("     ) x ");
            stringBuilder.AppendLine(" group by x.사원번호 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.사원번호 ");
            stringBuilder.AppendLine("     , 0 as 전일잔고 ");
            stringBuilder.AppendLine("     , 0 as 현잔고 ");
            stringBuilder.AppendLine("     , 0 as 기간매출 ");
            stringBuilder.AppendLine("     , 0 as 기간매출서비스 ");
            stringBuilder.AppendLine("     , 0 as 기간현금금액 ");
            stringBuilder.AppendLine("     , 0 as 기간무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 기간카드금액 ");
            stringBuilder.AppendLine("     , 0 as 기간어음금액 ");
            stringBuilder.AppendLine("     , 0 as 기간할인액 ");
            stringBuilder.AppendLine("     , 0 as 기간매입 ");
            stringBuilder.AppendLine("     , 0 as 기간지급 ");
            stringBuilder.AppendLine("     , sum(x.일매출) as 일매출 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine("     , sum(x.일매출서비스박스) as 일매출서비스 ");
            else
                stringBuilder.AppendLine("     , sum(x.일매출서비스낱개) as 일매출서비스 ");
            stringBuilder.AppendLine("     , sum(x.일현금금액) as 일현금금액 ");
            stringBuilder.AppendLine("     , sum(x.일무통장금액) as 일무통장금액 ");
            stringBuilder.AppendLine("     , sum(x.일카드금액) as 일카드금액 ");
            stringBuilder.AppendLine("     , sum(x.일어음금액) as 일어음금액 ");
            stringBuilder.AppendLine("     , sum(x.일할인액) as 일할인액 ");
            stringBuilder.AppendLine("     , sum(x.일매입) as 일매입 ");
            stringBuilder.AppendLine("     , sum(x.일지급) as 일지급 ");
            stringBuilder.AppendLine(" into #Tmp일자료 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select u.사업자번호 ");
            stringBuilder.AppendLine(" \t    , u.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(k.일매출, 0) as 일매출 ");
            stringBuilder.AppendLine(" \t    , isnull(k.일서비스박스, 0) as 일매출서비스박스 ");
            stringBuilder.AppendLine(" \t    , isnull(k.일서비스낱개, 0) as 일매출서비스낱개 ");
            stringBuilder.AppendLine(" \t    , isnull(h.일매입, 0) as 일매입 ");
            stringBuilder.AppendLine(" \t    , isnull(m.일현금금액, 0) as 일현금금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.일무통장금액, 0) as 일무통장금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.일카드금액, 0) as 일카드금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.일어음금액, 0) as 일어음금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.일할인액, 0) as 일할인액 ");
            stringBuilder.AppendLine(" \t    , isnull(p.일지급, 0) as 일지급 ");
            stringBuilder.AppendLine("     from T_사용자정보 u ");
            //if (sMan != "")
            //    stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            //if (sDept != "")
            //    stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            //if (sWare != "")
            //    stringBuilder.AppendLine("             and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp일매출 k on k.사업자번호 = u.사업자번호 and k.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp일매입 h on h.사업자번호 = u.사업자번호 and h.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp일수금 m on m.사업자번호 = u.사업자번호 and m.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine(" \t\t    left outer join #Tmp일지급 p on p.사업자번호 = u.사업자번호 and p.등록사원번호 = u.사원번호 ");
            stringBuilder.AppendLine("     where u.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and u.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("             and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("     ) x ");
            stringBuilder.AppendLine(" group by x.사원번호 ");
            return stringBuilder.ToString();
        }

        public DataTable fn_이익현황_사원별(
          string sDay1,
          string sDay2,
          string sMan,
          string sDept,
          string sWare,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_이익금목록(sDay1, sDay2, sMan, sDept, sWare));
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     z.사원번호");
            stringBuilder.AppendLine("     , max(z.담당사원명) as 담당사원명");
            stringBuilder.AppendLine("     , sum(z.매출계) as 매출계 ");
            stringBuilder.AppendLine("     , sum(z.매출공급가) as 매출공급가 ");
            stringBuilder.AppendLine("     , sum(z.입고단가계) as 입고단가계 ");
            stringBuilder.AppendLine("     , sum(z.수금계) as 수금계 ");
            stringBuilder.AppendLine("     , sum(z.할인계) as 할인계 ");
            stringBuilder.AppendLine("     , sum(z.지출계) as 지출계 ");
            stringBuilder.AppendLine("     , sum(z.매출계) - sum(z.입고단가계) - sum(z.지출계) - sum(z.할인계) as 이익금 ");
            stringBuilder.AppendLine("     , case when sum(z.매출계) = 0 then 0 else round((sum(z.매출계) - sum(z.입고단가계) - sum(z.지출계) - sum(z.할인계)) / sum(z.매출계) * 100, 2) end as 이익율 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp사원 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp매출자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp수금자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp매입자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp지급자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp지출자료 ");
            stringBuilder.AppendLine(") z ");
            stringBuilder.AppendLine(" group by z.사원번호 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원명");
            stringBuilder.AppendLine("     , sum(z.매출계) as 매출계 ");
            stringBuilder.AppendLine("     , sum(z.매출공급가) as 매출공급가 ");
            stringBuilder.AppendLine("     , sum(z.입고단가계) as 입고단가계 ");
            stringBuilder.AppendLine("     , sum(z.수금계) as 수금계 ");
            stringBuilder.AppendLine("     , sum(z.할인계) as 할인계 ");
            stringBuilder.AppendLine("     , sum(z.지출계) as 지출계 ");
            stringBuilder.AppendLine("     , sum(z.매출계) - sum(z.입고단가계) - sum(z.지출계) - sum(z.할인계) as 이익금 ");
            stringBuilder.AppendLine("     , case when sum(z.매출계) = 0 then 0 else round((sum(z.매출계) - sum(z.입고단가계) - sum(z.지출계) - sum(z.할인계)) / sum(z.매출계) * 100, 2) end as 이익율 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp사원 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp매출자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp수금자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp매입자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp지급자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp지출자료 ");
            stringBuilder.AppendLine(") z ");
            stringBuilder.AppendLine(") x ");
            stringBuilder.AppendLine(" order by x.사원번호 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_이익현황_사원_일자별(
          string sDay1,
          string sDay2,
          string sMan,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_이익금목록(sDay1, sDay2, sMan, "", ""));
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     z.사원번호");
            stringBuilder.AppendLine("     , z.일자");
            stringBuilder.AppendLine("     , z.일자 as 일자명칭");
            stringBuilder.AppendLine("     , max(z.담당사원명) as 담당사원명");
            stringBuilder.AppendLine("     , sum(z.매출계) as 매출계 ");
            stringBuilder.AppendLine("     , sum(z.매출공급가) as 매출공급가 ");
            stringBuilder.AppendLine("     , sum(z.입고단가계) as 입고단가계 ");
            stringBuilder.AppendLine("     , sum(z.수금계) as 수금계 ");
            stringBuilder.AppendLine("     , sum(z.할인계) as 할인계 ");
            stringBuilder.AppendLine("     , sum(z.지출계) as 지출계 ");
            stringBuilder.AppendLine("     , sum(z.매출계) - sum(z.입고단가계) - sum(z.지출계) - sum(z.할인계) as 이익금 ");
            stringBuilder.AppendLine("     , case when sum(z.매출계) = 0 then 0 else round((sum(z.매출계) - sum(z.입고단가계) - sum(z.지출계) - sum(z.할인계)) / sum(z.매출계) * 100, 2) end as 이익율 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp매출자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp수금자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp매입자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp지급자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp지출자료 ");
            stringBuilder.AppendLine(") z ");
            stringBuilder.AppendLine(" group by z.사원번호, z.일자 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     z.사원번호");
            stringBuilder.AppendLine("     , '9999-99-99' as 일자");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 일자명칭");
            stringBuilder.AppendLine("     , max(z.담당사원명) as 담당사원명");
            stringBuilder.AppendLine("     , sum(z.매출계) as 매출계 ");
            stringBuilder.AppendLine("     , sum(z.매출공급가) as 매출공급가 ");
            stringBuilder.AppendLine("     , sum(z.입고단가계) as 입고단가계 ");
            stringBuilder.AppendLine("     , sum(z.수금계) as 수금계 ");
            stringBuilder.AppendLine("     , sum(z.할인계) as 할인계 ");
            stringBuilder.AppendLine("     , sum(z.지출계) as 지출계 ");
            stringBuilder.AppendLine("     , sum(z.매출계) - sum(z.입고단가계) - sum(z.지출계) - sum(z.할인계) as 이익금 ");
            stringBuilder.AppendLine("     , case when sum(z.매출계) = 0 then 0 else round((sum(z.매출계) - sum(z.입고단가계) - sum(z.지출계) - sum(z.할인계)) / sum(z.매출계) * 100, 2) end as 이익율 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp매출자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp수금자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp매입자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp지급자료 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp지출자료 ");
            stringBuilder.AppendLine(") z ");
            stringBuilder.AppendLine(" group by z.사원번호 ");
            stringBuilder.AppendLine(") x ");
            stringBuilder.AppendLine(" order by x.사원번호, x.일자 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string get_이익금목록2(
          string sDay1,
          string sDay2,
          string sMan,
          string sDept,
          string sWare)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     c.사원번호");
            stringBuilder.AppendLine("     , a.매출일자 as 일자");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         ) as 매출계 ");
            stringBuilder.AppendLine("     , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '0' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("             else round(isnull(b.금액, 0) / 1.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         ) as 매출공급가 ");
            stringBuilder.AppendLine("     , 0 as 매입계 ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("         (b.서비스박스 + b.총수량) * b.박스입고단가 ");
                stringBuilder.AppendLine("         ) as 입고단가계 ");
                stringBuilder.AppendLine("     , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("         b.서비스박스 * b.박스단가 ");
                stringBuilder.AppendLine("         ) as 서비스금액 ");
            }
            else
            {
                stringBuilder.AppendLine("     , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("         (b.서비스낱개 + b.총수량) * b.낱개입고단가 ");
                stringBuilder.AppendLine("         ) as 입고단가계 ");
                stringBuilder.AppendLine("     , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("         b.서비스낱개 * b.낱개단가 ");
                stringBuilder.AppendLine("         ) as 서비스금액 ");
            }
            stringBuilder.AppendLine("     , 0 as 현금금액 ");
            stringBuilder.AppendLine("     , 0 as 무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 카드금액 ");
            stringBuilder.AppendLine("     , 0 as 어음금액 ");
            stringBuilder.AppendLine("     , 0 as 수금계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine("     , 0 as 지급계 ");
            stringBuilder.AppendLine("     , 0 as 지출계 ");
            stringBuilder.AppendLine(" into #Tmp매출자료 ");
            stringBuilder.AppendLine(" from T_매출 a ");
            stringBuilder.AppendLine("     inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = c.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("     and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" group by c.사원번호, a.매출일자 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     c.사원번호");
            stringBuilder.AppendLine("     , a.수금일자 as 일자");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , 0 as 매출계 ");
            stringBuilder.AppendLine("     , 0 as 매출공급가 ");
            stringBuilder.AppendLine("     , 0 as 매입계 ");
            stringBuilder.AppendLine("     , 0 as 입고단가계 ");
            stringBuilder.AppendLine("     , 0 as 서비스금액 ");
            stringBuilder.AppendLine("     , sum(case when a.수금구분 = '1' then a.수금액 else 0 end) as 현금금액 ");
            stringBuilder.AppendLine("     , sum(case when a.수금구분 = '2' then a.수금액 else 0 end) as 무통장금액 ");
            stringBuilder.AppendLine("     , sum(case when a.수금구분 = '3' then a.수금액 else 0 end) as 카드금액 ");
            stringBuilder.AppendLine("     , sum(case when a.수금구분 = '9' then a.수금액 else 0 end) as 어음금액 ");
            stringBuilder.AppendLine("     , sum(a.수금액) as 수금계 ");
            stringBuilder.AppendLine("     , sum(a.할인액) as 할인계 ");
            stringBuilder.AppendLine("     , 0 as 지급계 ");
            stringBuilder.AppendLine("     , 0 as 지출계 ");
            stringBuilder.AppendLine(" into #Tmp수금자료 ");
            stringBuilder.AppendLine(" from T_수금 a ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = c.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수금일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.수금일자 <= '" + sDay2 + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("     and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" group by c.사원번호, a.수금일자 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     c.사원번호");
            stringBuilder.AppendLine("     , a.매입일자 as 일자");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , 0 as 매출계 ");
            stringBuilder.AppendLine("     , 0 as 매출공급가 ");
            stringBuilder.AppendLine("     , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         ) as 매입계 ");
            stringBuilder.AppendLine("     , 0 as 입고단가계 ");
            stringBuilder.AppendLine("     , 0 as 서비스금액 ");
            stringBuilder.AppendLine("     , 0 as 현금금액 ");
            stringBuilder.AppendLine("     , 0 as 무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 카드금액 ");
            stringBuilder.AppendLine("     , 0 as 어음금액 ");
            stringBuilder.AppendLine("     , 0 as 수금계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine("     , 0 as 지급계 ");
            stringBuilder.AppendLine("     , 0 as 지출계 ");
            stringBuilder.AppendLine(" into #Tmp매입자료 ");
            stringBuilder.AppendLine(" from T_매입 a ");
            stringBuilder.AppendLine("     inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = c.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매입일자 <= '" + sDay2 + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("     and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" group by c.사원번호, a.매입일자 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     c.사원번호");
            stringBuilder.AppendLine("     , a.지급일자 as 일자");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , 0 as 매출계 ");
            stringBuilder.AppendLine("     , 0 as 매출공급가 ");
            stringBuilder.AppendLine("     , 0 as 매입계 ");
            stringBuilder.AppendLine("     , 0 as 입고단가계 ");
            stringBuilder.AppendLine("     , 0 as 서비스금액 ");
            stringBuilder.AppendLine("     , 0 as 현금금액 ");
            stringBuilder.AppendLine("     , 0 as 무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 카드금액 ");
            stringBuilder.AppendLine("     , 0 as 어음금액 ");
            stringBuilder.AppendLine("     , 0 as 수금계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine("     , sum(a.지급액) as 지급계 ");
            stringBuilder.AppendLine("     , 0 as 지출계 ");
            stringBuilder.AppendLine(" into #Tmp지급자료 ");
            stringBuilder.AppendLine(" from T_지급 a ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = c.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지급일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.지급일자 <= '" + sDay2 + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("     and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" group by c.사원번호, a.지급일자 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     a.사원번호");
            stringBuilder.AppendLine("     , a.지출일자 as 일자");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , 0 as 매출계 ");
            stringBuilder.AppendLine("     , 0 as 매출공급가 ");
            stringBuilder.AppendLine("     , 0 as 매입계 ");
            stringBuilder.AppendLine("     , 0 as 입고단가계 ");
            stringBuilder.AppendLine("     , 0 as 서비스금액 ");
            stringBuilder.AppendLine("     , 0 as 현금금액 ");
            stringBuilder.AppendLine("     , 0 as 무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 카드금액 ");
            stringBuilder.AppendLine("     , 0 as 어음금액 ");
            stringBuilder.AppendLine("     , 0 as 수금계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine("     , 0 as 지급계 ");
            stringBuilder.AppendLine("     , sum(b.금액) as 지출계 ");
            stringBuilder.AppendLine(" into #Tmp지출자료 ");
            stringBuilder.AppendLine(" from T_지출 a ");
            stringBuilder.AppendLine("     inner join T_지출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.지출일자 = a.지출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.지출일자 <= '" + sDay2 + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and a.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("     and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" group by a.사원번호, a.지출일자 ");
            return stringBuilder.ToString();
        }

        private string get_이익금목록(string sDay1, string sDay2, string sMan, string sDept, string sWare)
        {
            StringBuilder stringBuilder = new StringBuilder();
            if (Common.p_ViewVisitor == "Y")
            {
                stringBuilder.AppendLine(" select ");
                stringBuilder.AppendLine("     a.등록사원번호 as 사원번호");
                stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
                stringBuilder.AppendLine("     , '' as 일자");
                stringBuilder.AppendLine("     , 0 as 매출계 ");
                stringBuilder.AppendLine("     , 0 as 매출공급가 ");
                stringBuilder.AppendLine("     , 0 as 매입계 ");
                stringBuilder.AppendLine("     , 0 as 입고단가계 ");
                stringBuilder.AppendLine("     , 0 as 서비스금액 ");
                stringBuilder.AppendLine("     , 0 as 현금금액 ");
                stringBuilder.AppendLine("     , 0 as 무통장금액 ");
                stringBuilder.AppendLine("     , 0 as 카드금액 ");
                stringBuilder.AppendLine("     , 0 as 어음금액 ");
                stringBuilder.AppendLine("     , 0 as 수금계 ");
                stringBuilder.AppendLine("     , 0 as 할인계 ");
                stringBuilder.AppendLine("     , 0 as 지급계 ");
                stringBuilder.AppendLine("     , 0 as 지출계 ");
                stringBuilder.AppendLine(" into #Tmp사원 ");
                stringBuilder.AppendLine(" from ( select distinct 사업자번호, 지점코드, 등록사원번호 ");
                stringBuilder.AppendLine("         from T_매출 ");
                stringBuilder.AppendLine("         where 사업자번호 = '" + Common.p_strCompID + "' ");
                stringBuilder.AppendLine("             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                stringBuilder.AppendLine("             and 매출일자 < '" + sDay1 + "' ");
                if (sMan != "")
                    stringBuilder.AppendLine("     and 등록사원번호 = '" + sMan + "' ");
                stringBuilder.AppendLine("     ) a ");
                stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = a.등록사원번호 ");
                stringBuilder.AppendLine(" where 1=1 ");
                if (sDept != "")
                    stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
                if (sWare != "")
                    stringBuilder.AppendLine("     and u.창고코드 = '" + sWare + "' ");
                stringBuilder.AppendLine(" group by a.등록사원번호 ");
            }
            else
            {
                stringBuilder.AppendLine(" select ");
                stringBuilder.AppendLine("     c.사원번호");
                stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
                stringBuilder.AppendLine("     , '' as 일자");
                stringBuilder.AppendLine("     , 0 as 매출계 ");
                stringBuilder.AppendLine("     , 0 as 매출공급가 ");
                stringBuilder.AppendLine("     , 0 as 매입계 ");
                stringBuilder.AppendLine("     , 0 as 입고단가계 ");
                stringBuilder.AppendLine("     , 0 as 서비스금액 ");
                stringBuilder.AppendLine("     , 0 as 현금금액 ");
                stringBuilder.AppendLine("     , 0 as 무통장금액 ");
                stringBuilder.AppendLine("     , 0 as 카드금액 ");
                stringBuilder.AppendLine("     , 0 as 어음금액 ");
                stringBuilder.AppendLine("     , 0 as 수금계 ");
                stringBuilder.AppendLine("     , 0 as 할인계 ");
                stringBuilder.AppendLine("     , 0 as 지급계 ");
                stringBuilder.AppendLine("     , 0 as 지출계 ");
                stringBuilder.AppendLine(" into #Tmp사원 ");
                stringBuilder.AppendLine(" from T_거래처정보 c ");
                stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = c.사업자번호 and u.지점코드 = c.지점코드 and u.사원번호 = c.사원번호 ");
                stringBuilder.AppendLine(" where c.사업자번호 = '" + Common.p_strCompID + "' ");
                stringBuilder.AppendLine("     and c.지점코드 = '" + Common.p_strSpotCode + "' ");
                if (sMan != "")
                    stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
                if (sDept != "")
                    stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
                if (sWare != "")
                    stringBuilder.AppendLine("     and u.창고코드 = '" + sWare + "' ");
                stringBuilder.AppendLine(" group by c.사원번호 ");
            }
            stringBuilder.AppendLine(" select ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("     a.등록사원번호 as 사원번호");
            else
                stringBuilder.AppendLine("     c.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , a.매출일자 as 일자");
            stringBuilder.AppendLine("     , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         ) as 매출계 ");
            stringBuilder.AppendLine("     , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '0' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("             else round(isnull(b.금액, 0) / 1.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         ) as 매출공급가 ");
            stringBuilder.AppendLine("     , 0 as 매입계 ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("         (b.서비스박스 + b.총수량) * b.박스입고단가 ");
                stringBuilder.AppendLine("         ) as 입고단가계 ");
                stringBuilder.AppendLine("     , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("         b.서비스박스 * b.박스단가 ");
                stringBuilder.AppendLine("         ) as 서비스금액 ");
            }
            else
            {
                stringBuilder.AppendLine("     , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("         (b.서비스낱개 + b.총수량) * b.낱개입고단가 ");
                stringBuilder.AppendLine("         ) as 입고단가계 ");
                stringBuilder.AppendLine("     , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
                stringBuilder.AppendLine("         b.서비스낱개 * b.낱개단가 ");
                stringBuilder.AppendLine("         ) as 서비스금액 ");
            }
            stringBuilder.AppendLine("     , 0 as 현금금액 ");
            stringBuilder.AppendLine("     , 0 as 무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 카드금액 ");
            stringBuilder.AppendLine("     , 0 as 어음금액 ");
            stringBuilder.AppendLine("     , 0 as 수금계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine("     , 0 as 지급계 ");
            stringBuilder.AppendLine("     , 0 as 지출계 ");
            stringBuilder.AppendLine(" into #Tmp매출자료 ");
            stringBuilder.AppendLine(" from T_매출 a ");
            stringBuilder.AppendLine("     inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = a.등록사원번호 ");
            else
                stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = c.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            }
            if (sDept != "")
                stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("     and u.창고코드 = '" + sWare + "' ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine(" group by a.등록사원번호, a.매출일자 ");
            else
                stringBuilder.AppendLine(" group by c.사원번호, a.매출일자 ");
            stringBuilder.AppendLine(" select ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("     a.등록사원번호 as 사원번호");
            else
                stringBuilder.AppendLine("     c.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , a.수금일자 as 일자");
            stringBuilder.AppendLine("     , 0 as 매출계 ");
            stringBuilder.AppendLine("     , 0 as 매출공급가 ");
            stringBuilder.AppendLine("     , 0 as 매입계 ");
            stringBuilder.AppendLine("     , 0 as 입고단가계 ");
            stringBuilder.AppendLine("     , 0 as 서비스금액 ");
            stringBuilder.AppendLine("     , sum(case when a.수금구분 = '1' then a.수금액 else 0 end) as 현금금액 ");
            stringBuilder.AppendLine("     , sum(case when a.수금구분 = '2' then a.수금액 else 0 end) as 무통장금액 ");
            stringBuilder.AppendLine("     , sum(case when a.수금구분 = '3' then a.수금액 else 0 end) as 카드금액 ");
            stringBuilder.AppendLine("     , sum(case when a.수금구분 = '9' then a.수금액 else 0 end) as 어음금액 ");
            stringBuilder.AppendLine("     , sum(a.수금액) as 수금계 ");
            stringBuilder.AppendLine("     , sum(a.할인액) as 할인계 ");
            stringBuilder.AppendLine("     , 0 as 지급계 ");
            stringBuilder.AppendLine("     , 0 as 지출계 ");
            stringBuilder.AppendLine(" into #Tmp수금자료 ");
            stringBuilder.AppendLine(" from T_수금 a ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = a.등록사원번호 ");
            else
                stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = c.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수금일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.수금일자 <= '" + sDay2 + "' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            }
            if (sDept != "")
                stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("     and u.창고코드 = '" + sWare + "' ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine(" group by a.등록사원번호, a.수금일자 ");
            else
                stringBuilder.AppendLine(" group by c.사원번호, a.수금일자 ");
            stringBuilder.AppendLine(" select ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("     a.등록사원번호 as 사원번호");
            else
                stringBuilder.AppendLine("     c.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , a.매입일자 as 일자");
            stringBuilder.AppendLine("     , 0 as 매출계 ");
            stringBuilder.AppendLine("     , 0 as 매출공급가 ");
            stringBuilder.AppendLine("     , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) ");
            stringBuilder.AppendLine("         ) as 매입계 ");
            stringBuilder.AppendLine("     , 0 as 입고단가계 ");
            stringBuilder.AppendLine("     , 0 as 서비스금액 ");
            stringBuilder.AppendLine("     , 0 as 현금금액 ");
            stringBuilder.AppendLine("     , 0 as 무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 카드금액 ");
            stringBuilder.AppendLine("     , 0 as 어음금액 ");
            stringBuilder.AppendLine("     , 0 as 수금계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine("     , 0 as 지급계 ");
            stringBuilder.AppendLine("     , 0 as 지출계 ");
            stringBuilder.AppendLine(" into #Tmp매입자료 ");
            stringBuilder.AppendLine(" from T_매입 a ");
            stringBuilder.AppendLine("     inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = a.등록사원번호 ");
            else
                stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = c.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매입일자 <= '" + sDay2 + "' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            }
            if (sDept != "")
                stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("     and u.창고코드 = '" + sWare + "' ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine(" group by a.등록사원번호, a.매입일자 ");
            else
                stringBuilder.AppendLine(" group by c.사원번호, a.매입일자 ");
            stringBuilder.AppendLine(" select ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("     a.등록사원번호 as 사원번호");
            else
                stringBuilder.AppendLine("     c.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , a.지급일자 as 일자");
            stringBuilder.AppendLine("     , 0 as 매출계 ");
            stringBuilder.AppendLine("     , 0 as 매출공급가 ");
            stringBuilder.AppendLine("     , 0 as 매입계 ");
            stringBuilder.AppendLine("     , 0 as 입고단가계 ");
            stringBuilder.AppendLine("     , 0 as 서비스금액 ");
            stringBuilder.AppendLine("     , 0 as 현금금액 ");
            stringBuilder.AppendLine("     , 0 as 무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 카드금액 ");
            stringBuilder.AppendLine("     , 0 as 어음금액 ");
            stringBuilder.AppendLine("     , 0 as 수금계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine("     , sum(a.지급액) as 지급계 ");
            stringBuilder.AppendLine("     , 0 as 지출계 ");
            stringBuilder.AppendLine(" into #Tmp지급자료 ");
            stringBuilder.AppendLine(" from T_지급 a ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = a.등록사원번호 ");
            else
                stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = c.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지급일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.지급일자 <= '" + sDay2 + "' ");
            if (sMan != "")
            {
                if (Common.p_ViewVisitor == "Y")
                    stringBuilder.AppendLine("     and a.등록사원번호 = '" + sMan + "' ");
                else
                    stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            }
            if (sDept != "")
                stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("     and u.창고코드 = '" + sWare + "' ");
            if (Common.p_ViewVisitor == "Y")
                stringBuilder.AppendLine(" group by a.등록사원번호, a.지급일자 ");
            else
                stringBuilder.AppendLine(" group by c.사원번호, a.지급일자 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     a.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , a.지출일자 as 일자");
            stringBuilder.AppendLine("     , 0 as 매출계 ");
            stringBuilder.AppendLine("     , 0 as 매출공급가 ");
            stringBuilder.AppendLine("     , 0 as 매입계 ");
            stringBuilder.AppendLine("     , 0 as 입고단가계 ");
            stringBuilder.AppendLine("     , 0 as 서비스금액 ");
            stringBuilder.AppendLine("     , 0 as 현금금액 ");
            stringBuilder.AppendLine("     , 0 as 무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 카드금액 ");
            stringBuilder.AppendLine("     , 0 as 어음금액 ");
            stringBuilder.AppendLine("     , 0 as 수금계 ");
            stringBuilder.AppendLine("     , 0 as 할인계 ");
            stringBuilder.AppendLine("     , 0 as 지급계 ");
            stringBuilder.AppendLine("     , sum(b.금액) as 지출계 ");
            stringBuilder.AppendLine(" into #Tmp지출자료 ");
            stringBuilder.AppendLine(" from T_지출 a ");
            stringBuilder.AppendLine("     inner join T_지출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.지출일자 = a.지출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.지출일자 <= '" + sDay2 + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and a.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("     and u.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" group by a.사원번호, a.지출일자 ");
            return stringBuilder.ToString();
        }

        private string get_매출원장목록_거래처별(
          string sDay1,
          string sDay2,
          string sCust,
          string sType,
          string strAllFlag)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.매출일자 as 일자 ");
            stringBuilder.AppendLine("     , a.매출일자 as 일자명칭 ");
            stringBuilder.AppendLine("     , a.전표번호    ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , w.거래처명    ");
            stringBuilder.AppendLine("     , b.상품코드    ");
            stringBuilder.AppendLine("     , case when b.항목순번 = 1 then c.상품명 else '' end 첫상품명 ");
            stringBuilder.AppendLine("     , c.상품명      ");
            stringBuilder.AppendLine("     , c.규격        ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.총수량 as 총수량 ");
            stringBuilder.AppendLine("     , convert(float, floor(b.박스단가 * 100) / 100) as 박스단가 ");
            stringBuilder.AppendLine("     , convert(float, floor(b.낱개단가 * 100) / 100) as 낱개단가 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.금액 as 금액 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) as 부가세액 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 = '2' then 1 else 0 end) * b.금액 as 행사금액 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 = '2' then 1 else 0 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) as 행사부가세액 ");
            stringBuilder.AppendLine("     , 0 as 수금액 ");
            stringBuilder.AppendLine("     , 0 as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("     , convert(float, floor(b.박스입고단가 * 100) / 100) as 박스입고단가 ");
            stringBuilder.AppendLine("     , convert(float, floor(b.낱개입고단가 * 100) / 100) as 낱개입고단가 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             round(b.금액 - b.박스수량 * b.박스입고단가, 0) as 박스이익금 ");
            stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             round(b.금액 - b.총수량 * b.낱개입고단가, 0) as 낱개이익금 ");
            stringBuilder.AppendLine("     , 1 as 정렬구분 ");
            stringBuilder.AppendLine("     , '매출' as 전표분류 ");
            stringBuilder.AppendLine("     , b.매출구분 as 구분 ");
            stringBuilder.AppendLine("     , (case when b.과세구분 = '2' then '(' + r.명칭 + ')' else r.명칭 end) as 구분명칭 ");
            stringBuilder.AppendLine("     , a.비고        ");
            stringBuilder.AppendLine("     , c.상품유형코드 ");
            stringBuilder.AppendLine("     , b.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , a.등록일시    ");
            stringBuilder.AppendLine(" into #매출 ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join T_상품정보 c on c.사업자번호 = b.사업자번호 and c.지점코드 = b.지점코드 and c.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("      inner join C_매출구분 r on r.코드 = b.매출구분 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') w on w.사업자번호 = a.사업자번호 and w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" select a.수금일자 as 일자 ");
            stringBuilder.AppendLine("     , a.수금일자 as 일자명칭 ");
            stringBuilder.AppendLine("     , convert(nvarchar(6), a.전표번호) as 전표번호 ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , w.거래처명    ");
            stringBuilder.AppendLine("     , '' as 상품코드 ");
            stringBuilder.AppendLine("     , '' as 첫상품명 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , 0 as 금액     ");
            stringBuilder.AppendLine("     , 0 as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 행사금액     ");
            stringBuilder.AppendLine("     , 0 as 행사부가세액 ");
            stringBuilder.AppendLine("     , -1 * a.수금액 as 수금액 ");
            stringBuilder.AppendLine("     , -1 * a.할인액 as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고     ");
            stringBuilder.AppendLine("     , 0 as 서비스박스 ");
            stringBuilder.AppendLine("     , 0 as 서비스낱개 ");
            stringBuilder.AppendLine("     , 0 as 박스입고단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개입고단가 ");
            stringBuilder.AppendLine("     , 0 as 박스이익금 ");
            stringBuilder.AppendLine("     , 0 as 낱개이익금 ");
            stringBuilder.AppendLine("     , 2 as 정렬구분 ");
            stringBuilder.AppendLine("     , '수금' as 전표분류 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , b.명칭 as 구분명칭 ");
            stringBuilder.AppendLine("     , a.비고        ");
            stringBuilder.AppendLine("     , '' as 상품유형코드 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , a.만기일자    ");
            stringBuilder.AppendLine("     , a.등록일시    ");
            stringBuilder.AppendLine(" into #수금 ");
            stringBuilder.AppendLine(" from T_수금 a       ");
            stringBuilder.AppendLine("      inner join C_금전구분 b on b.코드 = a.수금구분 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') w on w.사업자번호 = a.사업자번호 and w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수금일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.수금일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" select a.매입일자 as 일자 ");
            stringBuilder.AppendLine("     , a.매입일자 as 일자명칭 ");
            stringBuilder.AppendLine("     , a.전표번호    ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , w.거래처명    ");
            stringBuilder.AppendLine("     , b.상품코드    ");
            stringBuilder.AppendLine("     , case when b.항목순번 = 1 then c.상품명 else '' end 첫상품명 ");
            stringBuilder.AppendLine("     , c.상품명      ");
            stringBuilder.AppendLine("     , c.규격        ");
            stringBuilder.AppendLine("     , -1 * (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.총수량 as 총수량 ");
            stringBuilder.AppendLine("     , convert(float, floor(b.박스단가 * 100) / 100) as 박스단가 ");
            stringBuilder.AppendLine("     , convert(float, floor(b.낱개단가 * 100) / 100) as 낱개단가 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.금액 as 금액 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매입구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) as 부가세액 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매입구분 = '2' then 1 else 0 end) * b.금액 as 행사금액 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매입구분 = '2' then 1 else 0 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) as 행사부가세액 ");
            stringBuilder.AppendLine("     , 0 as 지급액 ");
            stringBuilder.AppendLine("     , 0 as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("     , 0 as 박스입고단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개입고단가 ");
            stringBuilder.AppendLine("     , 0 as 박스이익금 ");
            stringBuilder.AppendLine("     , 0 as 낱개이익금 ");
            stringBuilder.AppendLine("     , 3 as 정렬구분 ");
            stringBuilder.AppendLine("     , '매입' as 전표분류 ");
            stringBuilder.AppendLine("     , b.매입구분 as 구분 ");
            stringBuilder.AppendLine("     , (case when b.과세구분 = '2' then '(' + r.명칭 + ')' else r.명칭 end) as 구분명칭 ");
            stringBuilder.AppendLine("     , a.비고        ");
            stringBuilder.AppendLine("     , c.상품유형코드 ");
            stringBuilder.AppendLine("     , b.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , a.등록일시    ");
            stringBuilder.AppendLine(" into #매입 ");
            stringBuilder.AppendLine(" from T_매입 a       ");
            stringBuilder.AppendLine("      inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join T_상품정보 c on c.사업자번호 = b.사업자번호 and c.지점코드 = b.지점코드 and c.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("      inner join C_매입구분 r on r.코드 = b.매입구분 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') w on w.사업자번호 = a.사업자번호 and w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매입일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" select a.지급일자 as 일자 ");
            stringBuilder.AppendLine("     , a.지급일자 as 일자명칭 ");
            stringBuilder.AppendLine("     , convert(nvarchar(6), a.전표번호) as 전표번호 ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , w.거래처명    ");
            stringBuilder.AppendLine("     , '' as 상품코드 ");
            stringBuilder.AppendLine("     , '' as 첫상품명 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , 0 as 금액     ");
            stringBuilder.AppendLine("     , 0 as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 행사금액     ");
            stringBuilder.AppendLine("     , 0 as 행사부가세액 ");
            stringBuilder.AppendLine("     , a.지급액 as 지급액 ");
            stringBuilder.AppendLine("     , a.할인액 as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고     ");
            stringBuilder.AppendLine("     , 0 as 서비스박스 ");
            stringBuilder.AppendLine("     , 0 as 서비스낱개 ");
            stringBuilder.AppendLine("     , 0 as 박스입고단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개입고단가 ");
            stringBuilder.AppendLine("     , 0 as 박스이익금 ");
            stringBuilder.AppendLine("     , 0 as 낱개이익금 ");
            stringBuilder.AppendLine("     , 4 as 정렬구분 ");
            stringBuilder.AppendLine("     , '지급' as 전표분류 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , b.명칭 as 구분명칭 ");
            stringBuilder.AppendLine("     , a.비고        ");
            stringBuilder.AppendLine("     , '' as 상품유형코드 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , a.만기일자    ");
            stringBuilder.AppendLine("     , a.등록일시    ");
            stringBuilder.AppendLine(" into #지급 ");
            stringBuilder.AppendLine(" from T_지급 a       ");
            stringBuilder.AppendLine("      inner join C_금전구분 b on b.코드 = a.지급구분 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') w on w.사업자번호 = a.사업자번호 and w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지급일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.지급일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            return stringBuilder.ToString();
        }

        private string get_매입원장목록_거래처별(
          string sDay1,
          string sDay2,
          string sCust,
          string sType,
          string strAllFlag)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.매입일자 as 일자 ");
            stringBuilder.AppendLine("     , a.매입일자 as 일자명칭 ");
            stringBuilder.AppendLine("     , a.전표번호    ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , w.거래처명    ");
            stringBuilder.AppendLine("     , b.상품코드    ");
            stringBuilder.AppendLine("     , c.상품명      ");
            stringBuilder.AppendLine("     , c.규격        ");
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.총수량 as 총수량 ");
            stringBuilder.AppendLine("     , convert(float, floor(b.박스단가 * 100) / 100) as 박스단가 ");
            stringBuilder.AppendLine("     , convert(float, floor(b.낱개단가 * 100) / 100) as 낱개단가 ");
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.금액 as 금액 ");
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) as 부가세액 ");
            stringBuilder.AppendLine("     , (case when b.매입구분 = '2' then 1 else 0 end) * b.금액 as 행사금액 ");
            stringBuilder.AppendLine("     , (case when b.매입구분 = '2' then 1 else 0 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) as 행사부가세액 ");
            stringBuilder.AppendLine("     , 0 as 지급액 ");
            stringBuilder.AppendLine("     , 0 as 할인액 ");
            stringBuilder.AppendLine("     , 0.0 as 잔고 ");
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * b.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("     , 0 as 박스입고단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개입고단가 ");
            stringBuilder.AppendLine("     , 0 as 박스이익금 ");
            stringBuilder.AppendLine("     , 0 as 낱개이익금 ");
            stringBuilder.AppendLine("     , 1 as 정렬구분 ");
            stringBuilder.AppendLine("     , '매입' as 전표분류 ");
            stringBuilder.AppendLine("     , b.매입구분 as 구분 ");
            stringBuilder.AppendLine("     , (case when b.과세구분 = '2' then '(' + r.명칭 + ')' else r.명칭 end) as 구분명칭 ");
            stringBuilder.AppendLine("     , a.비고        ");
            stringBuilder.AppendLine("     , c.상품유형코드 ");
            stringBuilder.AppendLine("     , b.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , a.등록일시    ");
            stringBuilder.AppendLine(" into #매입 ");
            stringBuilder.AppendLine(" from T_매입 a       ");
            stringBuilder.AppendLine("      inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join T_상품정보 c on c.사업자번호 = b.사업자번호 and c.지점코드 = b.지점코드 and c.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("      inner join C_매입구분 r on r.코드 = b.매입구분 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') w on w.사업자번호 = a.사업자번호 and w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매입일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" select a.지급일자 as 일자 ");
            stringBuilder.AppendLine("     , a.지급일자 as 일자명칭 ");
            stringBuilder.AppendLine("     , convert(nvarchar(6), a.전표번호) as 전표번호 ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , w.거래처명    ");
            stringBuilder.AppendLine("     , '' as 상품코드 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , 0 as 금액     ");
            stringBuilder.AppendLine("     , 0 as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 행사금액     ");
            stringBuilder.AppendLine("     , 0 as 행사부가세액 ");
            stringBuilder.AppendLine("     , -1 * a.지급액 as 지급액 ");
            stringBuilder.AppendLine("     , -1 * a.할인액 as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고     ");
            stringBuilder.AppendLine("     , 0 as 서비스박스 ");
            stringBuilder.AppendLine("     , 0 as 서비스낱개 ");
            stringBuilder.AppendLine("     , 0 as 박스입고단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개입고단가 ");
            stringBuilder.AppendLine("     , 0 as 박스이익금 ");
            stringBuilder.AppendLine("     , 0 as 낱개이익금 ");
            stringBuilder.AppendLine("     , 2 as 정렬구분 ");
            stringBuilder.AppendLine("     , '지급' as 전표분류 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , b.명칭 as 구분명칭 ");
            stringBuilder.AppendLine("     , a.비고        ");
            stringBuilder.AppendLine("     , '' as 상품유형코드 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , a.만기일자    ");
            stringBuilder.AppendLine("     , a.등록일시    ");
            stringBuilder.AppendLine(" into #지급 ");
            stringBuilder.AppendLine(" from T_지급 a       ");
            stringBuilder.AppendLine("      inner join C_금전구분 b on b.코드 = a.지급구분 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') w on w.사업자번호 = a.사업자번호 and w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지급일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.지급일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" select a.매출일자 as 일자 ");
            stringBuilder.AppendLine("     , a.매출일자 as 일자명칭 ");
            stringBuilder.AppendLine("     , a.전표번호    ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , w.거래처명    ");
            stringBuilder.AppendLine("     , b.상품코드    ");
            stringBuilder.AppendLine("     , c.상품명      ");
            stringBuilder.AppendLine("     , c.규격        ");
            stringBuilder.AppendLine("     , -1 * (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.박스수량 as 박스수량 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.중간수량 as 중간수량 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.낱개수량 as 낱개수량 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.총수량 as 총수량 ");
            stringBuilder.AppendLine("     , convert(float, floor(b.박스단가 * 100) / 100) as 박스단가 ");
            stringBuilder.AppendLine("     , convert(float, floor(b.낱개단가 * 100) / 100) as 낱개단가 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.금액 as 금액 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) as 부가세액 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매출구분 = '2' then 1 else 0 end) * b.금액 as 행사금액 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매출구분 = '2' then 1 else 0 end) * ");
            stringBuilder.AppendLine("         (case when b.과세구분 = '2' then 0 ");
            stringBuilder.AppendLine("         else ");
            stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then 0 else round(b.금액 * 0.1, 0) end) ");
            stringBuilder.AppendLine("         end) as 행사부가세액 ");
            stringBuilder.AppendLine("     , 0 as 수금액 ");
            stringBuilder.AppendLine("     , 0 as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스박스 as 서비스박스 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매출구분 in ('1', '2') then 1 else -1 end) * b.서비스낱개 as 서비스낱개 ");
            stringBuilder.AppendLine("     , convert(float, floor(b.박스입고단가 * 100) / 100) as 박스입고단가 ");
            stringBuilder.AppendLine("     , convert(float, floor(b.낱개입고단가 * 100) / 100) as 낱개입고단가 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             round(b.금액 - b.박스수량 * b.박스입고단가, 0) as 박스이익금 ");
            stringBuilder.AppendLine("     , -1 * (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine("             round(b.금액 - b.총수량 * b.낱개입고단가, 0) as 낱개이익금 ");
            stringBuilder.AppendLine("     , 3 as 정렬구분 ");
            stringBuilder.AppendLine("     , '매출' as 전표분류 ");
            stringBuilder.AppendLine("     , b.매출구분 as 구분 ");
            stringBuilder.AppendLine("     , (case when b.과세구분 = '2' then '(' + r.명칭 + ')' else r.명칭 end) as 구분명칭 ");
            stringBuilder.AppendLine("     , a.비고        ");
            stringBuilder.AppendLine("     , c.상품유형코드 ");
            stringBuilder.AppendLine("     , b.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , a.등록일시    ");
            stringBuilder.AppendLine(" into #매출 ");
            stringBuilder.AppendLine(" from T_매출 a       ");
            stringBuilder.AppendLine("      inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join T_상품정보 c on c.사업자번호 = b.사업자번호 and c.지점코드 = b.지점코드 and c.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("      inner join C_매출구분 r on r.코드 = b.매출구분 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') w on w.사업자번호 = a.사업자번호 and w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" select a.수금일자 as 일자 ");
            stringBuilder.AppendLine("     , a.수금일자 as 일자명칭 ");
            stringBuilder.AppendLine("     , convert(nvarchar(6), a.전표번호) as 전표번호 ");
            stringBuilder.AppendLine("     , a.거래처코드  ");
            stringBuilder.AppendLine("     , w.거래처명    ");
            stringBuilder.AppendLine("     , '' as 상품코드 ");
            stringBuilder.AppendLine("     , '' as 상품명  ");
            stringBuilder.AppendLine("     , '' as 규격    ");
            stringBuilder.AppendLine("     , 0 as 박스수량 ");
            stringBuilder.AppendLine("     , 0 as 중간수량 ");
            stringBuilder.AppendLine("     , 0 as 낱개수량 ");
            stringBuilder.AppendLine("     , 0 as 총수량 ");
            stringBuilder.AppendLine("     , 0 as 박스단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개단가 ");
            stringBuilder.AppendLine("     , 0 as 금액     ");
            stringBuilder.AppendLine("     , 0 as 부가세액 ");
            stringBuilder.AppendLine("     , 0 as 행사금액     ");
            stringBuilder.AppendLine("     , 0 as 행사부가세액 ");
            stringBuilder.AppendLine("     , a.수금액 as 수금액 ");
            stringBuilder.AppendLine("     , a.할인액 as 할인액 ");
            stringBuilder.AppendLine("     , 0 as 잔고     ");
            stringBuilder.AppendLine("     , 0 as 서비스박스 ");
            stringBuilder.AppendLine("     , 0 as 서비스낱개 ");
            stringBuilder.AppendLine("     , 0 as 박스입고단가 ");
            stringBuilder.AppendLine("     , 0 as 낱개입고단가 ");
            stringBuilder.AppendLine("     , 0 as 박스이익금 ");
            stringBuilder.AppendLine("     , 0 as 낱개이익금 ");
            stringBuilder.AppendLine("     , 4 as 정렬구분 ");
            stringBuilder.AppendLine("     , '수금' as 전표분류 ");
            stringBuilder.AppendLine("     , '' as 구분 ");
            stringBuilder.AppendLine("     , b.명칭 as 구분명칭 ");
            stringBuilder.AppendLine("     , a.비고        ");
            stringBuilder.AppendLine("     , '' as 상품유형코드 ");
            stringBuilder.AppendLine("     , '' as 상품비고 ");
            stringBuilder.AppendLine("     , a.만기일자    ");
            stringBuilder.AppendLine("     , a.등록일시    ");
            stringBuilder.AppendLine(" into #수금 ");
            stringBuilder.AppendLine(" from T_수금 a       ");
            stringBuilder.AppendLine("      inner join C_금전구분 b on b.코드 = a.수금구분 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + strAllFlag + "') w on w.사업자번호 = a.사업자번호 and w.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수금일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.수금일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            return stringBuilder.ToString();
        }

        public DataTable fn_거래처별_잔고현황(
          string sDay1,
          string sDay2,
          string sInOut,
          string sSumGB,
          bool bNotZero,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          bool bRanking,
          string sArea,
          bool bDataYes,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.getSum_거래처별잔고(sDay1, sDay2, sInOut, sSumGB, bNotZero, sCust, sDept, sMan, sType, sArea, bDataYes));
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine("     , case when x.기간매출 = 0 then 0 else x.이익금 / x.기간매출 * 100 end as 기간이익률 ");
            stringBuilder.AppendLine("     , case when isnull(y.거래처사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(y.거래처사업자번호, 1, 3) + '-' + substring(y.거래처사업자번호, 4, 2) + '-' + substring(y.거래처사업자번호, 6, 5) end as 거래처사업자번호 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서");
            stringBuilder.AppendLine("     , z.사원번호");
            stringBuilder.AppendLine("     , z.담당사원명");
            stringBuilder.AppendLine("     , z.거래처코드");
            stringBuilder.AppendLine("     , z.거래처명");
            stringBuilder.AppendLine("     , z.전일잔고 ");
            stringBuilder.AppendLine("     , z.현잔고 ");
            stringBuilder.AppendLine("     , z.기간매출잔고 ");
            stringBuilder.AppendLine("     , z.기간매출 ");
            stringBuilder.AppendLine("     , z.기간행사매출 ");
            stringBuilder.AppendLine("     , z.기간매출공급가 ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , z.기간매출서비스박스 as 기간매출서비스 ");
                stringBuilder.AppendLine("     , z.기간입고단가계박스 as 기간입고단가계 ");
                stringBuilder.AppendLine("     , round(z.이익금박스, 0) as 이익금 ");
            }
            else
            {
                stringBuilder.AppendLine("     , z.기간매출서비스낱개 as 기간매출서비스 ");
                stringBuilder.AppendLine("     , z.기간입고단가계낱개 as 기간입고단가계 ");
                stringBuilder.AppendLine("     , round(z.이익금낱개, 0) as 이익금 ");
            }
            stringBuilder.AppendLine("     , z.기간현금금액 ");
            stringBuilder.AppendLine("     , z.기간무통장금액 ");
            stringBuilder.AppendLine("     , z.기간카드금액 ");
            stringBuilder.AppendLine("     , z.기간어음금액 ");
            stringBuilder.AppendLine("     , z.기간수금 ");
            stringBuilder.AppendLine("     , z.기간수금할인 ");
            stringBuilder.AppendLine("     , z.기간수금합계 ");
            stringBuilder.AppendLine("     , z.기간매입잔고 ");
            stringBuilder.AppendLine("     , z.기간매입 ");
            stringBuilder.AppendLine("     , z.기간지급 ");
            stringBuilder.AppendLine("     , z.기간지급할인 ");
            stringBuilder.AppendLine("     , z.기간지급합계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp거래처별잔고 ");
            stringBuilder.AppendLine(") z ");
            if (sSumGB == "1")
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select ");
                stringBuilder.AppendLine("     8 as 정렬순서");
                stringBuilder.AppendLine("     , z.사원번호 as 사원번호");
                stringBuilder.AppendLine("     , '--- 소계 ---' as 담당사원명");
                stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드");
                stringBuilder.AppendLine("     , '' as 거래처명");
                stringBuilder.AppendLine("     , sum(z.전일잔고) as 전일잔고 ");
                stringBuilder.AppendLine("     , sum(z.현잔고) as 현잔고 ");
                stringBuilder.AppendLine("     , sum(z.기간매출잔고) as 기간매출잔고 ");
                stringBuilder.AppendLine("     , sum(z.기간매출) as 기간매출 ");
                stringBuilder.AppendLine("     , sum(z.기간행사매출) as 기간행사매출 ");
                stringBuilder.AppendLine("     , sum(z.기간매출공급가) as 기간매출공급가 ");
                if (Common.p_strBox == "2")
                {
                    stringBuilder.AppendLine("     , sum(z.기간매출서비스박스) as 기간매출서비스 ");
                    stringBuilder.AppendLine("     , sum(z.기간입고단가계박스) as 기간입고단가계 ");
                    stringBuilder.AppendLine("     , sum(z.이익금박스) as 이익금 ");
                }
                else
                {
                    stringBuilder.AppendLine("     , sum(z.기간매출서비스낱개) as 기간매출서비스 ");
                    stringBuilder.AppendLine("     , sum(z.기간입고단가계낱개) as 기간입고단가계 ");
                    stringBuilder.AppendLine("     , sum(z.이익금낱개) as 이익금 ");
                }
                stringBuilder.AppendLine("     , sum(z.기간현금금액) as 기간현금금액 ");
                stringBuilder.AppendLine("     , sum(z.기간무통장금액) as 기간무통장금액 ");
                stringBuilder.AppendLine("     , sum(z.기간카드금액) as 기간카드금액 ");
                stringBuilder.AppendLine("     , sum(z.기간어음금액) as 기간어음금액 ");
                stringBuilder.AppendLine("     , sum(z.기간수금) as 기간수금 ");
                stringBuilder.AppendLine("     , sum(z.기간수금할인) as 기간수금할인 ");
                stringBuilder.AppendLine("     , sum(z.기간수금합계) as 기간수금합계 ");
                stringBuilder.AppendLine("     , sum(z.기간매입잔고) as 기간매입잔고 ");
                stringBuilder.AppendLine("     , sum(z.기간매입) as 기간매입 ");
                stringBuilder.AppendLine("     , sum(z.기간지급) as 기간지급 ");
                stringBuilder.AppendLine("     , sum(z.기간지급할인) as 기간지급할인 ");
                stringBuilder.AppendLine("     , sum(z.기간지급합계) as 기간지급합계 ");
                stringBuilder.AppendLine(" from ( ");
                stringBuilder.AppendLine("     select * from #Tmp거래처별잔고 ");
                stringBuilder.AppendLine(") z ");
                stringBuilder.AppendLine(" group by z.사원번호 ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원명");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , sum(z.전일잔고) as 전일잔고 ");
            stringBuilder.AppendLine("     , sum(z.현잔고) as 현잔고 ");
            stringBuilder.AppendLine("     , sum(z.기간매출잔고) as 기간매출잔고 ");
            stringBuilder.AppendLine("     , sum(z.기간매출) as 기간매출 ");
            stringBuilder.AppendLine("     , sum(z.기간행사매출) as 기간행사매출 ");
            stringBuilder.AppendLine("     , sum(z.기간매출공급가) as 기간매출공급가 ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , sum(z.기간매출서비스박스) as 기간매출서비스 ");
                stringBuilder.AppendLine("     , sum(z.기간입고단가계박스) as 기간입고단가계 ");
                stringBuilder.AppendLine("     , sum(z.이익금박스) as 이익금 ");
            }
            else
            {
                stringBuilder.AppendLine("     , sum(z.기간매출서비스낱개) as 기간매출서비스 ");
                stringBuilder.AppendLine("     , sum(z.기간입고단가계낱개) as 기간입고단가계 ");
                stringBuilder.AppendLine("     , sum(z.이익금낱개) as 이익금 ");
            }
            stringBuilder.AppendLine("     , sum(z.기간현금금액) as 기간현금금액 ");
            stringBuilder.AppendLine("     , sum(z.기간무통장금액) as 기간무통장금액 ");
            stringBuilder.AppendLine("     , sum(z.기간카드금액) as 기간카드금액 ");
            stringBuilder.AppendLine("     , sum(z.기간어음금액) as 기간어음금액 ");
            stringBuilder.AppendLine("     , sum(z.기간수금) as 기간수금 ");
            stringBuilder.AppendLine("     , sum(z.기간수금할인) as 기간수금할인 ");
            stringBuilder.AppendLine("     , sum(z.기간수금합계) as 기간수금합계 ");
            stringBuilder.AppendLine("     , sum(z.기간매입잔고) as 기간매입잔고 ");
            stringBuilder.AppendLine("     , sum(z.기간매입) as 기간매입 ");
            stringBuilder.AppendLine("     , sum(z.기간지급) as 기간지급 ");
            stringBuilder.AppendLine("     , sum(z.기간지급할인) as 기간지급할인 ");
            stringBuilder.AppendLine("     , sum(z.기간지급합계) as 기간지급합계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp거래처별잔고 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine("     left outer join T_거래처정보 y on y.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                                     and y.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                                     and y.거래처코드 = x.거래처코드 ");
            if (!bRanking)
                stringBuilder.AppendLine(" order by x.사원번호 asc, x.정렬순서 asc, x.거래처코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string getSum_거래처별잔고(
          string sDay1,
          string sDay2,
          string sInOut,
          string sSumGB,
          bool bNotZero,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_거래처별잔고(sDay1, sDay2, sInOut, sSumGB, sCust, sDept, sMan, sType, sArea, bDataYes));
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     zz.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            if (sSumGB == "0")
            {
                stringBuilder.AppendLine("     , '' as 거래처코드");
                stringBuilder.AppendLine("     , '' as 거래처명");
            }
            else
            {
                stringBuilder.AppendLine("     , zz.거래처코드");
                stringBuilder.AppendLine("     , max(c.거래처명) as 거래처명");
            }
            stringBuilder.AppendLine("     , sum(zz.전일잔고) as 전일잔고 ");
            stringBuilder.AppendLine("     , sum(zz.현잔고) as 현잔고 ");
            stringBuilder.AppendLine("     , sum(zz.기간매출) - sum(zz.기간수금합계) as 기간매출잔고 ");
            stringBuilder.AppendLine("     , sum(zz.기간매출) as 기간매출 ");
            stringBuilder.AppendLine("     , sum(zz.기간행사매출) as 기간행사매출 ");
            stringBuilder.AppendLine("     , sum(zz.기간매출공급가) as 기간매출공급가 ");
            stringBuilder.AppendLine("     , sum(zz.기간매출서비스박스) as 기간매출서비스박스 ");
            stringBuilder.AppendLine("     , sum(zz.기간매출서비스낱개) as 기간매출서비스낱개 ");
            stringBuilder.AppendLine("     , sum(zz.기간입고단가계박스) as 기간입고단가계박스 ");
            stringBuilder.AppendLine("     , sum(zz.기간입고단가계낱개) as 기간입고단가계낱개 ");
            stringBuilder.AppendLine("     , sum(zz.기간현금금액) as 기간현금금액 ");
            stringBuilder.AppendLine("     , sum(zz.기간무통장금액) as 기간무통장금액 ");
            stringBuilder.AppendLine("     , sum(zz.기간카드금액) as 기간카드금액 ");
            stringBuilder.AppendLine("     , sum(zz.기간어음금액) as 기간어음금액 ");
            stringBuilder.AppendLine("     , sum(zz.기간수금) as 기간수금 ");
            stringBuilder.AppendLine("     , sum(zz.기간수금할인) as 기간수금할인 ");
            stringBuilder.AppendLine("     , sum(zz.기간수금합계) as 기간수금합계 ");
            stringBuilder.AppendLine("     , sum(zz.기간매입) - sum(zz.기간지급합계) as 기간매입잔고 ");
            stringBuilder.AppendLine("     , sum(zz.기간매입) as 기간매입 ");
            stringBuilder.AppendLine("     , sum(zz.기간지급) as 기간지급 ");
            stringBuilder.AppendLine("     , sum(zz.기간지급할인) as 기간지급할인 ");
            stringBuilder.AppendLine("     , sum(zz.기간지급합계) as 기간지급합계 ");
            stringBuilder.AppendLine("     , sum(zz.기간매출) - sum(zz.기간입고단가계박스) - sum(zz.기간수금할인) as 이익금박스 ");
            stringBuilder.AppendLine("     , sum(zz.기간매출) - sum(zz.기간입고단가계낱개) - sum(zz.기간수금할인) as 이익금낱개 ");
            stringBuilder.AppendLine(" into #Tmp거래처별잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp전잔고 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp현잔고 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp기간잔고 ");
            stringBuilder.AppendLine(" ) zz ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = '" + Common.p_strSpotCode + "' and u.사원번호 = zz.사원번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = '" + Common.p_strCompID + "' and c.지점코드 = '" + Common.p_strSpotCode + "' and c.거래처코드 = zz.거래처코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            if (bDataYes)
            {
                stringBuilder.AppendLine("     and zz.거래처코드 in ( ");
                stringBuilder.AppendLine("                             select distinct 거래처코드 from T_매출 ");
                stringBuilder.AppendLine(" \t                        where 사업자번호 = '" + Common.p_strCompID + "' ");
                stringBuilder.AppendLine("                                 and 지점코드 = '" + Common.p_strSpotCode + "' ");
                stringBuilder.AppendLine(" \t                            and 매출일자 >= '" + sDay1 + "' and 매출일자 <= '" + sDay2 + "' ");
                stringBuilder.AppendLine("                             union all ");
                stringBuilder.AppendLine("                             select distinct 거래처코드 from T_수금 ");
                stringBuilder.AppendLine(" \t                        where 사업자번호 = '" + Common.p_strCompID + "' ");
                stringBuilder.AppendLine("                                 and 지점코드 = '" + Common.p_strSpotCode + "' ");
                stringBuilder.AppendLine(" \t                            and 수금일자 >= '" + sDay1 + "' and 수금일자 <= '" + sDay2 + "' ");
                stringBuilder.AppendLine("                             union all ");
                stringBuilder.AppendLine("                             select distinct 거래처코드 from T_매입 ");
                stringBuilder.AppendLine(" \t                        where 사업자번호 = '" + Common.p_strCompID + "' ");
                stringBuilder.AppendLine("                                 and 지점코드 = '" + Common.p_strSpotCode + "' ");
                stringBuilder.AppendLine(" \t                            and 매입일자 >= '" + sDay1 + "' and 매입일자 <= '" + sDay2 + "' ");
                stringBuilder.AppendLine("                             union all ");
                stringBuilder.AppendLine("                             select distinct 거래처코드 from T_지급 ");
                stringBuilder.AppendLine(" \t                        where 사업자번호 = '" + Common.p_strCompID + "' ");
                stringBuilder.AppendLine("                                 and 지점코드 = '" + Common.p_strSpotCode + "' ");
                stringBuilder.AppendLine(" \t                            and 지급일자 >= '" + sDay1 + "' and 지급일자 <= '" + sDay2 + "' ");
                stringBuilder.AppendLine("                         ) ");
            }
            if (sSumGB == "0")
                stringBuilder.AppendLine(" group by zz.사원번호 ");
            else
                stringBuilder.AppendLine(" group by zz.사원번호,  zz.거래처코드 ");
            if (bNotZero)
                stringBuilder.AppendLine(" having sum(zz.현잔고) <> 0 ");
            return stringBuilder.ToString();
        }

        private string get_거래처별잔고(
          string sDay1,
          string sDay2,
          string sInOut,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 전일매출 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매출이전 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 < '" + sDay1 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 전일매입 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매입이전 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 < '" + sDay1 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 전일수금합계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp수금이전 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 < '" + sDay1 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 전일지급합계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp지급이전 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 < '" + sDay1 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매출 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매출현재 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매입 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매입현재 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 현수금합계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp수금현재 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 현지급합계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp지급현재 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간매출 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 = '2' then 1 else 0 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간행사매출 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine(" \t\t\t\t    else ");
            stringBuilder.AppendLine(" \t\t\t\t        (case when a.부가세코드 = '0' or a.부가세코드 = '2' then isnull(b.금액, 0) ");
            stringBuilder.AppendLine(" \t\t\t\t        else round(isnull(b.금액, 0) / 1.1, 0) end) ");
            stringBuilder.AppendLine(" \t\t\t\t    end) ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간매출공급가 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then b.박스단가 * b.서비스박스  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then b.박스단가 * b.서비스박스  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else b.박스단가 * b.서비스박스 + round(b.박스단가 * b.서비스박스 * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간서비스박스 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then b.낱개단가 * b.서비스낱개  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then b.낱개단가 * b.서비스낱개  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else b.낱개단가 * b.서비스낱개 + round(b.낱개단가 * b.서비스낱개 * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간서비스낱개 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine(" \t\t\t        (b.서비스박스 + b.박스수량) * b.박스입고단가 ");
            stringBuilder.AppendLine(" \t\t\t        ) as 기간입고단가계박스 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) * ");
            stringBuilder.AppendLine(" \t\t\t        (b.서비스총수량 + b.총수량) * b.낱개입고단가 ");
            stringBuilder.AppendLine(" \t\t\t        ) as 기간입고단가계낱개 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매출기간 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 기간매입 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매입기간 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '1' then a.수금액 else 0 end) as 기간현금금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '2' then a.수금액 else 0 end) as 기간무통장금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '3' then a.수금액 else 0 end) as 기간카드금액 ");
            stringBuilder.AppendLine("                 , sum(case when a.수금구분 = '9' then a.수금액 else 0 end) as 기간어음금액 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(a.수금액) as 기간수금 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(a.할인액) as 기간수금할인 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(a.합계금액) as 기간수금합계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp수금기간 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(지급액) as 기간지급 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(할인액) as 기간지급할인 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 기간지급합계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp지급기간 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.사원번호 ");
            stringBuilder.AppendLine("     , x.거래처코드 ");
            stringBuilder.AppendLine("     , sum(x.전일잔고) as 전일잔고 ");
            stringBuilder.AppendLine("     , 0 as 현잔고 ");
            stringBuilder.AppendLine("     , 0 as 기간매출 ");
            stringBuilder.AppendLine("     , 0 as 기간행사매출 ");
            stringBuilder.AppendLine("     , 0 as 기간매출공급가 ");
            stringBuilder.AppendLine("     , 0 as 기간매출서비스박스 ");
            stringBuilder.AppendLine("     , 0 as 기간매출서비스낱개 ");
            stringBuilder.AppendLine("     , 0 as 기간입고단가계박스 ");
            stringBuilder.AppendLine("     , 0 as 기간입고단가계낱개 ");
            stringBuilder.AppendLine("     , 0 as 기간현금금액 ");
            stringBuilder.AppendLine("     , 0 as 기간무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 기간카드금액 ");
            stringBuilder.AppendLine("     , 0 as 기간어음금액 ");
            stringBuilder.AppendLine("     , 0 as 기간수금 ");
            stringBuilder.AppendLine("     , 0 as 기간수금할인 ");
            stringBuilder.AppendLine("     , 0 as 기간수금합계 ");
            stringBuilder.AppendLine("     , 0 as 기간매입 ");
            stringBuilder.AppendLine("     , 0 as 기간지급 ");
            stringBuilder.AppendLine("     , 0 as 기간지급할인 ");
            stringBuilder.AppendLine("     , 0 as 기간지급합계 ");
            stringBuilder.AppendLine(" into #Tmp전잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , a.초기잔고 ");
            stringBuilder.AppendLine(" \t    , isnull(k.전일매출, 0) as 전일매출 ");
            stringBuilder.AppendLine(" \t    , isnull(h.전일매입, 0) as 전일매입 ");
            stringBuilder.AppendLine(" \t    , isnull(m.전일수금합계, 0) as 전일수금합계 ");
            stringBuilder.AppendLine(" \t    , isnull(p.전일지급합계, 0) as 전일지급합계 ");
            if (sInOut == "0")
                stringBuilder.AppendLine(" \t    , isnull(a.초기잔고, 0) + isnull(k.전일매출, 0) - isnull(m.전일수금합계, 0) - isnull(h.전일매입, 0) + isnull(p.전일지급합계, 0) as 전일잔고 ");
            else
                stringBuilder.AppendLine(" \t    , isnull(a.초기잔고, 0) - isnull(k.전일매출, 0) + isnull(m.전일수금합계, 0) + isnull(h.전일매입, 0) - isnull(p.전일지급합계, 0) as 전일잔고 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp매출이전 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp매입이전 h on h.사업자번호 = a.사업자번호 and h.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp수금이전 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp지급이전 p on p.사업자번호 = a.사업자번호 and p.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            if (sInOut == "0")
                stringBuilder.AppendLine(" \t    and a.거래처구분 in ('1', '3') ");
            else
                stringBuilder.AppendLine(" \t    and a.거래처구분 in ('2', '3') ");
            stringBuilder.AppendLine("     ) x ");
            stringBuilder.AppendLine(" group by x.사원번호, x.거래처코드 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.사원번호 ");
            stringBuilder.AppendLine("     , x.거래처코드 ");
            stringBuilder.AppendLine("     , 0 as 전일잔고 ");
            stringBuilder.AppendLine("     , sum(x.현잔고) as 현잔고 ");
            stringBuilder.AppendLine("     , 0 as 기간매출 ");
            stringBuilder.AppendLine("     , 0 as 기간행사매출 ");
            stringBuilder.AppendLine("     , 0 as 기간매출공급가 ");
            stringBuilder.AppendLine("     , 0 as 기간매출서비스박스 ");
            stringBuilder.AppendLine("     , 0 as 기간매출서비스낱개 ");
            stringBuilder.AppendLine("     , 0 as 기간입고단가계박스 ");
            stringBuilder.AppendLine("     , 0 as 기간입고단가계낱개 ");
            stringBuilder.AppendLine("     , 0 as 기간현금금액 ");
            stringBuilder.AppendLine("     , 0 as 기간무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 기간카드금액 ");
            stringBuilder.AppendLine("     , 0 as 기간어음금액 ");
            stringBuilder.AppendLine("     , 0 as 기간수금 ");
            stringBuilder.AppendLine("     , 0 as 기간수금할인 ");
            stringBuilder.AppendLine("     , 0 as 기간수금합계 ");
            stringBuilder.AppendLine("     , 0 as 기간매입 ");
            stringBuilder.AppendLine("     , 0 as 기간지급 ");
            stringBuilder.AppendLine("     , 0 as 기간지급할인 ");
            stringBuilder.AppendLine("     , 0 as 기간지급합계 ");
            stringBuilder.AppendLine(" into #Tmp현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , a.초기잔고 ");
            stringBuilder.AppendLine(" \t    , isnull(k.현매출, 0) as 현매출 ");
            stringBuilder.AppendLine(" \t    , isnull(h.현매입, 0) as 현매입 ");
            stringBuilder.AppendLine(" \t    , isnull(m.현수금합계, 0) as 현수금합계 ");
            stringBuilder.AppendLine(" \t    , isnull(p.현지급합계, 0) as 현지급합계 ");
            if (sInOut == "0")
                stringBuilder.AppendLine(" \t    , isnull(a.초기잔고, 0) + isnull(k.현매출, 0) - isnull(m.현수금합계, 0) - isnull(h.현매입, 0) + isnull(p.현지급합계, 0) as 현잔고 ");
            else
                stringBuilder.AppendLine(" \t    , isnull(a.초기잔고, 0) - isnull(k.현매출, 0) + isnull(m.현수금합계, 0) + isnull(h.현매입, 0) - isnull(p.현지급합계, 0) as 현잔고 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp매출현재 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp매입현재 h on h.사업자번호 = a.사업자번호 and h.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp수금현재 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp지급현재 p on p.사업자번호 = a.사업자번호 and p.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            if (sInOut == "0")
                stringBuilder.AppendLine(" \t    and a.거래처구분 in ('1', '3') ");
            else
                stringBuilder.AppendLine(" \t    and a.거래처구분 in ('2', '3') ");
            stringBuilder.AppendLine("     ) x ");
            stringBuilder.AppendLine(" group by x.사원번호, x.거래처코드 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.사원번호 ");
            stringBuilder.AppendLine("     , x.거래처코드 ");
            stringBuilder.AppendLine("     , 0 as 전일잔고 ");
            stringBuilder.AppendLine("     , 0 as 현잔고 ");
            stringBuilder.AppendLine("     , sum(x.기간매출) as 기간매출 ");
            stringBuilder.AppendLine("     , sum(x.기간행사매출) as 기간행사매출 ");
            stringBuilder.AppendLine("     , sum(x.기간매출공급가) as 기간매출공급가 ");
            stringBuilder.AppendLine("     , sum(x.기간매출서비스박스) as 기간매출서비스박스 ");
            stringBuilder.AppendLine("     , sum(x.기간매출서비스낱개) as 기간매출서비스낱개 ");
            stringBuilder.AppendLine("     , sum(x.기간입고단가계박스) as 기간입고단가계박스 ");
            stringBuilder.AppendLine("     , sum(x.기간입고단가계낱개) as 기간입고단가계낱개 ");
            stringBuilder.AppendLine("     , sum(x.기간현금금액) as 기간현금금액 ");
            stringBuilder.AppendLine("     , sum(x.기간무통장금액) as 기간무통장금액 ");
            stringBuilder.AppendLine("     , sum(x.기간카드금액) as 기간카드금액 ");
            stringBuilder.AppendLine("     , sum(x.기간어음금액) as 기간어음금액 ");
            stringBuilder.AppendLine("     , sum(x.기간수금) as 기간수금 ");
            stringBuilder.AppendLine("     , sum(x.기간수금할인) as 기간수금할인 ");
            stringBuilder.AppendLine("     , sum(x.기간수금합계) as 기간수금합계 ");
            stringBuilder.AppendLine("     , sum(x.기간매입) as 기간매입 ");
            stringBuilder.AppendLine("     , sum(x.기간지급) as 기간지급 ");
            stringBuilder.AppendLine("     , sum(x.기간지급할인) as 기간지급할인 ");
            stringBuilder.AppendLine("     , sum(x.기간지급합계) as 기간지급합계 ");
            stringBuilder.AppendLine(" into #Tmp기간잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(k.기간매출, 0) as 기간매출 ");
            stringBuilder.AppendLine(" \t    , isnull(k.기간행사매출, 0) as 기간행사매출 ");
            stringBuilder.AppendLine(" \t    , isnull(k.기간매출공급가, 0) as 기간매출공급가 ");
            stringBuilder.AppendLine(" \t    , isnull(k.기간서비스박스, 0) as 기간매출서비스박스 ");
            stringBuilder.AppendLine(" \t    , isnull(k.기간서비스낱개, 0) as 기간매출서비스낱개 ");
            stringBuilder.AppendLine(" \t    , isnull(k.기간입고단가계박스, 0) as 기간입고단가계박스 ");
            stringBuilder.AppendLine(" \t    , isnull(k.기간입고단가계낱개, 0) as 기간입고단가계낱개 ");
            stringBuilder.AppendLine(" \t    , isnull(h.기간매입, 0) as 기간매입 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간현금금액, 0) as 기간현금금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간무통장금액, 0) as 기간무통장금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간카드금액, 0) as 기간카드금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간어음금액, 0) as 기간어음금액 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간수금, 0) as 기간수금 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간수금할인, 0) as 기간수금할인 ");
            stringBuilder.AppendLine(" \t    , isnull(m.기간수금합계, 0) as 기간수금합계 ");
            stringBuilder.AppendLine(" \t    , isnull(p.기간지급, 0) as 기간지급 ");
            stringBuilder.AppendLine(" \t    , isnull(p.기간지급할인, 0) as 기간지급할인 ");
            stringBuilder.AppendLine(" \t    , isnull(p.기간지급합계, 0) as 기간지급합계 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp매출기간 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp매입기간 h on h.사업자번호 = a.사업자번호 and h.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp수금기간 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp지급기간 p on p.사업자번호 = a.사업자번호 and p.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            if (sInOut == "0")
                stringBuilder.AppendLine(" \t    and a.거래처구분 in ('1', '3') ");
            else
                stringBuilder.AppendLine(" \t    and a.거래처구분 in ('2', '3') ");
            stringBuilder.AppendLine("     ) x ");
            stringBuilder.AppendLine(" group by x.사원번호, x.거래처코드 ");
            return stringBuilder.ToString();
        }

        public DataTable fn_거래처별_년간매출현황(
          string sYYYY,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.getSum_거래처별년간매출(sYYYY, sSumGB, sCust, sDept, sMan, sType, sArea, bDataYes));
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서");
            stringBuilder.AppendLine("     , z.사원번호");
            stringBuilder.AppendLine("     , z.담당사원명");
            stringBuilder.AppendLine("     , z.거래처코드");
            stringBuilder.AppendLine("     , z.거래처명");
            stringBuilder.AppendLine("     , z.분기정렬 ");
            int num;
            for (num = 1; num <= 6; ++num)
                stringBuilder.AppendLine("     , z.월" + num.ToString("00") + " ");
            stringBuilder.AppendLine("     , z.분기계 ");
            stringBuilder.AppendLine("     , z.년계 ");
            stringBuilder.AppendLine(" from #Tmp년간매출 z ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원명");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , z.분기정렬 ");
            for (num = 1; num <= 6; ++num)
                stringBuilder.AppendLine("     , sum(z.월" + num.ToString("00") + ") as 매출" + num.ToString("00") + " ");
            stringBuilder.AppendLine("     , sum(z.분기계) as 분기계 ");
            stringBuilder.AppendLine("     , sum(z.년계) as 년계 ");
            stringBuilder.AppendLine(" from #Tmp년간매출 z ");
            stringBuilder.AppendLine(" group by z.분기정렬 ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine(" order by x.정렬순서 asc, x.사원번호 asc, x.거래처코드 asc, x.분기정렬 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string getSum_거래처별년간매출(
          string sYYYY,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_거래처별년간매출(sYYYY, sSumGB, sCust, sDept, sMan, sType, sArea, bDataYes));
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     zz.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            if (sSumGB == "0")
            {
                stringBuilder.AppendLine("     , '' as 거래처코드");
                stringBuilder.AppendLine("     , '' as 거래처명");
            }
            else
            {
                stringBuilder.AppendLine("     , zz.거래처코드");
                stringBuilder.AppendLine("     , max(c.거래처명) as 거래처명");
            }
            stringBuilder.AppendLine("     , zz.분기정렬 ");
            for (int index = 1; index <= 6; ++index)
                stringBuilder.AppendLine("     , sum(zz.매출" + index.ToString("00") + ") as 월" + index.ToString("00") + " ");
            stringBuilder.AppendLine("     , sum(zz.매출분기계) as 분기계 ");
            stringBuilder.AppendLine("     , sum(zz.매출년계) as 년계 ");
            stringBuilder.AppendLine(" into #Tmp년간매출 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp상반기 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp하반기 ");
            stringBuilder.AppendLine(" ) zz ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = '" + Common.p_strSpotCode + "' and u.사원번호 = zz.사원번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = '" + Common.p_strCompID + "' and c.지점코드 = '" + Common.p_strSpotCode + "' and c.거래처코드 = zz.거래처코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            if (bDataYes)
            {
                stringBuilder.AppendLine("     and zz.거래처코드 in (select distinct 거래처코드 from T_매출 ");
                stringBuilder.AppendLine(" \t                        where 사업자번호 = '" + Common.p_strCompID + "' ");
                stringBuilder.AppendLine("                                 and 지점코드 = '" + Common.p_strSpotCode + "' ");
                stringBuilder.AppendLine(" \t                            and substring(매출일자, 1, 4) = '" + sYYYY + "' ) ");
            }
            if (sSumGB == "0")
                stringBuilder.AppendLine(" group by zz.사원번호, zz.분기정렬 ");
            else
                stringBuilder.AppendLine(" group by zz.사원번호,  zz.거래처코드, zz.분기정렬 ");
            return stringBuilder.ToString();
        }

        private string get_거래처별년간매출(
          string sYYYY,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            for (int index = 1; index <= 6; ++index)
            {
                stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.매출일자, 6, 2) <> '" + index.ToString("00") + "' then 0 else  ");
                stringBuilder.AppendLine(" \t\t\t            (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
                stringBuilder.AppendLine(" \t\t\t\t        (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine(" \t\t\t\t        else  ");
                stringBuilder.AppendLine(" \t\t\t\t\t        (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine(" \t\t\t\t\t        else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine(" \t\t\t\t        end)  ");
                stringBuilder.AppendLine(" \t\t\t\t    end) as 매출" + index.ToString("00") + " ");
            }
            stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.매출일자, 6, 2) > '06' then 0 else  ");
            stringBuilder.AppendLine(" \t\t\t            (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t        (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t        else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t        end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end) as 매출분기계 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( ");
            stringBuilder.AppendLine(" \t\t\t            (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t        (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t        else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t        end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 매출년계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매출1 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and substring(a.매출일자, 1, 4) = '" + sYYYY + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , 2 as 분기정렬 ");
            for (int index = 7; index <= 12; ++index)
            {
                stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.매출일자, 6, 2) <> '" + index.ToString("00") + "' then 0 else  ");
                stringBuilder.AppendLine(" \t\t\t            (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
                stringBuilder.AppendLine(" \t\t\t\t        (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine(" \t\t\t\t        else  ");
                stringBuilder.AppendLine(" \t\t\t\t\t        (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine(" \t\t\t\t\t        else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine(" \t\t\t\t        end)  ");
                stringBuilder.AppendLine(" \t\t\t\t    end) as 매출" + index.ToString("00") + " ");
            }
            stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.매출일자, 6, 2) < '07' then 0 else  ");
            stringBuilder.AppendLine(" \t\t\t            (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t        (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t        else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t        end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end) as 매출분기계 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( ");
            stringBuilder.AppendLine(" \t\t\t            (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t        (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t        else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t        end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 매출년계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매출2 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and substring(a.매출일자, 1, 4) = '" + sYYYY + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , 1 as 분기정렬 ");
            for (int index = 1; index <= 6; ++index)
                stringBuilder.AppendLine(" \t    , isnull(k.매출" + index.ToString("00") + ", 0) as 매출" + index.ToString("00") + " ");
            stringBuilder.AppendLine(" \t    , isnull(k.매출분기계, 0) as 매출분기계 ");
            stringBuilder.AppendLine(" \t    , isnull(k.매출년계, 0) as 매출년계 ");
            stringBuilder.AppendLine("     into #Tmp상반기 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp매출1 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            if (sArea != "")
                stringBuilder.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            stringBuilder.AppendLine(" \t    and a.거래처구분 in ('1', '3') ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , 2 as 분기정렬 ");
            for (int index = 7; index <= 12; ++index)
                stringBuilder.AppendLine(" \t    , isnull(k.매출" + index.ToString("00") + ", 0) as 매출" + index.ToString("00") + " ");
            stringBuilder.AppendLine(" \t    , isnull(k.매출분기계, 0) as 매출분기계 ");
            stringBuilder.AppendLine(" \t    , isnull(k.매출년계, 0) as 매출년계 ");
            stringBuilder.AppendLine("     into #Tmp하반기 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp매출2 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            if (sArea != "")
                stringBuilder.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            stringBuilder.AppendLine(" \t    and a.거래처구분 in ('1', '3') ");
            return stringBuilder.ToString();
        }

        public DataTable fn_거래처별_년간매입현황(
          string sYYYY,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.getSum_거래처별년간매입(sYYYY, sSumGB, sCust, sDept, sMan, sType, sArea, bDataYes));
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서");
            stringBuilder.AppendLine("     , z.사원번호");
            stringBuilder.AppendLine("     , z.담당사원명");
            stringBuilder.AppendLine("     , z.거래처코드");
            stringBuilder.AppendLine("     , z.거래처명");
            stringBuilder.AppendLine("     , z.분기정렬 ");
            int num;
            for (num = 1; num <= 6; ++num)
                stringBuilder.AppendLine("     , z.월" + num.ToString("00") + " ");
            stringBuilder.AppendLine("     , z.분기계 ");
            stringBuilder.AppendLine("     , z.년계 ");
            stringBuilder.AppendLine(" from #Tmp년간매입 z ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원명");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , z.분기정렬 ");
            for (num = 1; num <= 6; ++num)
                stringBuilder.AppendLine("     , sum(z.월" + num.ToString("00") + ") as 월" + num.ToString("00") + " ");
            stringBuilder.AppendLine("     , sum(z.분기계) as 분기계 ");
            stringBuilder.AppendLine("     , sum(z.년계) as 년계 ");
            stringBuilder.AppendLine(" from #Tmp년간매입 z ");
            stringBuilder.AppendLine(" group by z.분기정렬 ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine(" order by x.정렬순서 asc, x.사원번호 asc, x.거래처코드 asc, x.분기정렬 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string getSum_거래처별년간매입(
          string sYYYY,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_거래처별년간매입(sYYYY, sSumGB, sCust, sDept, sMan, sType, sArea, bDataYes));
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     zz.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            if (sSumGB == "0")
            {
                stringBuilder.AppendLine("     , '' as 거래처코드");
                stringBuilder.AppendLine("     , '' as 거래처명");
            }
            else
            {
                stringBuilder.AppendLine("     , zz.거래처코드");
                stringBuilder.AppendLine("     , max(c.거래처명) as 거래처명");
            }
            stringBuilder.AppendLine("     , zz.분기정렬 ");
            for (int index = 1; index <= 6; ++index)
                stringBuilder.AppendLine("     , sum(zz.매입" + index.ToString("00") + ") as 월" + index.ToString("00") + " ");
            stringBuilder.AppendLine("     , sum(zz.매입분기계) as 분기계 ");
            stringBuilder.AppendLine("     , sum(zz.매입년계) as 년계 ");
            stringBuilder.AppendLine(" into #Tmp년간매입 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp상반기 ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select * from #Tmp하반기 ");
            stringBuilder.AppendLine(" ) zz ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = '" + Common.p_strSpotCode + "' and u.사원번호 = zz.사원번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = '" + Common.p_strCompID + "' and c.지점코드 = '" + Common.p_strSpotCode + "' and c.거래처코드 = zz.거래처코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            if (bDataYes)
            {
                stringBuilder.AppendLine("     and zz.거래처코드 in (select distinct 거래처코드 from T_매입 ");
                stringBuilder.AppendLine(" \t                        where 사업자번호 = '" + Common.p_strCompID + "' ");
                stringBuilder.AppendLine("                                 and 지점코드 = '" + Common.p_strSpotCode + "' ");
                stringBuilder.AppendLine(" \t                            and substring(매입일자, 1, 4) = '" + sYYYY + "' ) ");
            }
            if (sSumGB == "0")
                stringBuilder.AppendLine(" group by zz.사원번호, zz.분기정렬 ");
            else
                stringBuilder.AppendLine(" group by zz.사원번호,  zz.거래처코드, zz.분기정렬 ");
            return stringBuilder.ToString();
        }

        private string get_거래처별년간매입(
          string sYYYY,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            for (int index = 1; index <= 6; ++index)
            {
                stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.매입일자, 6, 2) <> '" + index.ToString("00") + "' then 0 else  ");
                stringBuilder.AppendLine(" \t\t\t            (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
                stringBuilder.AppendLine(" \t\t\t\t        (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine(" \t\t\t\t        else  ");
                stringBuilder.AppendLine(" \t\t\t\t\t        (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine(" \t\t\t\t\t        else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine(" \t\t\t\t        end)  ");
                stringBuilder.AppendLine(" \t\t\t\t    end) as 매입" + index.ToString("00") + " ");
            }
            stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.매입일자, 6, 2) > '06' then 0 else  ");
            stringBuilder.AppendLine(" \t\t\t            (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t        (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t        else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t        end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end) as 매입분기계 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( ");
            stringBuilder.AppendLine(" \t\t\t            (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t        (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t        else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t        end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 매입년계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매입1 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and substring(a.매입일자, 1, 4) = '" + sYYYY + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , 2 as 분기정렬 ");
            for (int index = 7; index <= 12; ++index)
            {
                stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.매입일자, 6, 2) <> '" + index.ToString("00") + "' then 0 else  ");
                stringBuilder.AppendLine(" \t\t\t            (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
                stringBuilder.AppendLine(" \t\t\t\t        (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine(" \t\t\t\t        else  ");
                stringBuilder.AppendLine(" \t\t\t\t\t        (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine(" \t\t\t\t\t        else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine(" \t\t\t\t        end)  ");
                stringBuilder.AppendLine(" \t\t\t\t    end) as 매입" + index.ToString("00") + " ");
            }
            stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.매입일자, 6, 2) < '07' then 0 else  ");
            stringBuilder.AppendLine(" \t\t\t            (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t        (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t        else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t        end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end) as 매입분기계 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( ");
            stringBuilder.AppendLine(" \t\t\t            (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t        (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t        else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t        else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t        end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 매입년계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매입2 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and substring(a.매입일자, 1, 4) = '" + sYYYY + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , 1 as 분기정렬 ");
            for (int index = 1; index <= 6; ++index)
                stringBuilder.AppendLine(" \t    , isnull(k.매입" + index.ToString("00") + ", 0) as 매입" + index.ToString("00") + " ");
            stringBuilder.AppendLine(" \t    , isnull(k.매입분기계, 0) as 매입분기계 ");
            stringBuilder.AppendLine(" \t    , isnull(k.매입년계, 0) as 매입년계 ");
            stringBuilder.AppendLine("     into #Tmp상반기 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp매입1 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            if (sArea != "")
                stringBuilder.AppendLine("         and a.지역코드 = '" + sArea + "' ");
            stringBuilder.AppendLine(" \t    and a.거래처구분 in ('2', '3') ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , 2 as 분기정렬 ");
            for (int index = 7; index <= 12; ++index)
                stringBuilder.AppendLine(" \t    , isnull(k.매입" + index.ToString("00") + ", 0) as 매입" + index.ToString("00") + " ");
            stringBuilder.AppendLine(" \t    , isnull(k.매입분기계, 0) as 매입분기계 ");
            stringBuilder.AppendLine(" \t    , isnull(k.매입년계, 0) as 매입년계 ");
            stringBuilder.AppendLine("     into #Tmp하반기 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp매입2 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            if (sArea != "")
                stringBuilder.AppendLine("         and a.지역코드 = '" + sArea + "' ");
            stringBuilder.AppendLine(" \t    and a.거래처구분 in ('2', '3') ");
            return stringBuilder.ToString();
        }

        public DataTable fn_거래처별_년간수금현황(
          string sYYYY,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서");
            stringBuilder.AppendLine("     , z.사원번호");
            stringBuilder.AppendLine("     , z.담당사원명");
            stringBuilder.AppendLine("     , z.거래처코드");
            stringBuilder.AppendLine("     , z.거래처명");
            stringBuilder.AppendLine("     , z.분기정렬 ");
            for (int index = 1; index <= 6; ++index)
                stringBuilder.AppendLine("     , z.월" + index.ToString("00") + " ");
            stringBuilder.AppendLine("     , z.분기계 ");
            stringBuilder.AppendLine("     , z.년계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.getSum_거래처별년간수금(sYYYY, sSumGB, sCust, sDept, sMan, sType, sArea, bDataYes));
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원명");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , z.분기정렬 ");
            for (int index = 1; index <= 6; ++index)
                stringBuilder.AppendLine("     , sum(z.월" + index.ToString("00") + ") as 월" + index.ToString("00") + " ");
            stringBuilder.AppendLine("     , sum(z.분기계) as 수금분기계 ");
            stringBuilder.AppendLine("     , sum(z.년계) as 수금년계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.getSum_거래처별년간수금(sYYYY, sSumGB, sCust, sDept, sMan, sType, sArea, bDataYes));
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" group by z.분기정렬 ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine(" order by x.정렬순서 asc, x.사원번호 asc, x.거래처코드 asc, x.분기정렬 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string getSum_거래처별년간수금(
          string sYYYY,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     zz.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            if (sSumGB == "0")
            {
                stringBuilder.AppendLine("     , '' as 거래처코드");
                stringBuilder.AppendLine("     , '' as 거래처명");
            }
            else
            {
                stringBuilder.AppendLine("     , zz.거래처코드");
                stringBuilder.AppendLine("     , max(c.거래처명) as 거래처명");
            }
            stringBuilder.AppendLine("     , zz.분기정렬 ");
            for (int index = 1; index <= 6; ++index)
                stringBuilder.AppendLine("     , sum(zz.수금" + index.ToString("00") + ") as 월" + index.ToString("00") + " ");
            stringBuilder.AppendLine("     , sum(zz.수금분기계) as 분기계 ");
            stringBuilder.AppendLine("     , sum(zz.수금년계) as 년계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.get_거래처별년간수금(sYYYY, sSumGB, sCust, sDept, sMan, sType, sArea, bDataYes));
            stringBuilder.AppendLine(" ) zz ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = '" + Common.p_strSpotCode + "' and u.사원번호 = zz.사원번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = '" + Common.p_strCompID + "' and c.지점코드 = '" + Common.p_strSpotCode + "' and c.거래처코드 = zz.거래처코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            if (bDataYes)
            {
                stringBuilder.AppendLine("     and zz.거래처코드 in (select distinct 거래처코드 from T_수금 ");
                stringBuilder.AppendLine(" \t                        where 사업자번호 = '" + Common.p_strCompID + "' ");
                stringBuilder.AppendLine("                                 and 지점코드 = '" + Common.p_strSpotCode + "' ");
                stringBuilder.AppendLine(" \t                            and substring(수금일자, 1, 4) = '" + sYYYY + "' ) ");
            }
            if (sSumGB == "0")
                stringBuilder.AppendLine(" group by zz.사원번호, zz.분기정렬 ");
            else
                stringBuilder.AppendLine(" group by zz.사원번호,  zz.거래처코드, zz.분기정렬 ");
            return stringBuilder.ToString();
        }

        private string get_거래처별년간수금(
          string sYYYY,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , 1 as 분기정렬 ");
            int num;
            for (num = 1; num <= 6; ++num)
                stringBuilder.AppendLine(" \t    , isnull(k.수금" + num.ToString("00") + ", 0) as 수금" + num.ToString("00") + " ");
            stringBuilder.AppendLine(" \t    , isnull(k.수금분기계, 0) as 수금분기계 ");
            stringBuilder.AppendLine(" \t    , isnull(k.수금년계, 0) as 수금년계 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine(" \t    left outer join ( ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            for (num = 1; num <= 6; ++num)
            {
                stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.수금일자, 6, 2) <> '" + num.ToString("00") + "' then 0 else  ");
                stringBuilder.AppendLine(" \t\t\t            a.수금액 ");
                stringBuilder.AppendLine(" \t\t\t\t    end) as 수금" + num.ToString("00") + " ");
            }
            stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.수금일자, 6, 2) > '06' then 0 else  ");
            stringBuilder.AppendLine(" \t\t\t            a.수금액 ");
            stringBuilder.AppendLine(" \t\t\t\t    end) as 수금분기계 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( ");
            stringBuilder.AppendLine(" \t\t\t            a.수금액 ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 수금년계 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and substring(a.수금일자, 1, 4) = '" + sYYYY + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    ) k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine(" \t    and a.거래처구분 in ('1', '3') ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , 2 as 분기정렬 ");
            for (num = 7; num <= 12; ++num)
                stringBuilder.AppendLine(" \t    , isnull(k.수금" + num.ToString("00") + ", 0) as 수금" + num.ToString("00") + " ");
            stringBuilder.AppendLine(" \t    , isnull(k.수금분기계, 0) as 수금분기계 ");
            stringBuilder.AppendLine(" \t    , isnull(k.수금년계, 0) as 수금년계 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine(" \t    left outer join ( ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , 2 as 분기정렬 ");
            for (num = 7; num <= 12; ++num)
            {
                stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.수금일자, 6, 2) <> '" + num.ToString("00") + "' then 0 else  ");
                stringBuilder.AppendLine(" \t\t\t            a.수금액 ");
                stringBuilder.AppendLine(" \t\t\t\t    end) as 수금" + num.ToString("00") + " ");
            }
            stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.수금일자, 6, 2) < '07' then 0 else  ");
            stringBuilder.AppendLine(" \t\t\t            a.수금액 ");
            stringBuilder.AppendLine(" \t\t\t\t    end) as 수금분기계 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( ");
            stringBuilder.AppendLine(" \t\t\t            a.수금액 ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 수금년계 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and substring(a.수금일자, 1, 4) = '" + sYYYY + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    ) k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine(" \t    and a.거래처구분 in ('1', '3') ");
            return stringBuilder.ToString();
        }

        public DataTable fn_거래처별_년간지급현황(
          string sYYYY,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서");
            stringBuilder.AppendLine("     , z.사원번호");
            stringBuilder.AppendLine("     , z.담당사원명");
            stringBuilder.AppendLine("     , z.거래처코드");
            stringBuilder.AppendLine("     , z.거래처명");
            stringBuilder.AppendLine("     , z.분기정렬 ");
            for (int index = 1; index <= 6; ++index)
                stringBuilder.AppendLine("     , z.월" + index.ToString("00") + " ");
            stringBuilder.AppendLine("     , z.분기계 ");
            stringBuilder.AppendLine("     , z.년계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.getSum_거래처별년간지급(sYYYY, sSumGB, sCust, sDept, sMan, sType, sArea, bDataYes));
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원명");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , z.분기정렬 ");
            for (int index = 1; index <= 6; ++index)
                stringBuilder.AppendLine("     , sum(z.월" + index.ToString("00") + ") as 월" + index.ToString("00") + " ");
            stringBuilder.AppendLine("     , sum(z.분기계) as 분기계 ");
            stringBuilder.AppendLine("     , sum(z.년계) as 년계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.getSum_거래처별년간지급(sYYYY, sSumGB, sCust, sDept, sMan, sType, sArea, bDataYes));
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" group by z.분기정렬 ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine(" order by x.정렬순서 asc, x.사원번호 asc, x.거래처코드 asc, x.분기정렬 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string getSum_거래처별년간지급(
          string sYYYY,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     zz.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            if (sSumGB == "0")
            {
                stringBuilder.AppendLine("     , '' as 거래처코드");
                stringBuilder.AppendLine("     , '' as 거래처명");
            }
            else
            {
                stringBuilder.AppendLine("     , zz.거래처코드");
                stringBuilder.AppendLine("     , max(c.거래처명) as 거래처명");
            }
            stringBuilder.AppendLine("     , zz.분기정렬 ");
            for (int index = 1; index <= 6; ++index)
                stringBuilder.AppendLine("     , sum(zz.지급" + index.ToString("00") + ") as 월" + index.ToString("00") + " ");
            stringBuilder.AppendLine("     , sum(zz.지급분기계) as 분기계 ");
            stringBuilder.AppendLine("     , sum(zz.지급년계) as 년계 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.get_거래처별년간지급(sYYYY, sSumGB, sCust, sDept, sMan, sType, sArea, bDataYes));
            stringBuilder.AppendLine(" ) zz ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = '" + Common.p_strSpotCode + "' and u.사원번호 = zz.사원번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = '" + Common.p_strCompID + "' and c.지점코드 = '" + Common.p_strSpotCode + "' and c.거래처코드 = zz.거래처코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            if (bDataYes)
            {
                stringBuilder.AppendLine("     and zz.거래처코드 in (select distinct 거래처코드 from T_지급 ");
                stringBuilder.AppendLine(" \t                        where 사업자번호 = '" + Common.p_strCompID + "' ");
                stringBuilder.AppendLine("                                 and 지점코드 = '" + Common.p_strSpotCode + "' ");
                stringBuilder.AppendLine(" \t                            and substring(지급일자, 1, 4) = '" + sYYYY + "' ) ");
            }
            if (sSumGB == "0")
                stringBuilder.AppendLine(" group by zz.사원번호, zz.분기정렬 ");
            else
                stringBuilder.AppendLine(" group by zz.사원번호,  zz.거래처코드, zz.분기정렬 ");
            return stringBuilder.ToString();
        }

        private string get_거래처별년간지급(
          string sYYYY,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          bool bDataYes)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , 1 as 분기정렬 ");
            int num;
            for (num = 1; num <= 6; ++num)
                stringBuilder.AppendLine(" \t    , isnull(k.지급" + num.ToString("00") + ", 0) as 지급" + num.ToString("00") + " ");
            stringBuilder.AppendLine(" \t    , isnull(k.지급분기계, 0) as 지급분기계 ");
            stringBuilder.AppendLine(" \t    , isnull(k.지급년계, 0) as 지급년계 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine(" \t    left outer join ( ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            for (num = 1; num <= 6; ++num)
            {
                stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.지급일자, 6, 2) <> '" + num.ToString("00") + "' then 0 else  ");
                stringBuilder.AppendLine(" \t\t\t            a.지급액 ");
                stringBuilder.AppendLine(" \t\t\t\t    end) as 지급" + num.ToString("00") + " ");
            }
            stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.지급일자, 6, 2) > '06' then 0 else  ");
            stringBuilder.AppendLine(" \t\t\t            a.지급액 ");
            stringBuilder.AppendLine(" \t\t\t\t    end) as 지급분기계 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( ");
            stringBuilder.AppendLine(" \t\t\t            a.지급액 ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 지급년계 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and substring(a.지급일자, 1, 4) = '" + sYYYY + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    ) k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine(" \t    and a.거래처구분 in ('2', '3') ");
            stringBuilder.AppendLine("     union all ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , 2 as 분기정렬 ");
            for (num = 7; num <= 12; ++num)
                stringBuilder.AppendLine(" \t    , isnull(k.지급" + num.ToString("00") + ", 0) as 지급" + num.ToString("00") + " ");
            stringBuilder.AppendLine(" \t    , isnull(k.지급분기계, 0) as 지급분기계 ");
            stringBuilder.AppendLine(" \t    , isnull(k.지급년계, 0) as 지급년계 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine(" \t    left outer join ( ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , 2 as 분기정렬 ");
            for (num = 7; num <= 12; ++num)
            {
                stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.지급일자, 6, 2) <> '" + num.ToString("00") + "' then 0 else  ");
                stringBuilder.AppendLine(" \t\t\t            a.지급액 ");
                stringBuilder.AppendLine(" \t\t\t\t    end) as 지급" + num.ToString("00") + " ");
            }
            stringBuilder.AppendLine(" \t\t\t    , sum( case when substring(a.지급일자, 6, 2) < '07' then 0 else  ");
            stringBuilder.AppendLine(" \t\t\t            a.지급액 ");
            stringBuilder.AppendLine(" \t\t\t\t    end) as 지급분기계 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( ");
            stringBuilder.AppendLine(" \t\t\t            a.지급액 ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 지급년계 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and substring(a.지급일자, 1, 4) = '" + sYYYY + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    ) k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine(" \t    and a.거래처구분 in ('2', '3') ");
            return stringBuilder.ToString();
        }

        public DataTable fn_거래처별_미수분석현황(
          string sDay1,
          bool bNotZero,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.getSum_거래처별미수분석(sDay1, bNotZero, sCust, sDept, sMan, sType, sArea));
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine("     , case when isnull(ff.개인사업자번호, '') = '' then '' ");
            stringBuilder.AppendLine("         else substring(ff.개인사업자번호, 1, 3) + '-' + substring(ff.개인사업자번호, 4, 2) + '-' + substring(ff.개인사업자번호, 6, 5) end as 대체사업자번호2 ");
            stringBuilder.AppendLine("     , ff.상호명 as 대체상호명 ");
            stringBuilder.AppendLine("     , ff.사업전화번호 as 대체전화번호 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서");
            stringBuilder.AppendLine("     , z.사원번호");
            stringBuilder.AppendLine("     , z.담당사원명");
            stringBuilder.AppendLine("     , z.거래처코드");
            stringBuilder.AppendLine("     , z.거래처명");
            stringBuilder.AppendLine("     , z.대표자명");
            stringBuilder.AppendLine("     , z.전화번호");
            stringBuilder.AppendLine("     , z.폰번호");
            stringBuilder.AppendLine("     , z.최종매출일자 ");
            stringBuilder.AppendLine("     , z.최종수금일자 ");
            stringBuilder.AppendLine("     , z.현잔고 ");
            stringBuilder.AppendLine("     , z.기간잔고1 ");
            stringBuilder.AppendLine("     , z.기간잔고2 ");
            stringBuilder.AppendLine("     , z.기간잔고3 ");
            stringBuilder.AppendLine("     , z.기간잔고4 ");
            stringBuilder.AppendLine(" from #Tmp거래처별미수분석집계 z ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     8 as 정렬순서");
            stringBuilder.AppendLine("     , z.사원번호 as 사원번호");
            stringBuilder.AppendLine("     , '--- 소계 ---' as 담당사원명");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , '' as 대표자명");
            stringBuilder.AppendLine("     , '' as 전화번호");
            stringBuilder.AppendLine("     , '' as 폰번호");
            stringBuilder.AppendLine("     , '' as 최종매출일자 ");
            stringBuilder.AppendLine("     , '' as 최종수금일자 ");
            stringBuilder.AppendLine("     , sum(z.현잔고) as 현잔고 ");
            stringBuilder.AppendLine("     , sum(z.기간잔고1) as 기간잔고1 ");
            stringBuilder.AppendLine("     , sum(z.기간잔고2) as 기간잔고2 ");
            stringBuilder.AppendLine("     , sum(z.기간잔고3) as 기간잔고3 ");
            stringBuilder.AppendLine("     , sum(z.기간잔고4) as 기간잔고4 ");
            stringBuilder.AppendLine(" from #Tmp거래처별미수분석집계 z ");
            stringBuilder.AppendLine(" group by z.사원번호 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원명");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , '' as 대표자명");
            stringBuilder.AppendLine("     , '' as 전화번호");
            stringBuilder.AppendLine("     , '' as 폰번호");
            stringBuilder.AppendLine("     , '' as 최종매출일자 ");
            stringBuilder.AppendLine("     , '' as 최종수금일자 ");
            stringBuilder.AppendLine("     , sum(z.현잔고) as 현잔고 ");
            stringBuilder.AppendLine("     , sum(z.기간잔고1) as 기간잔고1 ");
            stringBuilder.AppendLine("     , sum(z.기간잔고2) as 기간잔고2 ");
            stringBuilder.AppendLine("     , sum(z.기간잔고3) as 기간잔고3 ");
            stringBuilder.AppendLine("     , sum(z.기간잔고4) as 기간잔고4 ");
            stringBuilder.AppendLine(" from #Tmp거래처별미수분석집계 z ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine("      left outer join T_사용자사업자 ff on ff.사업자번호 = '" + Common.p_strCompID + "' and ff.지점코드 = '" + Common.p_strSpotCode + "' and ff.사원번호 = x.사원번호 ");
            stringBuilder.AppendLine(" order by x.사원번호 asc, x.정렬순서 asc, x.현잔고 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string getSum_거래처별미수분석(
          string sDay1,
          bool bNotZero,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_거래처별미수분석(sDay1, sCust, sDept, sMan, sType, sArea));
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     zz.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , zz.거래처코드");
            stringBuilder.AppendLine("     , max(c.거래처명) as 거래처명");
            stringBuilder.AppendLine("     , max(c.대표자명) as 대표자명");
            stringBuilder.AppendLine("     , max(c.전화번호) as 전화번호");
            stringBuilder.AppendLine("     , max(c.폰번호) as 폰번호");
            stringBuilder.AppendLine("     , max(zz.최종매출일자) as 최종매출일자 ");
            stringBuilder.AppendLine("     , max(zz.최종수금일자) as 최종수금일자 ");
            stringBuilder.AppendLine("     , sum(zz.현잔고) as 현잔고 ");
            stringBuilder.AppendLine("     , sum(zz.기간잔고1) as 기간잔고1 ");
            stringBuilder.AppendLine("     , sum(zz.기간잔고2) as 기간잔고2 ");
            stringBuilder.AppendLine("     , sum(zz.기간잔고3) as 기간잔고3 ");
            stringBuilder.AppendLine("     , sum(zz.기간잔고4) as 기간잔고4 ");
            stringBuilder.AppendLine(" into #Tmp거래처별미수분석집계 ");
            stringBuilder.AppendLine(" from #Tmp거래처별미수분석 zz ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = '" + Common.p_strSpotCode + "' and u.사원번호 = zz.사원번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = '" + Common.p_strCompID + "' and c.지점코드 = '" + Common.p_strSpotCode + "' and c.거래처코드 = zz.거래처코드 ");
            stringBuilder.AppendLine(" group by zz.사원번호, zz.거래처코드 ");
            if (bNotZero)
                stringBuilder.AppendLine(" having sum(zz.현잔고) <> 0 ");
            return stringBuilder.ToString();
        }

        private string get_거래처별미수분석(
          string sDay1,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea)
        {
            StringBuilder stringBuilder1 = new StringBuilder();
            stringBuilder1.AppendLine(" select a.사업자번호 ");
            stringBuilder1.AppendLine("     , a.거래처코드 ");
            stringBuilder1.AppendLine("     , max(a.최종수금일자) as 최종수금일자 ");
            stringBuilder1.AppendLine("     , sum(a.수금합계) as 수금합계 ");
            stringBuilder1.AppendLine("     , sum(a.지급합계) as 지급합계 ");
            stringBuilder1.AppendLine(" into #Tmp수금지급 ");
            stringBuilder1.AppendLine(" from ( ");
            stringBuilder1.AppendLine("     select a.사업자번호 ");
            stringBuilder1.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder1.AppendLine(" \t\t\t    , max(a.수금일자) as 최종수금일자 ");
            stringBuilder1.AppendLine(" \t\t\t    , sum(a.합계금액) as 수금합계 ");
            stringBuilder1.AppendLine(" \t\t\t    , 0 as 지급합계 ");
            stringBuilder1.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder1.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder1.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder1.AppendLine("                 and a.수금일자 <= '" + sDay1 + "' ");
            if (sCust != "")
                stringBuilder1.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder1.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder1.AppendLine(" ) a ");
            stringBuilder1.AppendLine(" group by a.사업자번호, a.거래처코드 ");
            stringBuilder1.AppendLine(" select a.사업자번호 ");
            stringBuilder1.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder1.AppendLine(" \t\t\t    , max(a.매출일자) as 최종매출일자 ");
            stringBuilder1.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder1.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    else  ");
            stringBuilder1.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder1.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    ) as 매출합계 ");
            stringBuilder1.AppendLine(" \t\t    into #Tmp현매출 ");
            stringBuilder1.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder1.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder1.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder1.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder1.AppendLine("                 and a.매출일자 <= '" + sDay1 + "' ");
            if (sCust != "")
                stringBuilder1.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder1.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder1.AppendLine(" select a.사업자번호 ");
            stringBuilder1.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder1.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder1.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    else  ");
            stringBuilder1.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder1.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    ) as 매출합계 ");
            stringBuilder1.AppendLine(" \t\t    into #Tmp30매출 ");
            stringBuilder1.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder1.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder1.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder1.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            StringBuilder stringBuilder2 = stringBuilder1;
            DateTime dateTime = DateTime.Parse(sDay1).AddDays(-31.0);
            string str1 = "                 and a.매출일자 > '" + dateTime.ToString("yyyy-MM-dd") + "' ";
            stringBuilder2.AppendLine(str1);
            stringBuilder1.AppendLine("                 and a.매출일자 < '" + sDay1 + "' ");
            if (sCust != "")
                stringBuilder1.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder1.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder1.AppendLine(" select a.사업자번호 ");
            stringBuilder1.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder1.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder1.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    else  ");
            stringBuilder1.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder1.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    ) as 매출합계 ");
            stringBuilder1.AppendLine(" \t\t    into #Tmp60매출 ");
            stringBuilder1.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder1.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder1.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder1.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            StringBuilder stringBuilder3 = stringBuilder1;
            dateTime = DateTime.Parse(sDay1);
            dateTime = dateTime.AddDays(-61.0);
            string str2 = "                 and a.매출일자 > '" + dateTime.ToString("yyyy-MM-dd") + "' ";
            stringBuilder3.AppendLine(str2);
            StringBuilder stringBuilder4 = stringBuilder1;
            dateTime = DateTime.Parse(sDay1);
            dateTime = dateTime.AddDays(-31.0);
            string str3 = "                 and a.매출일자 <= '" + dateTime.ToString("yyyy-MM-dd") + "' ";
            stringBuilder4.AppendLine(str3);
            if (sCust != "")
                stringBuilder1.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder1.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder1.AppendLine(" select a.사업자번호 ");
            stringBuilder1.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder1.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder1.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    else  ");
            stringBuilder1.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder1.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    ) as 매출합계 ");
            stringBuilder1.AppendLine(" \t\t    into #Tmp90매출 ");
            stringBuilder1.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder1.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder1.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder1.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            StringBuilder stringBuilder5 = stringBuilder1;
            dateTime = DateTime.Parse(sDay1);
            dateTime = dateTime.AddDays(-91.0);
            string str4 = "                 and a.매출일자 > '" + dateTime.ToString("yyyy-MM-dd") + "' ";
            stringBuilder5.AppendLine(str4);
            StringBuilder stringBuilder6 = stringBuilder1;
            dateTime = DateTime.Parse(sDay1);
            dateTime = dateTime.AddDays(-61.0);
            string str5 = "                 and a.매출일자 <= '" + dateTime.ToString("yyyy-MM-dd") + "' ";
            stringBuilder6.AppendLine(str5);
            if (sCust != "")
                stringBuilder1.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder1.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder1.AppendLine(" select a.사업자번호 ");
            stringBuilder1.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder1.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder1.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    else  ");
            stringBuilder1.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder1.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder1.AppendLine(" \t\t\t\t    ) as 매출합계 ");
            stringBuilder1.AppendLine(" \t\t    into #Tmp99매출 ");
            stringBuilder1.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder1.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder1.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder1.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            StringBuilder stringBuilder7 = stringBuilder1;
            dateTime = DateTime.Parse(sDay1);
            dateTime = dateTime.AddDays(-91.0);
            string str6 = "                 and a.매출일자 <= '" + dateTime.ToString("yyyy-MM-dd") + "' ";
            stringBuilder7.AppendLine(str6);
            if (sCust != "")
                stringBuilder1.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder1.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder1.AppendLine("     select a.사업자번호 ");
            stringBuilder1.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder1.AppendLine(" \t    , a.사원번호 ");
            stringBuilder1.AppendLine(" \t    , isnull(k.최종매출일자, '') as 최종매출일자 ");
            stringBuilder1.AppendLine(" \t    , isnull(m.최종수금일자, '') as 최종수금일자 ");
            stringBuilder1.AppendLine(" \t    , isnull(a.초기잔고, 0) + isnull(k.매출합계, 0) - isnull(m.수금합계, 0)  as 현잔고 ");
            stringBuilder1.AppendLine("     into #Tmp현잔고 ");
            stringBuilder1.AppendLine("     from T_거래처정보 a ");
            stringBuilder1.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder1.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder1.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder1.AppendLine(" \t    left outer join #Tmp현매출 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder1.AppendLine(" \t    left outer join #Tmp수금지급 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder1.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder1.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder1.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder1.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            if (sCust != "")
                stringBuilder1.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder1.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            stringBuilder1.AppendLine(" \t    and a.거래처구분 = '1' ");
            stringBuilder1.AppendLine("     select a.사업자번호 ");
            stringBuilder1.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder1.AppendLine(" \t    , a.사원번호 ");
            stringBuilder1.AppendLine(" \t    , case when isnull(a.초기잔고, 0) + isnull(k.매출합계, 0) - isnull(m.수금합계, 0)  < 0 then 0 ");
            stringBuilder1.AppendLine(" \t        else isnull(a.초기잔고, 0) + isnull(k.매출합계, 0) - isnull(m.수금합계, 0)  end as 기간잔고 ");
            stringBuilder1.AppendLine(" \t    , case when isnull(a.초기잔고, 0) + isnull(k.매출합계, 0) - isnull(m.수금합계, 0)  >= 0 then 0 ");
            stringBuilder1.AppendLine(" \t        else -1 * (isnull(a.초기잔고, 0) + isnull(k.매출합계, 0) - isnull(m.수금합계, 0) ) end as 적용할수금지급액 ");
            stringBuilder1.AppendLine("     into #Tmp99잔고 ");
            stringBuilder1.AppendLine("     from T_거래처정보 a ");
            stringBuilder1.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder1.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder1.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder1.AppendLine(" \t    left outer join #Tmp99매출 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder1.AppendLine(" \t    left outer join #Tmp수금지급 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder1.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder1.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder1.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder1.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            if (sCust != "")
                stringBuilder1.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder1.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            stringBuilder1.AppendLine(" \t    and a.거래처구분 = '1' ");
            stringBuilder1.AppendLine("     select a.사업자번호 ");
            stringBuilder1.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder1.AppendLine(" \t    , a.사원번호 ");
            stringBuilder1.AppendLine(" \t    , case when isnull(k.매출합계, 0) - isnull(m.적용할수금지급액, 0)  < 0 then 0 ");
            stringBuilder1.AppendLine(" \t        else isnull(k.매출합계, 0) - isnull(m.적용할수금지급액, 0)  end as 기간잔고 ");
            stringBuilder1.AppendLine(" \t    , case when isnull(k.매출합계, 0) - isnull(m.적용할수금지급액, 0)  >= 0 then 0 ");
            stringBuilder1.AppendLine(" \t        else -1 * (isnull(k.매출합계, 0) - isnull(m.적용할수금지급액, 0) ) end as 적용할수금지급액 ");
            stringBuilder1.AppendLine("     into #Tmp90잔고 ");
            stringBuilder1.AppendLine("     from T_거래처정보 a ");
            stringBuilder1.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder1.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder1.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder1.AppendLine(" \t    left outer join #Tmp90매출 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder1.AppendLine(" \t    left outer join #Tmp99잔고 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder1.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder1.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder1.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder1.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            if (sCust != "")
                stringBuilder1.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder1.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            stringBuilder1.AppendLine(" \t    and a.거래처구분 = '1' ");
            stringBuilder1.AppendLine("     select a.사업자번호 ");
            stringBuilder1.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder1.AppendLine(" \t    , a.사원번호 ");
            stringBuilder1.AppendLine(" \t    , case when isnull(k.매출합계, 0) - isnull(m.적용할수금지급액, 0)  < 0 then 0 ");
            stringBuilder1.AppendLine(" \t        else isnull(k.매출합계, 0) - isnull(m.적용할수금지급액, 0)  end as 기간잔고 ");
            stringBuilder1.AppendLine(" \t    , case when isnull(k.매출합계, 0) - isnull(m.적용할수금지급액, 0)  >= 0 then 0 ");
            stringBuilder1.AppendLine(" \t        else -1 * (isnull(k.매출합계, 0) - isnull(m.적용할수금지급액, 0) ) end as 적용할수금지급액 ");
            stringBuilder1.AppendLine("     into #Tmp60잔고 ");
            stringBuilder1.AppendLine("     from T_거래처정보 a ");
            stringBuilder1.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder1.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder1.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder1.AppendLine(" \t    left outer join #Tmp60매출 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder1.AppendLine(" \t    left outer join #Tmp90잔고 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder1.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder1.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder1.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder1.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            if (sCust != "")
                stringBuilder1.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder1.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            stringBuilder1.AppendLine(" \t    and a.거래처구분 = '1' ");
            stringBuilder1.AppendLine("     select a.사업자번호 ");
            stringBuilder1.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder1.AppendLine(" \t    , a.사원번호 ");
            stringBuilder1.AppendLine(" \t    , isnull(k.매출합계, 0) - isnull(m.적용할수금지급액, 0)  as 기간잔고 ");
            stringBuilder1.AppendLine("     into #Tmp30잔고 ");
            stringBuilder1.AppendLine("     from T_거래처정보 a ");
            stringBuilder1.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder1.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder1.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder1.AppendLine(" \t    left outer join #Tmp30매출 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder1.AppendLine(" \t    left outer join #Tmp60잔고 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder1.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder1.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder1.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder1.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            if (sCust != "")
                stringBuilder1.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder1.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            stringBuilder1.AppendLine(" \t    and a.거래처구분 = '1' ");
            stringBuilder1.AppendLine(" select a.* ");
            stringBuilder1.AppendLine(" into #Tmp거래처별미수분석 ");
            stringBuilder1.AppendLine(" from ( ");
            stringBuilder1.AppendLine(" select ");
            stringBuilder1.AppendLine("     x.사원번호 ");
            stringBuilder1.AppendLine("     , x.거래처코드 ");
            stringBuilder1.AppendLine("     , max(x.최종매출일자) as 최종매출일자 ");
            stringBuilder1.AppendLine("     , max(x.최종수금일자) as 최종수금일자 ");
            stringBuilder1.AppendLine("     , sum(x.현잔고) as 현잔고 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고1 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고2 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고3 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고4 ");
            stringBuilder1.AppendLine(" from #Tmp현잔고 x ");
            stringBuilder1.AppendLine(" group by x.사원번호, x.거래처코드 ");
            stringBuilder1.AppendLine(" union all ");
            stringBuilder1.AppendLine(" select ");
            stringBuilder1.AppendLine("     x.사원번호 ");
            stringBuilder1.AppendLine("     , x.거래처코드 ");
            stringBuilder1.AppendLine("     , '' as 최종매출일자 ");
            stringBuilder1.AppendLine("     , '' as 최종수금일자 ");
            stringBuilder1.AppendLine("     , 0 as 현잔고 ");
            stringBuilder1.AppendLine("     , sum(x.기간잔고) as 기간잔고1 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고2 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고3 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고4 ");
            stringBuilder1.AppendLine(" from #Tmp30잔고 x ");
            stringBuilder1.AppendLine(" group by x.사원번호, x.거래처코드 ");
            stringBuilder1.AppendLine(" union all ");
            stringBuilder1.AppendLine(" select ");
            stringBuilder1.AppendLine("     x.사원번호 ");
            stringBuilder1.AppendLine("     , x.거래처코드 ");
            stringBuilder1.AppendLine("     , '' as 최종매출일자 ");
            stringBuilder1.AppendLine("     , '' as 최종수금일자 ");
            stringBuilder1.AppendLine("     , 0 as 현잔고 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고1 ");
            stringBuilder1.AppendLine("     , sum(x.기간잔고) as 기간잔고2 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고3 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고4 ");
            stringBuilder1.AppendLine(" from #Tmp60잔고 x ");
            stringBuilder1.AppendLine(" group by x.사원번호, x.거래처코드 ");
            stringBuilder1.AppendLine(" union all ");
            stringBuilder1.AppendLine(" select ");
            stringBuilder1.AppendLine("     x.사원번호 ");
            stringBuilder1.AppendLine("     , x.거래처코드 ");
            stringBuilder1.AppendLine("     , '' as 최종매출일자 ");
            stringBuilder1.AppendLine("     , '' as 최종수금일자 ");
            stringBuilder1.AppendLine("     , 0 as 현잔고 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고1 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고2 ");
            stringBuilder1.AppendLine("     , sum(x.기간잔고) as 기간잔고3 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고4 ");
            stringBuilder1.AppendLine(" from #Tmp90잔고 x ");
            stringBuilder1.AppendLine(" group by x.사원번호, x.거래처코드 ");
            stringBuilder1.AppendLine(" union all ");
            stringBuilder1.AppendLine(" select ");
            stringBuilder1.AppendLine("     x.사원번호 ");
            stringBuilder1.AppendLine("     , x.거래처코드 ");
            stringBuilder1.AppendLine("     , '' as 최종매출일자 ");
            stringBuilder1.AppendLine("     , '' as 최종수금일자 ");
            stringBuilder1.AppendLine("     , 0 as 현잔고 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고1 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고2 ");
            stringBuilder1.AppendLine("     , 0 as 기간잔고3 ");
            stringBuilder1.AppendLine("     , sum(x.기간잔고) as 기간잔고4 ");
            stringBuilder1.AppendLine(" from #Tmp99잔고 x ");
            stringBuilder1.AppendLine(" group by x.사원번호, x.거래처코드 ");
            stringBuilder1.AppendLine(" ) a ");
            return stringBuilder1.ToString();
        }

        public DataTable fn_거래처별_부동현황(
          string sDay1,
          string sDay2,
          bool bNotZero,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서");
            stringBuilder.AppendLine("     , z.사원번호");
            stringBuilder.AppendLine("     , z.담당사원명");
            stringBuilder.AppendLine("     , z.거래처코드");
            stringBuilder.AppendLine("     , z.거래처명");
            stringBuilder.AppendLine("     , z.대표자명");
            stringBuilder.AppendLine("     , z.전화번호");
            stringBuilder.AppendLine("     , z.폰번호");
            stringBuilder.AppendLine("     , z.최종매출일자 ");
            stringBuilder.AppendLine("     , z.최종수금일자 ");
            stringBuilder.AppendLine("     , z.현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.getSum_거래처별부동(sDay1, sDay2, bNotZero, sCust, sDept, sMan, sType, sArea));
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     8 as 정렬순서");
            stringBuilder.AppendLine("     , z.사원번호 as 사원번호");
            stringBuilder.AppendLine("     , '--- 소계 ---' as 담당사원명");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , '' as 대표자명");
            stringBuilder.AppendLine("     , '' as 전화번호");
            stringBuilder.AppendLine("     , '' as 폰번호");
            stringBuilder.AppendLine("     , '' as 최종매출일자 ");
            stringBuilder.AppendLine("     , '' as 최종수금일자 ");
            stringBuilder.AppendLine("     , sum(z.현잔고) as 현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.getSum_거래처별부동(sDay1, sDay2, bNotZero, sCust, sDept, sMan, sType, sArea));
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" group by z.사원번호 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원명");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , '' as 대표자명");
            stringBuilder.AppendLine("     , '' as 전화번호");
            stringBuilder.AppendLine("     , '' as 폰번호");
            stringBuilder.AppendLine("     , '' as 최종매출일자 ");
            stringBuilder.AppendLine("     , '' as 최종수금일자 ");
            stringBuilder.AppendLine("     , sum(z.현잔고) as 현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.getSum_거래처별부동(sDay1, sDay2, bNotZero, sCust, sDept, sMan, sType, sArea));
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine(" order by x.사원번호 asc, x.정렬순서 asc, x.현잔고 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string getSum_거래처별부동(
          string sDay1,
          string sDay2,
          bool bNotZero,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     zz.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            stringBuilder.AppendLine("     , zz.거래처코드");
            stringBuilder.AppendLine("     , max(c.거래처명) as 거래처명");
            stringBuilder.AppendLine("     , max(c.대표자명) as 대표자명");
            stringBuilder.AppendLine("     , max(c.전화번호) as 전화번호");
            stringBuilder.AppendLine("     , max(c.폰번호) as 폰번호");
            stringBuilder.AppendLine("     , max(zz.최종매출일자) as 최종매출일자 ");
            stringBuilder.AppendLine("     , max(zz.최종수금일자) as 최종수금일자 ");
            stringBuilder.AppendLine("     , sum(zz.현잔고) as 현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.get_거래처별부동(sDay1, sDay2, sCust, sDept, sMan, sType, sArea));
            stringBuilder.AppendLine(" ) zz ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = '" + Common.p_strSpotCode + "' and u.사원번호 = zz.사원번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = '" + Common.p_strCompID + "' and c.지점코드 = '" + Common.p_strSpotCode + "' and c.거래처코드 = zz.거래처코드 ");
            stringBuilder.AppendLine(" group by zz.사원번호,  zz.거래처코드 ");
            if (bNotZero)
                stringBuilder.AppendLine(" having sum(zz.현잔고) <> 0 ");
            return stringBuilder.ToString();
        }

        private string get_거래처별부동(
          string sDay1,
          string sDay2,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.사원번호 ");
            stringBuilder.AppendLine("     , x.거래처코드 ");
            stringBuilder.AppendLine("     , max(x.최종매출일자) as 최종매출일자 ");
            stringBuilder.AppendLine("     , max(x.최종수금일자) as 최종수금일자 ");
            stringBuilder.AppendLine("     , sum(x.현잔고) as 현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(k.최종매출일자, '') as 최종매출일자 ");
            stringBuilder.AppendLine(" \t    , isnull(m.최종수금일자, '') as 최종수금일자 ");
            stringBuilder.AppendLine(" \t    , isnull(a.초기잔고, 0) + isnull(k.현매출, 0) - isnull(m.현수금합계, 0) - isnull(h.현매입, 0) + isnull(p.현지급합계, 0) as 현잔고 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine(" \t    left outer join ( ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , max(a.매출일자) as 최종매출일자 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매출 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    ) k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join ( ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매입 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    ) h on h.사업자번호 = a.사업자번호 and h.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join ( ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , max(a.수금일자) as 최종수금일자 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(a.합계금액) as 현수금합계 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    ) m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join ( ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(a.합계금액) as 현지급합계 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    ) p on p.사업자번호 = a.사업자번호 and p.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder.AppendLine(" \t    and a.지역코드 = '" + sArea + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder.AppendLine(" \t    and isnull(a.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine(" \t    and a.거래처구분 in ('1', '3') ");
            stringBuilder.AppendLine(" \t    and isnull(k.최종매출일자, '') < '" + sDay1 + "' ");
            stringBuilder.AppendLine("     ) x ");
            stringBuilder.AppendLine(" group by x.사원번호, x.거래처코드 ");
            return stringBuilder.ToString();
        }

        public DataTable fn_거래처별_미도래현황(
          string sDay1,
          bool bNotZero,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서 ");
            stringBuilder.AppendLine("     , z.사원번호 ");
            stringBuilder.AppendLine("     , z.담당사원명 ");
            stringBuilder.AppendLine("     , z.거래처코드 ");
            stringBuilder.AppendLine("     , z.거래처명 ");
            stringBuilder.AppendLine("     , z.수금일자 ");
            stringBuilder.AppendLine("     , z.전표번호 ");
            stringBuilder.AppendLine("     , z.발행일자 ");
            stringBuilder.AppendLine("     , z.만기일자 ");
            stringBuilder.AppendLine("     , z.어음번호 ");
            stringBuilder.AppendLine("     , z.수금액 ");
            stringBuilder.AppendLine("     , z.현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.getSum_거래처별미도래(sDay1, bNotZero, sCust, sDept, sMan, sType, sArea));
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     8 as 정렬순서");
            stringBuilder.AppendLine("     , z.사원번호 as 사원번호");
            stringBuilder.AppendLine("     , '--- 소계 ---' as 담당사원명");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , '' as 수금일자");
            stringBuilder.AppendLine("     , NULL as 전표번호");
            stringBuilder.AppendLine("     , '' as 발행일자 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , '' as 어음번호 ");
            stringBuilder.AppendLine("     , sum(z.수금액) as 수금액 ");
            stringBuilder.AppendLine("     , sum(z.현잔고) as 현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.getSum_거래처별미도래(sDay1, bNotZero, sCust, sDept, sMan, sType, sArea));
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" group by z.사원번호 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원명");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , '' as 수금일자");
            stringBuilder.AppendLine("     , NULL as 전표번호");
            stringBuilder.AppendLine("     , '' as 발행일자 ");
            stringBuilder.AppendLine("     , '' as 만기일자 ");
            stringBuilder.AppendLine("     , '' as 어음번호 ");
            stringBuilder.AppendLine("     , sum(z.수금액) as 수금액 ");
            stringBuilder.AppendLine("     , sum(z.현잔고) as 현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.getSum_거래처별미도래(sDay1, bNotZero, sCust, sDept, sMan, sType, sArea));
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine(" order by x.사원번호 asc, x.정렬순서 asc, x.수금일자 asc, x.전표번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string getSum_거래처별미도래(
          string sDay1,
          bool bNotZero,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     zz.사원번호 ");
            stringBuilder.AppendLine("     , u.사용자명 as 담당사원명 ");
            stringBuilder.AppendLine("     , zz.거래처코드 ");
            stringBuilder.AppendLine("     , c.거래처명 ");
            stringBuilder.AppendLine("     , zz.수금일자 ");
            stringBuilder.AppendLine("     , zz.전표번호 ");
            stringBuilder.AppendLine("     , zz.발행일자 ");
            stringBuilder.AppendLine("     , zz.만기일자 ");
            stringBuilder.AppendLine("     , zz.어음번호 ");
            stringBuilder.AppendLine("     , zz.수금액 ");
            stringBuilder.AppendLine("     , zz.현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" " + this.get_거래처별미도래(sDay1, sCust, sDept, sMan, sType, sArea));
            stringBuilder.AppendLine(" ) zz ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = '" + Common.p_strCompID + "' and u.지점코드 = '" + Common.p_strSpotCode + "' and u.사원번호 = zz.사원번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = '" + Common.p_strCompID + "' and c.지점코드 = '" + Common.p_strSpotCode + "' and c.거래처코드 = zz.거래처코드 ");
            if (bNotZero)
                stringBuilder.AppendLine(" having sum(zz.현잔고) <> 0 ");
            return stringBuilder.ToString();
        }

        private string get_거래처별미도래(
          string sDay1,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.수금일자 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.발행일자 ");
            stringBuilder.AppendLine("     , a.만기일자 ");
            stringBuilder.AppendLine("     , a.어음번호 ");
            stringBuilder.AppendLine("     , a.수금액 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , d.사원번호    ");
            stringBuilder.AppendLine("     , isnull(d.초기잔고, 0) + isnull(k.현매출, 0) - isnull(m.현수금합계, 0) - isnull(h.현매입, 0) + isnull(p.현지급합계, 0) as 현잔고 ");
            stringBuilder.AppendLine(" from T_수금 a       ");
            stringBuilder.AppendLine("     inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            if (sCust != "")
                stringBuilder.AppendLine("             and d.거래처코드 = '" + sCust + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t        and d.유형코드 = '" + sType + "' ");
            if (sArea != "")
                stringBuilder.AppendLine(" \t        and d.지역코드 = '" + sArea + "' ");
            stringBuilder.AppendLine(" \t        and d.거래처구분 in ('1', '3') ");
            stringBuilder.AppendLine("     inner join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and f.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and f.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine("     left outer join ( ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매출 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 <= '" + sDay1 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    ) k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join ( ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매입 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매입일자 <= '" + sDay1 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    ) h on h.사업자번호 = a.사업자번호 and h.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join ( ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , max(a.수금일자) as 최종수금일자 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(a.합계금액) as 현수금합계 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.수금일자 <= '" + sDay1 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    ) m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join ( ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(a.합계금액) as 현지급합계 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.지급일자 <= '" + sDay1 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t    ) p on p.사업자번호 = a.사업자번호 and p.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.만기일자 > '" + sDay1 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            else
                stringBuilder.AppendLine(" \t    and isnull(d.사용여부, '0') <> '2' ");
            return stringBuilder.ToString();
        }

        public DataTable fn_거래처별_상품_판매현황(
          string sDay1,
          string sDay2,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          string sArea,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서 ");
            stringBuilder.AppendLine("     , max(p.정렬순서) as 상품순서 ");
            stringBuilder.AppendLine("     , z.상품코드");
            stringBuilder.AppendLine("     , max(p.상품명) as 상품명 ");
            stringBuilder.AppendLine("     , max(p.규격) as 규격 ");
            stringBuilder.AppendLine("     , isnull(sum(z.판매수량), 0) as 판매수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.판매금액), 0) as 판매금액 ");
            stringBuilder.AppendLine("     , isnull(sum(z.반품수량), 0) as 반품수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.반품금액), 0) as 반품금액 ");
            stringBuilder.AppendLine("     , isnull(sum(z.실판매수량), 0) as 실판매수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.실판매금액), 0) as 실판매금액 ");
            stringBuilder.AppendLine("     , case when isnull(sum(z.판매금액), 0) = 0 then 0 else isnull(sum(z.반품금액), 0) / isnull(sum(z.판매금액), 0) * 100 end as 반품율 ");
            stringBuilder.AppendLine("     , 0.00 as 점유율 ");
            stringBuilder.AppendLine("     , isnull(sum(z.입고액), 0) as 입고액 ");
            stringBuilder.AppendLine("     , case when isnull(sum(z.실판매금액), 0) = 0 then 0 else round(isnull(sum(z.실판매금액), 0) / isnull(sum(z.실판매수량), 0), 2) end as 평균판매단가 ");
            stringBuilder.AppendLine("     , case when isnull(sum(z.실판매금액), 0) = 0 then 0 else round(isnull(sum(z.입고액), 0) / isnull(sum(z.실판매수량), 0), 2) end as 평균입고단가 ");
            stringBuilder.AppendLine("     , isnull(sum(z.실판매금액), 0) - isnull(sum(z.입고액), 0) as 이익금 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("         " + this.get_거래처별_판매분석_목록(sDay1, sDay2, sCust, sType, sDept, sArea, sMan));
            stringBuilder.AppendLine("     ) z ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = z.사업자번호 and p.지점코드 = '" + Common.p_strSpotCode + "' and p.상품코드 = z.상품코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_상품유형 t on t.사업자번호 = p.사업자번호 and t.지점코드 = '0' and t.코드 = p.상품유형코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_제조사 c on c.사업자번호 = p.사업자번호 and c.지점코드 = '0' and c.코드 = p.제조사코드 ");
            stringBuilder.AppendLine(" group by z.상품코드 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 999999999 as 상품순서");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 상품명");
            stringBuilder.AppendLine("     , '' as 규격");
            stringBuilder.AppendLine("     , isnull(sum(z.판매수량), 0) as 판매수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.판매금액), 0) as 판매금액 ");
            stringBuilder.AppendLine("     , isnull(sum(z.반품수량), 0) as 반품수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.반품금액), 0) as 반품금액 ");
            stringBuilder.AppendLine("     , isnull(sum(z.실판매수량), 0) as 실판매수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.실판매금액), 0) as 실판매금액 ");
            stringBuilder.AppendLine("     , case when isnull(sum(z.판매금액), 0) = 0 then 0 else isnull(sum(z.반품금액), 0) / isnull(sum(z.판매금액), 0) * 100 end as 반품율 ");
            stringBuilder.AppendLine("     , 100 as 점유율 ");
            stringBuilder.AppendLine("     , isnull(sum(z.입고액), 0) as 입고액 ");
            stringBuilder.AppendLine("     , NULL as 평균판매단가 ");
            stringBuilder.AppendLine("     , NULL as 평균입고단가 ");
            stringBuilder.AppendLine("     , isnull(sum(z.실판매금액), 0) - isnull(sum(z.입고액), 0) as 이익금 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("         " + this.get_거래처별_판매분석_목록(sDay1, sDay2, sCust, sType, sDept, sArea, sMan));
            stringBuilder.AppendLine("     ) z ");
            stringBuilder.AppendLine(") x ");
            stringBuilder.AppendLine(" where isnull(x.실판매수량, -9999) <> 0 ");
            stringBuilder.AppendLine(" order by x.상품순서 asc, x.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string get_거래처별_판매분석_목록(
          string sDay1,
          string sDay2,
          string sCust,
          string sType,
          string sDept,
          string sArea,
          string sMan)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , c.사원번호 ");
            stringBuilder.AppendLine("     , b.상품코드 ");
            stringBuilder.AppendLine("     , p.제조사코드 ");
            stringBuilder.AppendLine("     , p.상품유형코드 ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) * isnull(b.박스수량, 0) as 판매수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 판매금액 ");
            }
            else
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) * isnull(b.총수량, 0) as 판매수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 판매금액 ");
            }
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) * isnull(b.박스수량, 0) as 반품수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 반품금액 ");
            }
            else
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) * isnull(b.총수량, 0) as 반품수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 반품금액 ");
            }
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.박스수량, 0) as 실판매수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 실판매금액 ");
            }
            else
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.총수량, 0) as 실판매수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 실판매금액 ");
            }
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) *  ");
                stringBuilder.AppendLine("             (case when b.박스단가 = 0 then 0 else round((b.박스수량 + b.서비스박스) * b.박스입고단가, 0) end) as 입고액  ");
            }
            else
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) *  ");
                stringBuilder.AppendLine("             (case when b.낱개단가 = 0 then 0 else round((b.총수량 + b.서비스총수량) * b.낱개입고단가, 0) end) as 입고액  ");
            }
            stringBuilder.AppendLine(" from T_매출 a ");
            stringBuilder.AppendLine("     inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = c.사업자번호 and u.지점코드 = c.지점코드 and u.사원번호 = c.사원번호 ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \tand c.유형코드 = '" + sType + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
            if (sArea != "")
                stringBuilder.AppendLine("     and c.지역코드 = '" + sArea + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            return stringBuilder.ToString();
        }

        public DataTable fn_상품별_매출현황(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sReturns,
          bool bOrder,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서 ");
            stringBuilder.AppendLine("     , z.제조사코드");
            stringBuilder.AppendLine("     , c.명칭 as 제조사명");
            stringBuilder.AppendLine("     , p.정렬순서 as 상품순서");
            stringBuilder.AppendLine("     , z.상품코드");
            stringBuilder.AppendLine("     , p.상품명");
            stringBuilder.AppendLine("     , p.규격");
            stringBuilder.AppendLine("     , t.명칭 as 상품유형명");
            stringBuilder.AppendLine("     , z.박스수량 ");
            stringBuilder.AppendLine("     , z.중간수량 ");
            stringBuilder.AppendLine("     , z.낱개수량 ");
            stringBuilder.AppendLine("     , z.총수량 ");
            stringBuilder.AppendLine("     , z.서비스 ");
            stringBuilder.AppendLine("     , z.평균단가 ");
            stringBuilder.AppendLine("     , z.금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.제조사코드 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", "", ""));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.제조사코드, zz.상품코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = z.사업자번호 and p.지점코드 = '" + Common.p_strSpotCode + "' and p.상품코드 = z.상품코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_상품유형 t on t.사업자번호 = p.사업자번호 and t.지점코드 = '0' and t.코드 = p.상품유형코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_제조사 c on c.사업자번호 = p.사업자번호 and c.지점코드 = '0' and c.코드 = p.제조사코드 ");
            if (!bOrder)
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select ");
                stringBuilder.AppendLine("     8 as 정렬순서");
                stringBuilder.AppendLine("     , z.제조사코드 ");
                stringBuilder.AppendLine("     , '--- 소계 ---' as 제조사명");
                stringBuilder.AppendLine("     , 999999999 as 상품순서");
                stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
                stringBuilder.AppendLine("     , '' as 상품명");
                stringBuilder.AppendLine("     , '' as 규격");
                stringBuilder.AppendLine("     , '' as 상품유형명");
                stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
                stringBuilder.AppendLine("     , 0 as 평균단가 ");
                stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
                stringBuilder.AppendLine(" from ( ");
                stringBuilder.AppendLine("     select ");
                stringBuilder.AppendLine(" \t    zz.사업자번호 ");
                stringBuilder.AppendLine(" \t    , zz.제조사코드 ");
                stringBuilder.AppendLine(" \t    , zz.상품코드 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
                if (Common.p_strBox == "2")
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
                else
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
                stringBuilder.AppendLine("     from ( ");
                stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", "", ""));
                stringBuilder.AppendLine("         ) zz ");
                stringBuilder.AppendLine("     group by zz.사업자번호, zz.제조사코드, zz.상품코드 ");
                stringBuilder.AppendLine(" ) z ");
                stringBuilder.AppendLine(" group by z.제조사코드 ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 'ZZZZ' as 제조사코드");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 제조사명");
            stringBuilder.AppendLine("     , 999999999 as 상품순서");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
            stringBuilder.AppendLine("     , '' as 상품명");
            stringBuilder.AppendLine("     , '' as 규격");
            stringBuilder.AppendLine("     , '' as 상품유형명");
            stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
            stringBuilder.AppendLine("     , 0 as 평균단가 ");
            stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.제조사코드 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", "", ""));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.제조사코드, zz.상품코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(") x ");
            if (bOrder)
                stringBuilder.AppendLine(" order by x.정렬순서 asc, x.제조사코드 asc, x.금액 desc ");
            else
                stringBuilder.AppendLine(" order by x.제조사코드 asc, x.정렬순서 asc, x.상품순서 asc, x.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string get_매출항목_목록(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sReturns,
          string sProd,
          string sCust,
          string sMan)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , c.사원번호 ");
            stringBuilder.AppendLine("     , b.상품코드 ");
            stringBuilder.AppendLine("     , p.제조사코드 ");
            stringBuilder.AppendLine("     , p.상품유형코드 ");
            if (sReturns == "0")
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.박스수량, 0) as 박스수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.중간수량, 0) as 중간수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.낱개수량, 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.총수량, 0) as 총수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.서비스박스, 0) as 서비스박스 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.서비스낱개, 0) as 서비스낱개 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.서비스총수량, 0) as 서비스총수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 금액 ");
            }
            if (sReturns == "1")
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) * isnull(b.박스수량, 0) as 박스수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) * isnull(b.중간수량, 0) as 중간수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) * isnull(b.낱개수량, 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) * isnull(b.총수량, 0) as 총수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) * isnull(b.서비스박스, 0) as 서비스박스 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) * isnull(b.서비스낱개, 0) as 서비스낱개 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) * isnull(b.서비스총수량, 0) as 서비스총수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 금액 ");
            }
            if (sReturns == "2")
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) * isnull(b.박스수량, 0) as 박스수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) * isnull(b.중간수량, 0) as 중간수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) * isnull(b.낱개수량, 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) * isnull(b.총수량, 0) as 총수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) * isnull(b.서비스박스, 0) as 서비스박스 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) * isnull(b.서비스낱개, 0) as 서비스낱개 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) * isnull(b.서비스총수량, 0) as 서비스총수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 금액 ");
            }
            stringBuilder.AppendLine(" from T_매출 a ");
            stringBuilder.AppendLine("     inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            if (sFact != "")
                stringBuilder.AppendLine("     and p.제조사코드 = '" + sFact + "' ");
            if (sType != "")
                stringBuilder.AppendLine("     and p.상품유형코드 = '" + sType + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and b.상품코드 = '" + sProd + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            return stringBuilder.ToString();
        }

        public DataTable fn_상품별_매입현황(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sReturns,
          bool bOrder,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서 ");
            stringBuilder.AppendLine("     , z.제조사코드");
            stringBuilder.AppendLine("     , c.명칭 as 제조사명");
            stringBuilder.AppendLine("     , p.정렬순서 as 상품순서");
            stringBuilder.AppendLine("     , z.상품코드");
            stringBuilder.AppendLine("     , p.상품명");
            stringBuilder.AppendLine("     , p.규격");
            stringBuilder.AppendLine("     , t.명칭 as 상품유형명");
            stringBuilder.AppendLine("     , z.박스수량 ");
            stringBuilder.AppendLine("     , z.중간수량 ");
            stringBuilder.AppendLine("     , z.낱개수량 ");
            stringBuilder.AppendLine("     , z.총수량 ");
            stringBuilder.AppendLine("     , z.서비스 ");
            stringBuilder.AppendLine("     , z.평균단가 ");
            stringBuilder.AppendLine("     , z.금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.제조사코드 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매입항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", "", ""));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.제조사코드, zz.상품코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = z.사업자번호 and p.지점코드 = '" + Common.p_strSpotCode + "' and p.상품코드 = z.상품코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_상품유형 t on t.사업자번호 = p.사업자번호 and t.지점코드 = '0' and t.코드 = p.상품유형코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_제조사 c on c.사업자번호 = p.사업자번호 and c.지점코드 = '0' and c.코드 = p.제조사코드 ");
            if (!bOrder)
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select ");
                stringBuilder.AppendLine("     8 as 정렬순서");
                stringBuilder.AppendLine("     , z.제조사코드 ");
                stringBuilder.AppendLine("     , '--- 소계 ---' as 제조사명");
                stringBuilder.AppendLine("     , 999999999 as 상품순서");
                stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
                stringBuilder.AppendLine("     , '' as 상품명");
                stringBuilder.AppendLine("     , '' as 규격");
                stringBuilder.AppendLine("     , '' as 상품유형명");
                stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
                stringBuilder.AppendLine("     , 0 as 평균단가 ");
                stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
                stringBuilder.AppendLine(" from ( ");
                stringBuilder.AppendLine("     select ");
                stringBuilder.AppendLine(" \t    zz.사업자번호 ");
                stringBuilder.AppendLine(" \t    , zz.제조사코드 ");
                stringBuilder.AppendLine(" \t    , zz.상품코드 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
                if (Common.p_strBox == "2")
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
                else
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
                stringBuilder.AppendLine("     from ( ");
                stringBuilder.AppendLine("         " + this.get_매입항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", "", ""));
                stringBuilder.AppendLine("         ) zz ");
                stringBuilder.AppendLine("     group by zz.사업자번호, zz.제조사코드, zz.상품코드 ");
                stringBuilder.AppendLine(" ) z ");
                stringBuilder.AppendLine(" group by z.제조사코드 ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 'ZZZZ' as 제조사코드");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 제조사명");
            stringBuilder.AppendLine("     , 999999999 as 상품순서");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
            stringBuilder.AppendLine("     , '' as 상품명");
            stringBuilder.AppendLine("     , '' as 규격");
            stringBuilder.AppendLine("     , '' as 상품유형명");
            stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
            stringBuilder.AppendLine("     , 0 as 평균단가 ");
            stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.제조사코드 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매입항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", "", ""));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.제조사코드, zz.상품코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" ) x ");
            if (bOrder)
                stringBuilder.AppendLine(" order by x.정렬순서 asc, x.제조사코드 asc, x.금액 desc ");
            else
                stringBuilder.AppendLine(" order by x.제조사코드 asc, x.정렬순서 asc, x.상품순서 asc, x.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string get_매입항목_목록(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sReturns,
          string sProd,
          string sCust,
          string sMan)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , c.사원번호 ");
            stringBuilder.AppendLine("     , b.상품코드 ");
            stringBuilder.AppendLine("     , p.제조사코드 ");
            stringBuilder.AppendLine("     , p.상품유형코드 ");
            if (sReturns == "0")
            {
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * isnull(b.박스수량, 0) as 박스수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * isnull(b.중간수량, 0) as 중간수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * isnull(b.낱개수량, 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * isnull(b.총수량, 0) as 총수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * isnull(b.서비스박스, 0) as 서비스박스 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * isnull(b.서비스낱개, 0) as 서비스낱개 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) * isnull(b.서비스총수량, 0) as 서비스총수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 금액 ");
            }
            if (sReturns == "1")
            {
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else 0 end) * isnull(b.박스수량, 0) as 박스수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else 0 end) * isnull(b.중간수량, 0) as 중간수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else 0 end) * isnull(b.낱개수량, 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else 0 end) * isnull(b.총수량, 0) as 총수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else 0 end) * isnull(b.서비스박스, 0) as 서비스박스 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else 0 end) * isnull(b.서비스낱개, 0) as 서비스낱개 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else 0 end) * isnull(b.서비스총수량, 0) as 서비스총수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 1 else 0 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 금액 ");
            }
            if (sReturns == "2")
            {
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 0 else 1 end) * isnull(b.박스수량, 0) as 박스수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 0 else 1 end) * isnull(b.중간수량, 0) as 중간수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 0 else 1 end) * isnull(b.낱개수량, 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 0 else 1 end) * isnull(b.총수량, 0) as 총수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 0 else 1 end) * isnull(b.서비스박스, 0) as 서비스박스 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 0 else 1 end) * isnull(b.서비스낱개, 0) as 서비스낱개 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 0 else 1 end) * isnull(b.서비스총수량, 0) as 서비스총수량 ");
                stringBuilder.AppendLine("     , (case when b.매입구분 in ('1', '2') then 0 else 1 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 금액 ");
            }
            stringBuilder.AppendLine(" from T_매입 a ");
            stringBuilder.AppendLine("     inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매입일자 <= '" + sDay2 + "' ");
            if (sFact != "")
                stringBuilder.AppendLine("     and p.제조사코드 = '" + sFact + "' ");
            if (sType != "")
                stringBuilder.AppendLine("     and p.상품유형코드 = '" + sType + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and b.상품코드 = '" + sProd + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            return stringBuilder.ToString();
        }

        public DataTable fn_상품별_매출처현황(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sReturns,
          string sProd,
          string sMan,
          bool bOrder,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서 ");
            stringBuilder.AppendLine("     , p.정렬순서 as 상품순서");
            stringBuilder.AppendLine("     , z.상품코드");
            stringBuilder.AppendLine("     , p.상품명");
            stringBuilder.AppendLine("     , p.규격");
            stringBuilder.AppendLine("     , t.명칭 as 상품유형명");
            stringBuilder.AppendLine("     , c.명칭 as 제조사명");
            stringBuilder.AppendLine("     , b.사용자명 as 담당사원");
            stringBuilder.AppendLine("     , z.거래처코드");
            stringBuilder.AppendLine("     , a.거래처명");
            stringBuilder.AppendLine("     , z.박스수량 ");
            stringBuilder.AppendLine("     , z.중간수량 ");
            stringBuilder.AppendLine("     , z.낱개수량 ");
            stringBuilder.AppendLine("     , z.총수량 ");
            stringBuilder.AppendLine("     , z.서비스 ");
            stringBuilder.AppendLine("     , z.평균단가 ");
            stringBuilder.AppendLine("     , z.금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, sProd, "", sMan));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.상품코드, zz.거래처코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine("     inner join T_거래처정보 a on a.사업자번호 = z.사업자번호 and a.지점코드 = '" + Common.p_strSpotCode + "' and a.거래처코드 = z.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = '" + Common.p_strSpotCode + "' and b.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = z.사업자번호 and p.지점코드 = '" + Common.p_strSpotCode + "' and p.상품코드 = z.상품코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_상품유형 t on t.사업자번호 = p.사업자번호 and t.지점코드 = '0' and t.코드 = p.상품유형코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_제조사 c on c.사업자번호 = p.사업자번호 and c.지점코드 = '0' and c.코드 = p.제조사코드 ");
            if (!bOrder)
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select ");
                stringBuilder.AppendLine("     8 as 정렬순서");
                stringBuilder.AppendLine("     , p.정렬순서 as 상품순서");
                stringBuilder.AppendLine("     , z.상품코드");
                stringBuilder.AppendLine("     , '--- 소계 ---' as 상품명");
                stringBuilder.AppendLine("     , '' as 규격");
                stringBuilder.AppendLine("     , '' as 상품유형명");
                stringBuilder.AppendLine("     , '' as 제조사명");
                stringBuilder.AppendLine("     , '' as 담당사원");
                stringBuilder.AppendLine("     , 'ZZZZ' as 거래처코드");
                stringBuilder.AppendLine("     , '건수 : ' + convert(nvarchar(10), count(*)) + '' as 거래처명");
                stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
                stringBuilder.AppendLine("     , 0 as 평균단가 ");
                stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
                stringBuilder.AppendLine(" from ( ");
                stringBuilder.AppendLine("     select ");
                stringBuilder.AppendLine(" \t    zz.사업자번호 ");
                stringBuilder.AppendLine(" \t    , zz.상품코드 ");
                stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
                if (Common.p_strBox == "2")
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
                else
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
                stringBuilder.AppendLine("     from ( ");
                stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, sProd, "", sMan));
                stringBuilder.AppendLine("         ) zz ");
                stringBuilder.AppendLine("     group by zz.사업자번호, zz.상품코드, zz.거래처코드 ");
                stringBuilder.AppendLine(" ) z ");
                stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = z.사업자번호 and p.상품코드 = z.상품코드 ");
                stringBuilder.AppendLine(" group by p.정렬순서, z.상품코드 ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 999999999 as 상품순서");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 상품명");
            stringBuilder.AppendLine("     , '' as 규격");
            stringBuilder.AppendLine("     , '' as 상품유형명");
            stringBuilder.AppendLine("     , '' as 제조사명");
            stringBuilder.AppendLine("     , '' as 담당사원");
            stringBuilder.AppendLine("     , 'ZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '총수 : ' + convert(nvarchar(10), count(*)) + '' as 거래처명");
            stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
            stringBuilder.AppendLine("     , 0 as 평균단가 ");
            stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, sProd, "", sMan));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.상품코드, zz.거래처코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(" ) x ");
            if (bOrder)
                stringBuilder.AppendLine(" order by x.정렬순서 asc, x.금액 desc ");
            else
                stringBuilder.AppendLine(" order by x.상품순서, x.상품코드 asc, x.정렬순서 asc, x.거래처코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품별_매입처현황(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sReturns,
          string sProd,
          string sMan,
          bool bOrder,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서 ");
            stringBuilder.AppendLine("     , p.정렬순서 as 상품순서");
            stringBuilder.AppendLine("     , z.상품코드");
            stringBuilder.AppendLine("     , p.상품명");
            stringBuilder.AppendLine("     , p.규격");
            stringBuilder.AppendLine("     , t.명칭 as 상품유형명");
            stringBuilder.AppendLine("     , c.명칭 as 제조사명");
            stringBuilder.AppendLine("     , b.사용자명 as 담당사원");
            stringBuilder.AppendLine("     , z.거래처코드");
            stringBuilder.AppendLine("     , a.거래처명");
            stringBuilder.AppendLine("     , z.박스수량 ");
            stringBuilder.AppendLine("     , z.중간수량 ");
            stringBuilder.AppendLine("     , z.낱개수량 ");
            stringBuilder.AppendLine("     , z.총수량 ");
            stringBuilder.AppendLine("     , z.서비스 ");
            stringBuilder.AppendLine("     , z.평균단가 ");
            stringBuilder.AppendLine("     , z.금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매입항목_목록(sDay1, sDay2, sFact, sType, sReturns, sProd, "", sMan));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.상품코드, zz.거래처코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine("     inner join T_거래처정보 a on a.사업자번호 = z.사업자번호 and a.지점코드 = '" + Common.p_strSpotCode + "' and a.거래처코드 = z.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = '" + Common.p_strSpotCode + "' and b.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = z.사업자번호 and p.지점코드 = '" + Common.p_strSpotCode + "' and p.상품코드 = z.상품코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_상품유형 t on t.사업자번호 = p.사업자번호 and t.지점코드 = '0' and t.코드 = p.상품유형코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_제조사 c on c.사업자번호 = p.사업자번호 and c.지점코드 = '0' and c.코드 = p.제조사코드 ");
            if (!bOrder)
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select ");
                stringBuilder.AppendLine("     8 as 정렬순서");
                stringBuilder.AppendLine("     , p.정렬순서 as 상품순서");
                stringBuilder.AppendLine("     , z.상품코드");
                stringBuilder.AppendLine("     , '--- 소계 ---' as 상품명");
                stringBuilder.AppendLine("     , '' as 규격");
                stringBuilder.AppendLine("     , '' as 상품유형명");
                stringBuilder.AppendLine("     , '' as 제조사명");
                stringBuilder.AppendLine("     , '' as 담당사원");
                stringBuilder.AppendLine("     , 'ZZZZ' as 거래처코드");
                stringBuilder.AppendLine("     , '' as 거래처명");
                stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
                stringBuilder.AppendLine("     , 0 as 평균단가 ");
                stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
                stringBuilder.AppendLine(" from ( ");
                stringBuilder.AppendLine("     select ");
                stringBuilder.AppendLine(" \t    zz.사업자번호 ");
                stringBuilder.AppendLine(" \t    , zz.상품코드 ");
                stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
                if (Common.p_strBox == "2")
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
                else
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
                stringBuilder.AppendLine("     from ( ");
                stringBuilder.AppendLine("         " + this.get_매입항목_목록(sDay1, sDay2, sFact, sType, sReturns, sProd, "", sMan));
                stringBuilder.AppendLine("         ) zz ");
                stringBuilder.AppendLine("     group by zz.사업자번호, zz.상품코드, zz.거래처코드 ");
                stringBuilder.AppendLine(" ) z ");
                stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = z.사업자번호 and p.지점코드 = '" + Common.p_strSpotCode + "' and p.상품코드 = z.상품코드 ");
                stringBuilder.AppendLine(" group by p.정렬순서, z.상품코드 ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 999999999 as 상품순서");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 상품명");
            stringBuilder.AppendLine("     , '' as 규격");
            stringBuilder.AppendLine("     , '' as 상품유형명");
            stringBuilder.AppendLine("     , '' as 제조사명");
            stringBuilder.AppendLine("     , '' as 담당사원");
            stringBuilder.AppendLine("     , 'ZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
            stringBuilder.AppendLine("     , 0 as 평균단가 ");
            stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매입항목_목록(sDay1, sDay2, sFact, sType, sReturns, sProd, "", sMan));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.상품코드, zz.거래처코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(") x ");
            if (bOrder)
                stringBuilder.AppendLine(" order by x.정렬순서 asc, x.금액 desc ");
            else
                stringBuilder.AppendLine(" order by x.상품순서 asc, x.상품코드 asc, x.정렬순서 asc, x.거래처코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품별_매출처상품현황(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sReturns,
          string sCust,
          string sMan,
          bool bOrder,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서 ");
            stringBuilder.AppendLine("     , z.사원번호");
            stringBuilder.AppendLine("     , b.사용자명 as 담당사원");
            stringBuilder.AppendLine("     , z.거래처코드");
            stringBuilder.AppendLine("     , a.거래처명");
            stringBuilder.AppendLine("     , p.정렬순서 as 상품순서");
            stringBuilder.AppendLine("     , z.상품코드");
            stringBuilder.AppendLine("     , p.상품명");
            stringBuilder.AppendLine("     , p.규격");
            stringBuilder.AppendLine("     , t.명칭 as 상품유형명");
            stringBuilder.AppendLine("     , c.명칭 as 제조사명");
            stringBuilder.AppendLine("     , z.박스수량 ");
            stringBuilder.AppendLine("     , z.중간수량 ");
            stringBuilder.AppendLine("     , z.낱개수량 ");
            stringBuilder.AppendLine("     , z.총수량 ");
            stringBuilder.AppendLine("     , z.서비스 ");
            stringBuilder.AppendLine("     , z.평균단가 ");
            stringBuilder.AppendLine("     , z.금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
            stringBuilder.AppendLine(" \t    , zz.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", sCust, sMan));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine("     inner join T_거래처정보 a on a.사업자번호 = z.사업자번호 and a.지점코드 = '" + Common.p_strSpotCode + "' and a.거래처코드 = z.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = '" + Common.p_strSpotCode + "' and b.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = z.사업자번호 and p.지점코드 = '" + Common.p_strSpotCode + "' and p.상품코드 = z.상품코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_상품유형 t on t.사업자번호 = p.사업자번호 and t.지점코드 = '0' and t.코드 = p.상품유형코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_제조사 c on c.사업자번호 = p.사업자번호 and c.지점코드 = '0' and c.코드 = p.제조사코드 ");
            if (!bOrder)
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select ");
                stringBuilder.AppendLine("     7 as 정렬순서");
                stringBuilder.AppendLine("     , z.사원번호");
                stringBuilder.AppendLine("     , max(b.사용자명) as 담당사원");
                stringBuilder.AppendLine("     , z.거래처코드");
                stringBuilder.AppendLine("     , '--- 소계 ---' as 거래처명");
                stringBuilder.AppendLine("     , 999999999 as 상품순서");
                stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
                stringBuilder.AppendLine("     , '' as 상품명");
                stringBuilder.AppendLine("     , '' as 규격");
                stringBuilder.AppendLine("     , '' as 상품유형명");
                stringBuilder.AppendLine("     , '' as 제조사명");
                stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
                stringBuilder.AppendLine("     , 0 as 평균단가 ");
                stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
                stringBuilder.AppendLine(" from ( ");
                stringBuilder.AppendLine("     select ");
                stringBuilder.AppendLine(" \t    zz.사업자번호 ");
                stringBuilder.AppendLine(" \t    , zz.상품코드 ");
                stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
                stringBuilder.AppendLine(" \t    , zz.사원번호 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
                if (Common.p_strBox == "2")
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
                else
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
                stringBuilder.AppendLine("     from ( ");
                stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", sCust, sMan));
                stringBuilder.AppendLine("         ) zz ");
                stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
                stringBuilder.AppendLine(" ) z ");
                stringBuilder.AppendLine("     inner join T_거래처정보 a on a.사업자번호 = z.사업자번호 and a.지점코드 = '" + Common.p_strSpotCode + "' and a.거래처코드 = z.거래처코드 ");
                stringBuilder.AppendLine("     inner join T_사용자정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = '" + Common.p_strSpotCode + "' and b.사원번호 = a.사원번호 ");
                stringBuilder.AppendLine(" group by z.사원번호, z.거래처코드 ");
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select ");
                stringBuilder.AppendLine("     8 as 정렬순서");
                stringBuilder.AppendLine("     , z.사원번호");
                stringBuilder.AppendLine("     , '-- 사원계 --' as 담당사원");
                stringBuilder.AppendLine("     , 'ZZZZ' as 거래처코드");
                stringBuilder.AppendLine("     , '' as 거래처명");
                stringBuilder.AppendLine("     , 999999999 as 상품순서");
                stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
                stringBuilder.AppendLine("     , '' as 상품명");
                stringBuilder.AppendLine("     , '' as 규격");
                stringBuilder.AppendLine("     , '' as 상품유형명");
                stringBuilder.AppendLine("     , '' as 제조사명");
                stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
                stringBuilder.AppendLine("     , 0 as 평균단가 ");
                stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
                stringBuilder.AppendLine(" from ( ");
                stringBuilder.AppendLine("     select ");
                stringBuilder.AppendLine(" \t    zz.사업자번호 ");
                stringBuilder.AppendLine(" \t    , zz.상품코드 ");
                stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
                stringBuilder.AppendLine(" \t    , zz.사원번호 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
                if (Common.p_strBox == "2")
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
                else
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
                stringBuilder.AppendLine("     from ( ");
                stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", sCust, sMan));
                stringBuilder.AppendLine("         ) zz ");
                stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
                stringBuilder.AppendLine(" ) z ");
                stringBuilder.AppendLine(" group by z.사원번호 ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원");
            stringBuilder.AppendLine("     , 'ZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , 999999999 as 상품순서");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
            stringBuilder.AppendLine("     , '' as 상품명");
            stringBuilder.AppendLine("     , '' as 규격");
            stringBuilder.AppendLine("     , '' as 상품유형명");
            stringBuilder.AppendLine("     , '' as 제조사명");
            stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
            stringBuilder.AppendLine("     , 0 as 평균단가 ");
            stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
            stringBuilder.AppendLine(" \t    , zz.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", sCust, sMan));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(") x ");
            if (bOrder)
                stringBuilder.AppendLine(" order by x.정렬순서 asc, x.금액 desc ");
            else
                stringBuilder.AppendLine(" order by x.사원번호 asc, x.거래처코드 asc, x.정렬순서 asc, x.상품순서 asc, x.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품별_매입처상품현황(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sReturns,
          string sCust,
          string sMan,
          bool bOrder,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서 ");
            stringBuilder.AppendLine("     , z.사원번호");
            stringBuilder.AppendLine("     , b.사용자명 as 담당사원");
            stringBuilder.AppendLine("     , z.거래처코드");
            stringBuilder.AppendLine("     , a.거래처명");
            stringBuilder.AppendLine("     , p.정렬순서 as 상품순서");
            stringBuilder.AppendLine("     , z.상품코드");
            stringBuilder.AppendLine("     , p.상품명");
            stringBuilder.AppendLine("     , p.규격");
            stringBuilder.AppendLine("     , t.명칭 as 상품유형명");
            stringBuilder.AppendLine("     , c.명칭 as 제조사명");
            stringBuilder.AppendLine("     , z.박스수량 ");
            stringBuilder.AppendLine("     , z.중간수량 ");
            stringBuilder.AppendLine("     , z.낱개수량 ");
            stringBuilder.AppendLine("     , z.총수량 ");
            stringBuilder.AppendLine("     , z.서비스 ");
            stringBuilder.AppendLine("     , z.평균단가 ");
            stringBuilder.AppendLine("     , z.금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
            stringBuilder.AppendLine(" \t    , zz.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매입항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", sCust, sMan));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine("     inner join T_거래처정보 a on a.사업자번호 = z.사업자번호 and a.지점코드 = '" + Common.p_strSpotCode + "' and a.거래처코드 = z.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = '" + Common.p_strSpotCode + "' and b.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = z.사업자번호 and p.지점코드 = '" + Common.p_strSpotCode + "' and p.상품코드 = z.상품코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_상품유형 t on t.사업자번호 = p.사업자번호 and t.지점코드 = '0' and t.코드 = p.상품유형코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_제조사 c on c.사업자번호 = p.사업자번호 and c.지점코드 = '0' and c.코드 = p.제조사코드 ");
            if (!bOrder)
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select ");
                stringBuilder.AppendLine("     7 as 정렬순서");
                stringBuilder.AppendLine("     , z.사원번호");
                stringBuilder.AppendLine("     , max(b.사용자명) as 담당사원");
                stringBuilder.AppendLine("     , z.거래처코드");
                stringBuilder.AppendLine("     , '--- 소계 ---' as 거래처명");
                stringBuilder.AppendLine("     , 999999999 as 상품순서");
                stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
                stringBuilder.AppendLine("     , '' as 상품명");
                stringBuilder.AppendLine("     , '' as 규격");
                stringBuilder.AppendLine("     , '' as 상품유형명");
                stringBuilder.AppendLine("     , '' as 제조사명");
                stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
                stringBuilder.AppendLine("     , 0 as 평균단가 ");
                stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
                stringBuilder.AppendLine(" from ( ");
                stringBuilder.AppendLine("     select ");
                stringBuilder.AppendLine(" \t    zz.사업자번호 ");
                stringBuilder.AppendLine(" \t    , zz.상품코드 ");
                stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
                stringBuilder.AppendLine(" \t    , zz.사원번호 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
                if (Common.p_strBox == "2")
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
                else
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
                stringBuilder.AppendLine("     from ( ");
                stringBuilder.AppendLine("         " + this.get_매입항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", sCust, sMan));
                stringBuilder.AppendLine("         ) zz ");
                stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
                stringBuilder.AppendLine(" ) z ");
                stringBuilder.AppendLine("     inner join T_거래처정보 a on a.사업자번호 = z.사업자번호 and a.지점코드 = '" + Common.p_strSpotCode + "' and a.거래처코드 = z.거래처코드 ");
                stringBuilder.AppendLine("     inner join T_사용자정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = '" + Common.p_strSpotCode + "' and b.사원번호 = a.사원번호 ");
                stringBuilder.AppendLine(" group by z.사원번호, z.거래처코드 ");
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select ");
                stringBuilder.AppendLine("     8 as 정렬순서");
                stringBuilder.AppendLine("     , z.사원번호");
                stringBuilder.AppendLine("     , '-- 사원계 --' as 담당사원");
                stringBuilder.AppendLine("     , 'ZZZZ' as 거래처코드");
                stringBuilder.AppendLine("     , '' as 거래처명");
                stringBuilder.AppendLine("     , 999999999 as 상품순서");
                stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
                stringBuilder.AppendLine("     , '' as 상품명");
                stringBuilder.AppendLine("     , '' as 규격");
                stringBuilder.AppendLine("     , '' as 상품유형명");
                stringBuilder.AppendLine("     , '' as 제조사명");
                stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
                stringBuilder.AppendLine("     , 0 as 평균단가 ");
                stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
                stringBuilder.AppendLine(" from ( ");
                stringBuilder.AppendLine("     select ");
                stringBuilder.AppendLine(" \t    zz.사업자번호 ");
                stringBuilder.AppendLine(" \t    , zz.상품코드 ");
                stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
                stringBuilder.AppendLine(" \t    , zz.사원번호 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
                if (Common.p_strBox == "2")
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
                else
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
                stringBuilder.AppendLine("     from ( ");
                stringBuilder.AppendLine("         " + this.get_매입항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", sCust, sMan));
                stringBuilder.AppendLine("         ) zz ");
                stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
                stringBuilder.AppendLine(" ) z ");
                stringBuilder.AppendLine(" group by z.사원번호 ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원");
            stringBuilder.AppendLine("     , 'ZZZZ' as 거래처코드");
            stringBuilder.AppendLine("     , '' as 거래처명");
            stringBuilder.AppendLine("     , 999999999 as 상품순서");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
            stringBuilder.AppendLine("     , '' as 상품명");
            stringBuilder.AppendLine("     , '' as 규격");
            stringBuilder.AppendLine("     , '' as 상품유형명");
            stringBuilder.AppendLine("     , '' as 제조사명");
            stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
            stringBuilder.AppendLine("     , 0 as 평균단가 ");
            stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
            stringBuilder.AppendLine(" \t    , zz.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매입항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", sCust, sMan));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(") x ");
            if (bOrder)
                stringBuilder.AppendLine(" order by x.정렬순서 asc, x.금액 desc ");
            else
                stringBuilder.AppendLine(" order by x.사원번호 asc, x.거래처코드 asc, x.정렬순서 asc, x.상품순서 asc, x.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품별_사원상품현황(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sReturns,
          string sMan,
          bool bOrder,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서 ");
            stringBuilder.AppendLine("     , z.사원번호");
            stringBuilder.AppendLine("     , max(b.사용자명) as 담당사원");
            stringBuilder.AppendLine("     , max(p.정렬순서) as 상품순서");
            stringBuilder.AppendLine("     , z.상품코드");
            stringBuilder.AppendLine("     , max(p.상품명) as 상품명");
            stringBuilder.AppendLine("     , max(p.규격) as 규격");
            stringBuilder.AppendLine("     , max(t.명칭) as 상품유형명");
            stringBuilder.AppendLine("     , max(c.명칭) as 제조사명");
            stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
            stringBuilder.AppendLine(" \t    , case when ( isnull(sum(z.총수량), 0) + isnull(sum(z.서비스총수량), 0) ) = 0 then 0 else isnull(sum(z.금액), 0) / ( isnull(sum(z.총수량), 0) + isnull(sum(z.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
            stringBuilder.AppendLine(" \t    , zz.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스총수량), 0) as 서비스총수량 ");
            stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", "", sMan));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine("     inner join T_거래처정보 a on a.사업자번호 = z.사업자번호 and a.지점코드 = '" + Common.p_strSpotCode + "' and a.거래처코드 = z.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = '" + Common.p_strSpotCode + "' and b.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = z.사업자번호 and p.지점코드 = '" + Common.p_strSpotCode + "' and p.상품코드 = z.상품코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_상품유형 t on t.사업자번호 = p.사업자번호 and t.지점코드 = '0' and t.코드 = p.상품유형코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_제조사 c on c.사업자번호 = p.사업자번호 and c.지점코드 = '0' and c.코드 = p.제조사코드 ");
            stringBuilder.AppendLine(" group by z.사원번호, z.상품코드 ");
            if (!bOrder)
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select ");
                stringBuilder.AppendLine("     8 as 정렬순서");
                stringBuilder.AppendLine("     , z.사원번호");
                stringBuilder.AppendLine("     , '--- 소계 ---' as 담당사원");
                stringBuilder.AppendLine("     , 999999999 as 상품순서");
                stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
                stringBuilder.AppendLine("     , '' as 상품명");
                stringBuilder.AppendLine("     , '' as 규격");
                stringBuilder.AppendLine("     , '' as 상품유형명");
                stringBuilder.AppendLine("     , '' as 제조사명");
                stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
                stringBuilder.AppendLine("     , 0 as 평균단가 ");
                stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
                stringBuilder.AppendLine(" from ( ");
                stringBuilder.AppendLine("     select ");
                stringBuilder.AppendLine(" \t    zz.사업자번호 ");
                stringBuilder.AppendLine(" \t    , zz.상품코드 ");
                stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
                stringBuilder.AppendLine(" \t    , zz.사원번호 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스총수량), 0) as 서비스총수량 ");
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
                stringBuilder.AppendLine("     from ( ");
                stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", "", sMan));
                stringBuilder.AppendLine("         ) zz ");
                stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
                stringBuilder.AppendLine(" ) z ");
                stringBuilder.AppendLine(" group by z.사원번호 ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 담당사원");
            stringBuilder.AppendLine("     , 999999999 as 상품순서");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
            stringBuilder.AppendLine("     , '' as 상품명");
            stringBuilder.AppendLine("     , '' as 규격");
            stringBuilder.AppendLine("     , '' as 상품유형명");
            stringBuilder.AppendLine("     , '' as 제조사명");
            stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
            stringBuilder.AppendLine("     , 0 as 평균단가 ");
            stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
            stringBuilder.AppendLine(" \t    , zz.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스총수량), 0) as 서비스총수량 ");
            stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", "", sMan));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(") x ");
            if (bOrder)
                stringBuilder.AppendLine(" order by x.정렬순서 asc, x.금액 desc ");
            else
                stringBuilder.AppendLine(" order by x.사원번호 asc, x.정렬순서 asc, x.상품순서 asc, x.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품별_상품사원현황(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sReturns,
          string sProd,
          string sMan,
          bool bOrder,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서 ");
            stringBuilder.AppendLine("     , max(p.정렬순서) as 상품순서");
            stringBuilder.AppendLine("     , z.상품코드");
            stringBuilder.AppendLine("     , max(p.상품명) as 상품명");
            stringBuilder.AppendLine("     , max(p.규격) as 규격");
            stringBuilder.AppendLine("     , max(t.명칭) as 상품유형명");
            stringBuilder.AppendLine("     , max(c.명칭) as 제조사명");
            stringBuilder.AppendLine("     , z.사원번호");
            stringBuilder.AppendLine("     , max(b.사용자명) as 담당사원");
            stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(z.박스수량), 0) + isnull(sum(z.서비스박스), 0) ) = 0 then 0 else isnull(sum(z.금액), 0) / ( isnull(sum(z.박스수량), 0) + isnull(sum(z.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(z.총수량), 0) + isnull(sum(z.서비스총수량), 0) ) = 0 then 0 else isnull(sum(z.금액), 0) / ( isnull(sum(z.총수량), 0) + isnull(sum(z.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
            stringBuilder.AppendLine(" \t    , zz.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            stringBuilder.AppendLine("         , isnull(sum(zz.서비스박스), 0) as 서비스박스 ");
            stringBuilder.AppendLine("         , isnull(sum(zz.서비스낱개), 0) as 서비스낱개 ");
            stringBuilder.AppendLine("         , isnull(sum(zz.서비스총수량), 0) as 서비스총수량 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", "", sMan));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     where 1=1 ");
            if (sProd != "")
                stringBuilder.AppendLine("         and zz.상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine("     inner join T_거래처정보 a on a.사업자번호 = z.사업자번호 and a.지점코드 = '" + Common.p_strSpotCode + "' and a.거래처코드 = z.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = '" + Common.p_strSpotCode + "' and b.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = z.사업자번호 and p.지점코드 = '" + Common.p_strSpotCode + "' and p.상품코드 = z.상품코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_상품유형 t on t.사업자번호 = p.사업자번호 and t.지점코드 = '0' and t.코드 = p.상품유형코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_제조사 c on c.사업자번호 = p.사업자번호 and c.지점코드 = '0' and c.코드 = p.제조사코드 ");
            stringBuilder.AppendLine(" group by z.상품코드, z.사원번호 ");
            if (!bOrder)
            {
                stringBuilder.AppendLine(" union all ");
                stringBuilder.AppendLine(" select ");
                stringBuilder.AppendLine("     8 as 정렬순서");
                stringBuilder.AppendLine("     , p.정렬순서 as 상품순서");
                stringBuilder.AppendLine("     , z.상품코드");
                stringBuilder.AppendLine("     , '--- 소계 ---' as 상품명");
                stringBuilder.AppendLine("     , '' as 규격");
                stringBuilder.AppendLine("     , '' as 상품유형명");
                stringBuilder.AppendLine("     , '' as 제조사명");
                stringBuilder.AppendLine("     , 'ZZZ' as 사원번호");
                stringBuilder.AppendLine("     , '' as 담당사원");
                stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
                stringBuilder.AppendLine("     , 0 as 평균단가 ");
                stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
                stringBuilder.AppendLine(" from ( ");
                stringBuilder.AppendLine("     select ");
                stringBuilder.AppendLine(" \t    zz.사업자번호 ");
                stringBuilder.AppendLine(" \t    , zz.상품코드 ");
                stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
                stringBuilder.AppendLine(" \t    , zz.사원번호 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
                stringBuilder.AppendLine("         , isnull(sum(zz.서비스박스), 0) as 서비스박스 ");
                stringBuilder.AppendLine("         , isnull(sum(zz.서비스낱개), 0) as 서비스낱개 ");
                stringBuilder.AppendLine("         , isnull(sum(zz.서비스총수량), 0) as 서비스총수량 ");
                if (Common.p_strBox == "2")
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
                else
                    stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
                stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
                stringBuilder.AppendLine("     from ( ");
                stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", "", sMan));
                stringBuilder.AppendLine("         ) zz ");
                stringBuilder.AppendLine("     where 1=1 ");
                if (sProd != "")
                    stringBuilder.AppendLine("         and zz.상품코드 = '" + sProd + "' ");
                stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
                stringBuilder.AppendLine(" ) z ");
                stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = z.사업자번호 and p.지점코드 = '" + Common.p_strSpotCode + "' and p.상품코드 = z.상품코드 ");
                stringBuilder.AppendLine(" group by p.정렬순서, z.상품코드 ");
            }
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 999999999 as 상품순서");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 상품명");
            stringBuilder.AppendLine("     , '' as 규격");
            stringBuilder.AppendLine("     , '' as 상품유형명");
            stringBuilder.AppendLine("     , '' as 제조사명");
            stringBuilder.AppendLine("     , 'ZZZ' as 사원번호");
            stringBuilder.AppendLine("     , '' as 담당사원");
            stringBuilder.AppendLine("     , isnull(sum(z.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.서비스), 0) as 서비스 ");
            stringBuilder.AppendLine("     , 0 as 평균단가 ");
            stringBuilder.AppendLine("     , isnull(sum(z.금액), 0) as 금액 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select ");
            stringBuilder.AppendLine(" \t    zz.사업자번호 ");
            stringBuilder.AppendLine(" \t    , zz.상품코드 ");
            stringBuilder.AppendLine(" \t    , zz.거래처코드 ");
            stringBuilder.AppendLine(" \t    , zz.사원번호 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.박스수량), 0) as 박스수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.중간수량), 0) as 중간수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.낱개수량), 0) as 낱개수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.총수량), 0) as 총수량 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.서비스박스), 0) + isnull(sum(zz.서비스낱개), 0) as 서비스 ");
            stringBuilder.AppendLine("         , isnull(sum(zz.서비스박스), 0) as 서비스박스 ");
            stringBuilder.AppendLine("         , isnull(sum(zz.서비스낱개), 0) as 서비스낱개 ");
            stringBuilder.AppendLine("         , isnull(sum(zz.서비스총수량), 0) as 서비스총수량 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.박스수량), 0) + isnull(sum(zz.서비스박스), 0) ) end as 평균단가 ");
            else
                stringBuilder.AppendLine(" \t    , case when ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) = 0 then 0 else isnull(sum(zz.금액), 0) / ( isnull(sum(zz.총수량), 0) + isnull(sum(zz.서비스총수량), 0) ) end as 평균단가 ");
            stringBuilder.AppendLine(" \t    , isnull(sum(zz.금액), 0) as 금액 ");
            stringBuilder.AppendLine("     from ( ");
            stringBuilder.AppendLine("         " + this.get_매출항목_목록(sDay1, sDay2, sFact, sType, sReturns, "", "", sMan));
            stringBuilder.AppendLine("         ) zz ");
            stringBuilder.AppendLine("     where 1=1 ");
            if (sProd != "")
                stringBuilder.AppendLine("         and zz.상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("     group by zz.사업자번호, zz.사원번호, zz.거래처코드, zz.상품코드 ");
            stringBuilder.AppendLine(" ) z ");
            stringBuilder.AppendLine(") x ");
            if (bOrder)
                stringBuilder.AppendLine(" order by x.정렬순서 asc, x.금액 desc ");
            else
                stringBuilder.AppendLine(" order by x.상품순서 asc, x.상품코드 asc, x.정렬순서 asc, x.사원번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품별_상품부동매출처현황(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sReturns,
          string sProd,
          string sMan,
          bool bOrder,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     a.상품코드");
            stringBuilder.AppendLine("     , a.상품명 as 상품명");
            stringBuilder.AppendLine("     , a.규격 as 규격");
            stringBuilder.AppendLine("     , t.명칭 as 상품유형명");
            stringBuilder.AppendLine("     , c.명칭 as 제조사명");
            stringBuilder.AppendLine("     , v.거래처코드 ");
            stringBuilder.AppendLine("     , s.거래처명 ");
            stringBuilder.AppendLine("     , u.사용자명 as 담당사원 ");
            stringBuilder.AppendLine("     , v.최종매출일자 ");
            stringBuilder.AppendLine("     , v.최종전표 ");
            stringBuilder.AppendLine("     , x.박스수량 ");
            stringBuilder.AppendLine("     , x.중간수량 ");
            stringBuilder.AppendLine("     , x.낱개수량 ");
            stringBuilder.AppendLine("     , x.총수량 ");
            if (Common.p_strBox == "2")
                stringBuilder.AppendLine("     , x.박스단가 as 판매단가 ");
            else
                stringBuilder.AppendLine("     , x.낱개단가 as 판매단가 ");
            stringBuilder.AppendLine("     , x.서비스박스 ");
            stringBuilder.AppendLine("     , x.서비스낱개 ");
            stringBuilder.AppendLine("     , x.서비스박스 + x.서비스낱개 as 서비스 ");
            stringBuilder.AppendLine("     , x.금액 ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine(" \tleft outer join P_상품유형 t on t.사업자번호 = a.사업자번호 and t.지점코드 = '0' and t.코드 = a.상품유형코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_제조사 c on c.사업자번호 = a.사업자번호 and c.지점코드 = '0' and c.코드 = a.제조사코드 ");
            stringBuilder.AppendLine(" \tleft outer join ( ");
            stringBuilder.AppendLine(" \t\t    select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , b.상품코드 ");
            stringBuilder.AppendLine(" \t\t\t    , max(a.매출일자) as 최종매출일자 ");
            stringBuilder.AppendLine(" \t\t\t    , max(a.매출일자 + '.' + a.전표번호) as 최종전표 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            if (sMan != "")
                stringBuilder.AppendLine(" \t\t\t            and c.사원번호 = '" + sMan + "' ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 and a.매출일자 <= '" + sDay2 + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드, b.상품코드 ");
            stringBuilder.AppendLine(" \t\t    ) v on v.사업자번호 = a.사업자번호 and v.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine(" \tleft outer join T_매출항목 x on x.사업자번호 = a.사업자번호 and x.지점코드 = a.지점코드 and x.매출일자 = v.최종매출일자 and x.매출일자 + '.' + x.전표번호 = v.최종전표 and x.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("     left outer join T_거래처정보 s on s.사업자번호 = a.사업자번호 and s.지점코드 = a.지점코드 and s.거래처코드 = v.거래처코드 ");
            stringBuilder.AppendLine("     left outer join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = s.사원번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            if (sFact != "")
                stringBuilder.AppendLine(" \t\t\t            and a.제조사코드 = '" + sFact + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t\t\t            and a.상품유형코드 = '" + sType + "' ");
            if (sProd != "")
                stringBuilder.AppendLine(" \t\t\t            and a.상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine("     and a.사용여부 = '0' ");
            stringBuilder.AppendLine("     and isnull(v.거래처코드, '') <> '' ");
            stringBuilder.AppendLine("     and v.최종매출일자 < '" + sDay1 + "' ");
            stringBuilder.AppendLine(" order by a.상품코드 asc, v.거래처코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품별_판매현황(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sDept,
          string sWare,
          string sMan,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서 ");
            stringBuilder.AppendLine("     , max(p.정렬순서) as 상품순서 ");
            stringBuilder.AppendLine("     , z.상품코드");
            stringBuilder.AppendLine("     , max(p.상품명) as 상품명 ");
            stringBuilder.AppendLine("     , max(p.규격) as 규격 ");
            stringBuilder.AppendLine("     , isnull(sum(z.판매수량), 0) as 판매수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.판매금액), 0) as 판매금액 ");
            stringBuilder.AppendLine("     , isnull(sum(z.반품수량), 0) as 반품수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.반품금액), 0) as 반품금액 ");
            stringBuilder.AppendLine("     , isnull(sum(z.실판매수량), 0) as 실판매수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.실판매금액), 0) as 실판매금액 ");
            stringBuilder.AppendLine("     , case when isnull(sum(z.판매금액), 0) = 0 then 0 else isnull(sum(z.반품금액), 0) / isnull(sum(z.판매금액), 0) * 100 end as 반품율 ");
            stringBuilder.AppendLine("     , 0.00 as 점유율 ");
            stringBuilder.AppendLine("     , isnull(sum(z.입고액), 0) as 입고액 ");
            stringBuilder.AppendLine("     , isnull(sum(z.실판매금액), 0) - isnull(sum(z.입고액), 0) as 이익금 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("         " + this.get_판매분석_목록(sDay1, sDay2, sFact, sType, sDept, sWare, sMan));
            stringBuilder.AppendLine("     ) z ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = z.사업자번호 and p.지점코드 = '" + Common.p_strSpotCode + "' and p.상품코드 = z.상품코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_상품유형 t on t.사업자번호 = p.사업자번호 and t.지점코드 = '0' and t.코드 = p.상품유형코드 ");
            stringBuilder.AppendLine(" \tleft outer join P_제조사 c on c.사업자번호 = p.사업자번호 and c.지점코드 = '0' and c.코드 = p.제조사코드 ");
            stringBuilder.AppendLine(" group by z.상품코드 ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     9 as 정렬순서");
            stringBuilder.AppendLine("     , 999999999 as 상품순서");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 상품코드");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 상품명");
            stringBuilder.AppendLine("     , '' as 규격");
            stringBuilder.AppendLine("     , isnull(sum(z.판매수량), 0) as 판매수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.판매금액), 0) as 판매금액 ");
            stringBuilder.AppendLine("     , isnull(sum(z.반품수량), 0) as 반품수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.반품금액), 0) as 반품금액 ");
            stringBuilder.AppendLine("     , isnull(sum(z.실판매수량), 0) as 실판매수량 ");
            stringBuilder.AppendLine("     , isnull(sum(z.실판매금액), 0) as 실판매금액 ");
            stringBuilder.AppendLine("     , case when isnull(sum(z.판매금액), 0) = 0 then 0 else isnull(sum(z.반품금액), 0) / isnull(sum(z.판매금액), 0) * 100 end as 반품율 ");
            stringBuilder.AppendLine("     , 100 as 점유율 ");
            stringBuilder.AppendLine("     , isnull(sum(z.입고액), 0) as 입고액 ");
            stringBuilder.AppendLine("     , isnull(sum(z.실판매금액), 0) - isnull(sum(z.입고액), 0) as 이익금 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("         " + this.get_판매분석_목록(sDay1, sDay2, sFact, sType, sDept, sWare, sMan));
            stringBuilder.AppendLine("     ) z ");
            stringBuilder.AppendLine(") x ");
            stringBuilder.AppendLine(" order by x.상품순서 asc, x.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string get_판매분석_목록(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sDept,
          string sWare,
          string sMan)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , c.사원번호 ");
            stringBuilder.AppendLine("     , b.상품코드 ");
            stringBuilder.AppendLine("     , p.제조사코드 ");
            stringBuilder.AppendLine("     , p.상품유형코드 ");
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) * isnull(b.박스수량, 0) as 판매수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 판매금액 ");
            }
            else
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) * isnull(b.총수량, 0) as 판매수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 판매금액 ");
            }
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) * isnull(b.박스수량, 0) as 반품수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 반품금액 ");
            }
            else
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) * isnull(b.총수량, 0) as 반품수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 0 else 1 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 반품금액 ");
            }
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.박스수량, 0) as 실판매수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 실판매금액 ");
            }
            else
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) * isnull(b.총수량, 0) as 실판매수량 ");
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
                stringBuilder.AppendLine("         (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("         else  ");
                stringBuilder.AppendLine("             (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
                stringBuilder.AppendLine("             else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
                stringBuilder.AppendLine("         end) as 실판매금액 ");
            }
            if (Common.p_strBox == "2")
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) *  ");
                stringBuilder.AppendLine("             (case when b.박스단가 = 0 then 0 else round((b.박스수량 + b.서비스박스) * b.박스입고단가, 0) end) as 입고액  ");
            }
            else
            {
                stringBuilder.AppendLine("     , (case when b.매출구분 in ('1', '2') then 1 else 0 end) *  ");
                stringBuilder.AppendLine("             (case when b.낱개단가 = 0 then 0 else round((b.총수량 + b.서비스총수량) * b.낱개입고단가, 0) end) as 입고액  ");
            }
            stringBuilder.AppendLine(" from T_매출 a ");
            stringBuilder.AppendLine("     inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("      inner join dbo.TBF거래처정보('" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', '" + Common.p_strUserNo + "', '" + Common.p_strResultAll + "') c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = c.사업자번호 and u.지점코드 = c.지점코드 and u.사원번호 = c.사원번호 ");
            stringBuilder.AppendLine("     inner join T_상품정보 p on p.사업자번호 = a.사업자번호 and p.지점코드 = a.지점코드 and p.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            if (sFact != "")
                stringBuilder.AppendLine("     and p.제조사코드 = '" + sFact + "' ");
            if (sType != "")
                stringBuilder.AppendLine("     and p.상품유형코드 = '" + sType + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("     and u.부서코드 = '" + sDept + "' ");
            if (sWare != "")
                stringBuilder.AppendLine("     and u.창고코드 = '" + sWare + "' ");
            if (sMan != "")
                stringBuilder.AppendLine("     and c.사원번호 = '" + sMan + "' ");
            return stringBuilder.ToString();
        }

        public DataTable fn_상품별_주력현황(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sMan,
          string[] sProdCode,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     x.* ");
            stringBuilder.AppendLine(" from (  ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     1 as 정렬순서 ");
            stringBuilder.AppendLine("     , z.거래처코드 ");
            stringBuilder.AppendLine("     , max(z.거래처명) as 거래처명 ");
            for (int index = 0; index < sProdCode.Length; ++index)
                stringBuilder.AppendLine("     , convert(nvarchar(50), sum(z.상품매출" + index.ToString() + ") ) as 상품매출" + index.ToString() + " ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     " + this.get_주력상품_목록(sDay1, sDay2, sFact, sType, sMan, sProdCode));
            stringBuilder.AppendLine(" ) z  ");
            stringBuilder.AppendLine(" group by z.거래처코드 ");
            stringBuilder.AppendLine(" union all  ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     9 as 정렬순서 ");
            stringBuilder.AppendLine("     , 'ZZZZZZ' as 거래처코드 ");
            stringBuilder.AppendLine("     , '=== 합계 ===' as 거래처명 ");
            for (int index = 0; index < sProdCode.Length; ++index)
                stringBuilder.AppendLine("     , convert(nvarchar(50), sum(z.상품매출" + index.ToString() + ") ) as 상품매출" + index.ToString() + " ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     " + this.get_주력상품_목록(sDay1, sDay2, sFact, sType, sMan, sProdCode));
            stringBuilder.AppendLine(" ) z  ");
            stringBuilder.AppendLine(" ) x  ");
            stringBuilder.AppendLine(" order by x.정렬순서 asc, x.거래처코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public string get_주력상품_목록(
          string sDay1,
          string sDay2,
          string sFact,
          string sType,
          string sMan,
          string[] sProdCode)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     isnull(convert(nvarchar(19), a.서명일시, 120), '') as 서명일시 ");
            stringBuilder.AppendLine("     , a.매출일자     ");
            stringBuilder.AppendLine("     , a.전표번호     ");
            stringBuilder.AppendLine("     , a.거래처코드   ");
            stringBuilder.AppendLine("     , w.거래처명     ");
            stringBuilder.AppendLine("     , w.초기잔고     ");
            stringBuilder.AppendLine("     , c.입수수량     ");
            for (int index = 0; index < sProdCode.Length; ++index)
            {
                if (Common.p_strBox == "2")
                {
                    stringBuilder.AppendLine("     , case when b.상품코드 = '" + sProdCode[index] + "' then ");
                    stringBuilder.AppendLine("         (case when b.매출구분 = '1' then 1 ");
                    stringBuilder.AppendLine("             when b.매출구분 = '2' then 1 ");
                    stringBuilder.AppendLine("             when b.매출구분 = '3' then -1 ");
                    stringBuilder.AppendLine("             when b.매출구분 = '4' then -1 ");
                    stringBuilder.AppendLine("             else 0 end) * b.박스수량 ");
                    stringBuilder.AppendLine("         + (case when b.매출구분 = '1' then 1 ");
                    stringBuilder.AppendLine("             when b.매출구분 = '2' then 1 ");
                    stringBuilder.AppendLine("             when b.매출구분 = '3' then -1 ");
                    stringBuilder.AppendLine("             when b.매출구분 = '4' then -1 ");
                    stringBuilder.AppendLine("             else 0 end) * b.서비스박스 ");
                    stringBuilder.AppendLine("         else 0 end as 상품매출" + index.ToString() + " ");
                }
                else
                {
                    stringBuilder.AppendLine("     , case when b.상품코드 = '" + sProdCode[index] + "' then ");
                    stringBuilder.AppendLine("         (case when b.매출구분 = '1' then 1 ");
                    stringBuilder.AppendLine("             when b.매출구분 = '2' then 1 ");
                    stringBuilder.AppendLine("             when b.매출구분 = '3' then -1 ");
                    stringBuilder.AppendLine("             when b.매출구분 = '4' then -1 ");
                    stringBuilder.AppendLine("             else 0 end) * b.총수량 ");
                    stringBuilder.AppendLine("         + (case when b.매출구분 = '1' then 1 ");
                    stringBuilder.AppendLine("             when b.매출구분 = '2' then 1 ");
                    stringBuilder.AppendLine("             when b.매출구분 = '3' then -1 ");
                    stringBuilder.AppendLine("             when b.매출구분 = '4' then -1 ");
                    stringBuilder.AppendLine("             else 0 end) * b.서비스총수량 ");
                    stringBuilder.AppendLine("         else 0 end as 상품매출" + index.ToString() + " ");
                }
            }
            stringBuilder.AppendLine(" from T_매출 a ");
            stringBuilder.AppendLine("      inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호  ");
            stringBuilder.AppendLine("      inner join T_거래처정보 w on w.사업자번호 = a.사업자번호 and w.지점코드 = a.지점코드 and w.거래처코드 = a.거래처코드  ");
            stringBuilder.AppendLine("      inner join T_상품정보 c on c.사업자번호 = b.사업자번호 and c.지점코드 = a.지점코드 and c.상품코드 = b.상품코드  ");
            if (sFact != "")
                stringBuilder.AppendLine(" \t\t\t            and c.제조사코드 = '" + sFact + "' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t\t\t            and c.상품유형코드 = '" + sType + "' ");
            string str = " '-' ";
            for (int index = 0; index < sProdCode.Length; ++index)
                str = str + ", '" + sProdCode[index] + "' ";
            stringBuilder.AppendLine(" \t\t\t            and c.상품코드 in ( " + str + " ) ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "'  ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "'  ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "'  ");
            if (sMan != "")
            {
                stringBuilder.AppendLine("     and a.거래처코드 in (select 거래처코드 from T_거래처정보 ");
                stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
                stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
                stringBuilder.AppendLine("                             and 사원번호 = '" + sMan + "') ");
            }
            return stringBuilder.ToString();
        }

        public DataTable fn_매출단가표_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     a.* ");
            stringBuilder.AppendLine("     , round(b.중간입수수량 * a.낱개단가, 0) as 중간단가 ");
            stringBuilder.AppendLine("     , b.상품명 ");
            stringBuilder.AppendLine("     , b.규격 ");
            stringBuilder.AppendLine(" from T_매출단가표 a ");
            stringBuilder.AppendLine("      inner join T_상품정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("      inner join (select 사업자번호, 지점코드, 거래처코드, 상품코드, max(매출일자) as 매출일자 ");
            stringBuilder.AppendLine("                 from T_매출단가표 ");
            stringBuilder.AppendLine("                 where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 group by 사업자번호, 지점코드, 거래처코드, 상품코드 ");
            stringBuilder.AppendLine("                 ) c on c.사업자번호 = a.사업자번호 ");
            stringBuilder.AppendLine("                     and c.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("                     and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("                     and c.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("                     and c.매출일자 = a.매출일자 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and isnull(b.사용여부, '0') = '0' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_매출단가표_Detail(string p1, string p2, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select ");
            stringBuilder.AppendLine("     a.* ");
            stringBuilder.AppendLine("     , round(b.중간입수수량 * a.낱개단가, 0) as 중간단가 ");
            stringBuilder.AppendLine("     , b.상품명 ");
            stringBuilder.AppendLine("     , b.규격 ");
            stringBuilder.AppendLine("     , d.거래처명 ");
            stringBuilder.AppendLine(" from T_매출단가표 a ");
            stringBuilder.AppendLine("      inner join T_상품정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("      inner join (select 사업자번호, 지점코드, 거래처코드, 상품코드, max(매출일자) as 매출일자 ");
            stringBuilder.AppendLine("                 from T_매출단가표 ");
            stringBuilder.AppendLine("                 where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                     and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                 group by 사업자번호, 지점코드, 거래처코드, 상품코드 ");
            stringBuilder.AppendLine("                 ) c on c.사업자번호 = a.사업자번호 ");
            stringBuilder.AppendLine("                     and c.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("                     and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("                     and c.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("                     and c.매출일자 = a.매출일자 ");
            stringBuilder.AppendLine("      left outer join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.거래처코드 = @p_1 ");
            stringBuilder.AppendLine("     and a.상품코드 = @p_2 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)p1);
            sCommand.Parameters.AddWithValue("@p_2", (object)p2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_거래처별_매출단가표_List(string sProd, string sGubun, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*");
            stringBuilder.AppendLine("     , z.* ");
            stringBuilder.AppendLine("     , u.사용자명 as 담당사원명 ");
            stringBuilder.AppendLine(" from T_거래처정보 a ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = a.사업자번호 and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            stringBuilder.AppendLine("     left outer join ( ");
            stringBuilder.AppendLine("         select ");
            stringBuilder.AppendLine("             a.사업자번호 ");
            stringBuilder.AppendLine("             , a.지점코드 ");
            stringBuilder.AppendLine("             , a.거래처코드 ");
            stringBuilder.AppendLine("             , a.상품코드 ");
            stringBuilder.AppendLine("             , a.박스단가 ");
            stringBuilder.AppendLine("             , a.낱개단가 ");
            stringBuilder.AppendLine("             , a.박스입고단가 ");
            stringBuilder.AppendLine("             , a.낱개입고단가 ");
            stringBuilder.AppendLine("             , round(b.중간입수수량 * a.낱개단가, 0) as 중간단가 ");
            stringBuilder.AppendLine("             , b.상품명 ");
            stringBuilder.AppendLine("             , b.규격 ");
            stringBuilder.AppendLine("         from T_매출단가표 a ");
            stringBuilder.AppendLine("             inner join T_상품정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.상품코드 = @p_1 ");
            stringBuilder.AppendLine("             inner join (select 사업자번호, 지점코드, 거래처코드, 상품코드, max(매출일자) as 매출일자 ");
            stringBuilder.AppendLine("                         from T_매출단가표 ");
            stringBuilder.AppendLine("                         where 사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and 지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and 상품코드 = @p_1 ");
            stringBuilder.AppendLine("                         group by 사업자번호, 지점코드, 거래처코드, 상품코드 ");
            stringBuilder.AppendLine("                         ) c on c.사업자번호 = a.사업자번호 ");
            stringBuilder.AppendLine("                             and c.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("                             and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("                             and c.상품코드 = a.상품코드 ");
            stringBuilder.AppendLine("                             and c.매출일자 = a.매출일자 ");
            stringBuilder.AppendLine("         where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("             and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("             and a.상품코드 = @p_1 ");
            stringBuilder.AppendLine("         ) z on z.사업자번호 = a.사업자번호 and z.지점코드 = a.지점코드 and z.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.거래처구분 in ('1', '3') ");
            if (sGubun == "1")
            {
                stringBuilder.AppendLine("     and a.거래처코드 in (select distinct x.거래처코드 ");
                stringBuilder.AppendLine("                         from T_매출 x ");
                stringBuilder.AppendLine("                             inner join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
                stringBuilder.AppendLine("                         where x.사업자번호 = '" + Common.p_strCompID + "' ");
                stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
                stringBuilder.AppendLine("                             and y.상품코드 = @p_1 ");
                stringBuilder.AppendLine("                         ) ");
            }
            stringBuilder.AppendLine(" order by a.거래처코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_1", (object)sProd);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출단가표_입고단가_List(
          string sDay1,
          string sDay2,
          string sProd,
          string sCust,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     a.사업자번호 ");
            stringBuilder.AppendLine("     , a.지점코드 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , d.거래처명 ");
            stringBuilder.AppendLine("     , a.상품코드 ");
            stringBuilder.AppendLine("     , a.매출일자 ");
            stringBuilder.AppendLine("     , a.박스입고단가 ");
            stringBuilder.AppendLine("     , a.낱개입고단가 ");
            stringBuilder.AppendLine(" from T_매출단가표 a ");
            stringBuilder.AppendLine("     inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 = @p_1 ");
            stringBuilder.AppendLine("     and a.매출일자 >= @pDay_1 ");
            stringBuilder.AppendLine("     and a.매출일자 <= @pDay_2 ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" order by a.거래처코드 asc, a.매출일자 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@pDay_1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@pDay_2", (object)sDay2);
            sCommand.Parameters.AddWithValue("@p_1", (object)sProd);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_식용란거래폐기내역서_매입(
          string sDay1,
          string sDay2,
          string sType,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine("     , b.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , d.거래처명 ");
            stringBuilder.AppendLine("     , d.전화번호 ");
            stringBuilder.AppendLine("     , g.입수수량 ");
            stringBuilder.AppendLine(" from T_매입 a ");
            stringBuilder.AppendLine("     inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join T_상품정보 g on g.사업자번호 = b.사업자번호 and g.지점코드 = b.지점코드 and g.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 >= @pDay_1 ");
            stringBuilder.AppendLine("     and a.매입일자 <= @pDay_2 ");
            stringBuilder.AppendLine("     and g.상품유형코드 = @p_1 ");
            stringBuilder.AppendLine(" order by a.매입일자 asc, a.전표번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@pDay_1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@pDay_2", (object)sDay2);
            sCommand.Parameters.AddWithValue("@p_1", (object)sType);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_식용란거래폐기내역서_매출(
          string sDay1,
          string sDay2,
          string sType,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine("     , b.비고 as 상품비고 ");
            stringBuilder.AppendLine("     , d.거래처명 ");
            stringBuilder.AppendLine("     , d.전화번호 ");
            stringBuilder.AppendLine("     , g.입수수량 ");
            stringBuilder.AppendLine(" from T_매출 a ");
            stringBuilder.AppendLine("     inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join T_상품정보 g on g.사업자번호 = b.사업자번호 and g.지점코드 = b.지점코드 and g.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= @pDay_1 ");
            stringBuilder.AppendLine("     and a.매출일자 <= @pDay_2 ");
            stringBuilder.AppendLine("     and g.상품유형코드 = @p_1 ");
            stringBuilder.AppendLine(" order by a.매출일자 asc, a.전표번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@pDay_1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@pDay_2", (object)sDay2);
            sCommand.Parameters.AddWithValue("@p_1", (object)sType);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable 구장터_상품유형_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.유형코드 ");
            stringBuilder.AppendLine("     , a.유형명 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine(" from N_유형코드 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.유형코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_거래처유형_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.유형코드 ");
            stringBuilder.AppendLine("     , a.유형명 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine(" from N_거래처유형코드 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.유형코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_창고코드_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.창고코드 ");
            stringBuilder.AppendLine("     , a.창고명 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine("     , a.실적제외 ");
            stringBuilder.AppendLine(" from N_창고코드 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.창고코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_부서코드_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.부서코드 ");
            stringBuilder.AppendLine("     , a.부서명 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine(" from N_부서코드 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.부서코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_제조사코드_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.제조사코드 ");
            stringBuilder.AppendLine("     , a.제조사명 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine(" from N_제조사코드 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.제조사코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_지역코드_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.지역코드 ");
            stringBuilder.AppendLine("     , a.지역명 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine(" from N_지역코드 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.지역코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_계정코드_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.계정코드 ");
            stringBuilder.AppendLine("     , a.계정명 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine(" from N_계정코드 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.계정코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_직위코드_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.직위코드 ");
            stringBuilder.AppendLine("     , a.직위명 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine(" from N_직위코드 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.직위코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_담당사원_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine("     , c.사용자ID ");
            stringBuilder.AppendLine("     , c.비밀번호 ");
            stringBuilder.AppendLine("     , d.직위명 ");
            stringBuilder.AppendLine("     , e.창고명 ");
            stringBuilder.AppendLine("     , b.부서명 ");
            stringBuilder.AppendLine("     , b.사업자번호 as 개인사업자번호 ");
            stringBuilder.AppendLine("     , b.대표자명 as 사업대표자명 ");
            stringBuilder.AppendLine("     , b.상호명 as 사업상호명 ");
            stringBuilder.AppendLine("     , b.업태 as 사업업태 ");
            stringBuilder.AppendLine("     , b.종목 as 사업종목 ");
            stringBuilder.AppendLine("     , b.우편번호 as 사업우편번호 ");
            stringBuilder.AppendLine("     , b.지역명 as 사업지역명 ");
            stringBuilder.AppendLine("     , b.상세주소 as 사업상세주소 ");
            stringBuilder.AppendLine("     , b.전화번호 as 사업전화번호 ");
            stringBuilder.AppendLine("     , b.담당자이메일 as 사업이메일 ");
            stringBuilder.AppendLine("     , b.담당자연락처 as 사업연락처 ");
            stringBuilder.AppendLine(" from N_사원코드 a   ");
            stringBuilder.AppendLine("     left outer join N_부서코드 b on b.부서코드 = a.부서코드 ");
            stringBuilder.AppendLine("     left outer join N_사용자코드 c on c.사원코드 = a.사원코드 ");
            stringBuilder.AppendLine("     left outer join N_직위코드 d on d.직위코드 = a.직위코드 ");
            stringBuilder.AppendLine("     left outer join N_창고코드 e on e.창고코드 = a.창고코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.사원코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_거래처_List(string condition, string sDay, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , c.사원명 ");
            stringBuilder.AppendLine("     , isnull(a.현잔고, 0) - isnull(op2.매출금액_이후, 0) + isnull(su2.수금합계_이후, 0) as 마감잔고 ");
            stringBuilder.AppendLine(" from N_거래처코드 a   ");
            stringBuilder.AppendLine("     left outer join N_사원코드 c on c.사원코드 = a.담당자코드 ");
            stringBuilder.AppendLine("     left outer join (select 매출처코드 ");
            stringBuilder.AppendLine("                         , SUM(공급가액) as 공급가액_이후 ");
            stringBuilder.AppendLine("                         , SUM(부가세) as 부가세_이후 ");
            stringBuilder.AppendLine("                         , SUM(금액) as 매출금액_이후 ");
            stringBuilder.AppendLine("                     from N_출고등록 ");
            stringBuilder.AppendLine("                     where 출고일자 > '" + sDay + "' ");
            stringBuilder.AppendLine("                     group by 매출처코드 ");
            stringBuilder.AppendLine("                     ) op2 on op2.매출처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join (select 매출처코드 ");
            stringBuilder.AppendLine("                         , SUM(수금액) as 수금액_이후 ");
            stringBuilder.AppendLine("                         , SUM(할인액) as 할인액_이후 ");
            stringBuilder.AppendLine("                         , SUM(수금액) + SUM(할인액) as 수금합계_이후 ");
            stringBuilder.AppendLine("                     from N_수금등록 ");
            stringBuilder.AppendLine("                     where 수금일자 > '" + sDay + "' ");
            stringBuilder.AppendLine("                     group by 매출처코드 ");
            stringBuilder.AppendLine("                     ) su2 on su2.매출처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where 거래처구분 = '1' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" union all ");
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , c.사원명 ");
            stringBuilder.AppendLine("     , isnull(a.현잔고, 0) - isnull(ip2.매입금액_이후, 0) + isnull(gg2.지급합계_이후, 0) as 마감잔고 ");
            stringBuilder.AppendLine(" from N_거래처코드 a   ");
            stringBuilder.AppendLine("     left outer join N_사원코드 c on c.사원코드 = a.담당자코드 ");
            stringBuilder.AppendLine("     left outer join (select 매입처코드 ");
            stringBuilder.AppendLine("                         , SUM(공급가액) as 공급가액_이후 ");
            stringBuilder.AppendLine("                         , SUM(부가세) as 부가세_이후 ");
            stringBuilder.AppendLine("                         , SUM(금액) as 매입금액_이후 ");
            stringBuilder.AppendLine("                     from N_입고등록 ");
            stringBuilder.AppendLine("                     where 입고일자 > '" + sDay + "' ");
            stringBuilder.AppendLine("                     group by 매입처코드 ");
            stringBuilder.AppendLine("                     ) ip2 on ip2.매입처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join (select 매입처코드 ");
            stringBuilder.AppendLine("                         , SUM(지급액) as 지급액_이후 ");
            stringBuilder.AppendLine("                         , SUM(할인액) as 할인액_이후 ");
            stringBuilder.AppendLine("                         , SUM(지급액) + SUM(할인액) as 지급합계_이후 ");
            stringBuilder.AppendLine("                     from N_지급등록 ");
            stringBuilder.AppendLine("                     where 지급일자 > '" + sDay + "' ");
            stringBuilder.AppendLine("                     group by 매입처코드 ");
            stringBuilder.AppendLine("                     ) gg2 on gg2.매입처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where 거래처구분 = '2' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" ) a ");
            stringBuilder.AppendLine(" order by a.거래처구분 asc, a.거래처코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_상품_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine(" from N_제품코드 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.제품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_매출_Count(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select count(*) as CNT ");
            stringBuilder.AppendLine(" from N_출고등록 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_매출_List(string sTop, string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select " + (sTop == "" ? "" : " top " + sTop) + " a.* ");
            stringBuilder.AppendLine("     , d.부가세구분 ");
            stringBuilder.AppendLine("     , p.제품명 ");
            stringBuilder.AppendLine("     , p.규격 ");
            stringBuilder.AppendLine("     , p.면세품유무 ");
            stringBuilder.AppendLine("     , p.입수수량 ");
            stringBuilder.AppendLine("     , p.환산수량 ");
            stringBuilder.AppendLine("     , p.낱개환산수량 ");
            stringBuilder.AppendLine("     , p.입고단가 ");
            stringBuilder.AppendLine("     , p.박스구분 ");
            stringBuilder.AppendLine("     , w.창고코드 as 창고코드2 ");
            stringBuilder.AppendLine(" from N_출고등록 a   ");
            stringBuilder.AppendLine("     inner join N_거래처코드 d on d.거래처코드 = a.매출처코드 and d.거래처구분 = '1' ");
            stringBuilder.AppendLine("     inner join N_제품코드 p on p.제품코드 = a.제품코드 ");
            stringBuilder.AppendLine("     left outer join N_창고코드 w on w.창고코드 = a.창고코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.출고일자 asc, a.출고번호 asc, a.제품순서 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_매출_거래처누락_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.매출처코드 ");
            stringBuilder.AppendLine("     , max(a.거래처명) as 거래처명 ");
            stringBuilder.AppendLine("     , max(a.대표자명) as 대표자명 ");
            stringBuilder.AppendLine(" from N_출고등록 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("     and a.매출처코드 not in (select 거래처코드 from N_거래처코드 where 거래처구분 = '1') ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" group by a.매출처코드 ");
            stringBuilder.AppendLine(" order by a.매출처코드 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_매출_상품누락_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.제품코드 ");
            stringBuilder.AppendLine("     , min(a.출고일자) as 최고출고일자 ");
            stringBuilder.AppendLine("     , max(a.출고일자) as 최근출고일자 ");
            stringBuilder.AppendLine("     , min(a.단가) as 최저단가 ");
            stringBuilder.AppendLine("     , max(a.단가) as 최고단가 ");
            stringBuilder.AppendLine(" from N_출고등록 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("     and a.제품코드 not in (select 제품코드 from N_제품코드 where 1=1) ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" group by a.제품코드 ");
            stringBuilder.AppendLine(" order by a.제품코드 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_매입_Count(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select count(*) as CNT ");
            stringBuilder.AppendLine(" from N_입고등록 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_매입_List(string sTop, string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select " + (sTop == "" ? "" : " top " + sTop) + " a.* ");
            stringBuilder.AppendLine("     , d.부가세구분 ");
            stringBuilder.AppendLine("     , p.제품명 ");
            stringBuilder.AppendLine("     , p.규격 ");
            stringBuilder.AppendLine("     , p.면세품유무 ");
            stringBuilder.AppendLine("     , p.입수수량 ");
            stringBuilder.AppendLine("     , p.환산수량 ");
            stringBuilder.AppendLine("     , p.낱개환산수량 ");
            stringBuilder.AppendLine("     , p.입고단가 ");
            stringBuilder.AppendLine("     , p.박스구분 ");
            stringBuilder.AppendLine("     , w.창고코드 as 창고코드2 ");
            stringBuilder.AppendLine(" from N_입고등록 a   ");
            stringBuilder.AppendLine("     inner join N_거래처코드 d on d.거래처코드 = a.매입처코드 and d.거래처구분 = '2' ");
            stringBuilder.AppendLine("     inner join N_제품코드 p on p.제품코드 = a.제품코드 ");
            stringBuilder.AppendLine("     left outer join N_창고코드 w on w.창고코드 = a.창고코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.입고일자 asc, a.입고번호 asc, a.제품순서 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_매입_거래처누락_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.매입처코드 ");
            stringBuilder.AppendLine("     , max(a.거래처명) as 거래처명 ");
            stringBuilder.AppendLine("     , max(a.대표자명) as 대표자명 ");
            stringBuilder.AppendLine(" from N_입고등록 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("     and a.매입처코드 not in (select 거래처코드 from N_거래처코드 where 거래처구분 = '2') ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" group by a.매입처코드 ");
            stringBuilder.AppendLine(" order by a.매입처코드 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_매입_상품누락_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.제품코드 ");
            stringBuilder.AppendLine("     , min(a.입고일자) as 최고입고일자 ");
            stringBuilder.AppendLine("     , max(a.입고일자) as 최근입고일자 ");
            stringBuilder.AppendLine("     , min(a.단가) as 최저단가 ");
            stringBuilder.AppendLine("     , max(a.단가) as 최고단가 ");
            stringBuilder.AppendLine(" from N_입고등록 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("     and a.제품코드 not in (select 제품코드 from N_제품코드 where 1=1) ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" group by a.제품코드 ");
            stringBuilder.AppendLine(" order by a.제품코드 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_수금_Count(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select count(*) as CNT ");
            stringBuilder.AppendLine(" from N_수금등록 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_수금_List(string sTop, string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select " + (sTop == "" ? "" : " top " + sTop) + " a.* ");
            stringBuilder.AppendLine("     , a.수금액 + a.할인액 as 합계금액2 ");
            stringBuilder.AppendLine(" from N_수금등록 a   ");
            stringBuilder.AppendLine("     inner join N_거래처코드 d on d.거래처코드 = a.매출처코드 and d.거래처구분 = '1' ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.수금일자 asc, a.수금번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_수금_거래처누락_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.매출처코드 ");
            stringBuilder.AppendLine("     , max(a.거래처명) as 거래처명 ");
            stringBuilder.AppendLine("     , max(a.대표자명) as 대표자명 ");
            stringBuilder.AppendLine(" from N_수금등록 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("     and a.매출처코드 not in (select 거래처코드 from N_거래처코드 where 거래처구분 = '1') ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" group by a.매출처코드 ");
            stringBuilder.AppendLine(" order by a.매출처코드 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_지급_Count(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select count(*) as CNT ");
            stringBuilder.AppendLine(" from N_지급등록 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_지급_List(string sTop, string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select " + (sTop == "" ? "" : " top " + sTop) + " a.* ");
            stringBuilder.AppendLine("     , a.지급액 + a.할인액 as 합계금액2 ");
            stringBuilder.AppendLine(" from N_지급등록 a   ");
            stringBuilder.AppendLine("     inner join N_거래처코드 d on d.거래처코드 = a.매입처코드 and d.거래처구분 = '2' ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.지급일자 asc, a.지급번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 구장터_지급_거래처누락_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.매입처코드 ");
            stringBuilder.AppendLine("     , max(a.거래처명) as 거래처명 ");
            stringBuilder.AppendLine("     , max(a.대표자명) as 대표자명 ");
            stringBuilder.AppendLine(" from N_지급등록 a   ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("     and a.매입처코드 not in (select 거래처코드 from N_거래처코드 where 거래처구분 = '2') ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" group by a.매입처코드 ");
            stringBuilder.AppendLine(" order by a.매입처코드 ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 신장터_거래처_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine(" from T_거래처정보 a ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("     and a.지점코드 = '0' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.거래처코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable 신장터_상품_List(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.*           ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("     and a.지점코드 = '0' ");
            stringBuilder.AppendLine(" " + condition + "   ");
            stringBuilder.AppendLine(" order by a.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품수량별단가_List(string sProd, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select isnull(a.까지수량, 0) as 까지수량 ");
            stringBuilder.AppendLine("     , isnull(a.단가, 0) as 단가 ");
            stringBuilder.AppendLine("     , isnull(a.이익율, 0) as 이익율 ");
            stringBuilder.AppendLine("     , isnull(a.중상단가, 0) as 중상단가 ");
            stringBuilder.AppendLine("     , isnull(a.중상이익율, 0) as 중상이익율 ");
            stringBuilder.AppendLine(" from T_상품수량별단가 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 = @상품코드 ");
            stringBuilder.AppendLine(" order by isnull(a.까지수량, 0) asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@상품코드", (object)sProd);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_상품수량별단가_Detail(string sKey, string sProd, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select isnull(a.까지수량, 0) as 까지수량 ");
            stringBuilder.AppendLine("     , isnull(a.단가, 0) as 단가 ");
            stringBuilder.AppendLine("     , isnull(a.이익율, 0) as 이익율 ");
            stringBuilder.AppendLine("     , isnull(a.중상단가, 0) as 중상단가 ");
            stringBuilder.AppendLine("     , isnull(a.중상이익율, 0) as 중상이익율 ");
            stringBuilder.AppendLine(" from T_상품수량별단가 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.상품코드 = @상품코드 ");
            stringBuilder.AppendLine("     and a.까지수량 = @까지수량 ");
            stringBuilder.AppendLine(" order by isnull(a.까지수량, 0) asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@상품코드", (object)sProd);
            sCommand.Parameters.AddWithValue("@까지수량", (object)Decimal.Parse(sKey.Replace(",", "")).ToString());
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_상품_매출_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine("     , d.거래처명 ");
            stringBuilder.AppendLine("     , d.사원번호 ");
            stringBuilder.AppendLine("     , f.사용자명 ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(b.총수량, b.사업자번호, b.지점코드, b.상품코드) as 박스표시 ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine(" from T_매출 a ");
            stringBuilder.AppendLine("     inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("     left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("     left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("     left outer join T_상품정보 g on g.사업자번호 = b.사업자번호 and g.지점코드 = b.지점코드 and g.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매출일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and b.상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine(" order by a.매출일자 desc, a.등록일시 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_상품_매입_List(
          string sDay1,
          string sDay2,
          string sCust,
          string sProd,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("select a.* ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine("     , d.거래처명 ");
            stringBuilder.AppendLine("     , d.사원번호 ");
            stringBuilder.AppendLine("     , f.사용자명 ");
            stringBuilder.AppendLine("     , e.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , n.사용자명 as 등록사원명 ");
            stringBuilder.AppendLine("     , dbo.Func_박스수량환산(b.총수량, b.사업자번호, b.지점코드, b.상품코드) as 박스표시 ");
            stringBuilder.AppendLine("     , g.입수수량    ");
            stringBuilder.AppendLine("     , g.중간입수수량 ");
            stringBuilder.AppendLine(" from T_매입 a ");
            stringBuilder.AppendLine("     inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 d on d.사업자번호 = a.사업자번호 and d.지점코드 = a.지점코드 and d.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join T_사용자정보 f on f.사업자번호 = d.사업자번호 and f.지점코드 = d.지점코드 and f.사원번호 = d.사원번호 ");
            stringBuilder.AppendLine("     left outer join T_사용자정보 n on n.사업자번호 = a.사업자번호 and n.지점코드 = a.지점코드 and n.사원번호 = a.등록사원번호 ");
            stringBuilder.AppendLine("     left outer join P_창고 e on e.사업자번호 = a.사업자번호 and e.지점코드 = a.지점코드 and e.코드 = a.창고코드 ");
            stringBuilder.AppendLine("     left outer join T_상품정보 g on g.사업자번호 = b.사업자번호 and g.지점코드 = b.지점코드 and g.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 >= '" + sDay1 + "' ");
            stringBuilder.AppendLine("     and a.매입일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("     and a.거래처코드 = '" + sCust + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("     and b.상품코드 = '" + sProd + "' ");
            stringBuilder.AppendLine(" order by a.매입일자 desc, a.등록일시 desc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fnc_거래처별_잔고현황(
          string sDay1,
          string sDay2,
          string sInOut,
          string sSumGB,
          bool bNotZero,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          bool bRanking,
          bool bDataYes,
          string sSaup,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_getSum_거래처별잔고(sDay1, sDay2, sInOut, sSumGB, bNotZero, sCust, sDept, sMan, sType, bDataYes, sSaup));
            stringBuilder.AppendLine(" select x.* ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     1 as 정렬순서");
            stringBuilder.AppendLine("     , z.사원번호");
            stringBuilder.AppendLine("     , z.담당사원명");
            stringBuilder.AppendLine("     , z.거래처코드");
            stringBuilder.AppendLine("     , z.거래처명");
            stringBuilder.AppendLine("     , z.현재잔고 ");
            stringBuilder.AppendLine("     , z.현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp거래처별잔고 ");
            stringBuilder.AppendLine(") z ");
            stringBuilder.AppendLine(" ) x ");
            stringBuilder.AppendLine(" order by x.거래처코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        private string get_getSum_거래처별잔고(
          string sDay1,
          string sDay2,
          string sInOut,
          string sSumGB,
          bool bNotZero,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          bool bDataYes,
          string sSaup)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" " + this.get_get_거래처별잔고(sDay1, sDay2, sInOut, sSumGB, sCust, sDept, sMan, sType, bDataYes, sSaup));
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     zz.사원번호");
            stringBuilder.AppendLine("     , max(u.사용자명) as 담당사원명");
            if (sSumGB == "0")
            {
                stringBuilder.AppendLine("     , '' as 거래처코드");
                stringBuilder.AppendLine("     , '' as 거래처명");
                stringBuilder.AppendLine("     , 0 as 현재잔고");
            }
            else
            {
                stringBuilder.AppendLine("     , zz.거래처코드");
                stringBuilder.AppendLine("     , max(c.거래처명) as 거래처명");
                stringBuilder.AppendLine("     , max(c.현재잔고) as 현재잔고");
            }
            stringBuilder.AppendLine("     , sum(zz.현잔고) as 현잔고 ");
            stringBuilder.AppendLine(" into #Tmp거래처별잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select * from #Tmp현잔고 ");
            stringBuilder.AppendLine(" ) zz ");
            stringBuilder.AppendLine("     inner join T_사용자정보 u on u.사업자번호 = '" + sSaup + "' and u.지점코드 = '0' and u.사원번호 = zz.사원번호 ");
            stringBuilder.AppendLine("     inner join T_거래처정보 c on c.사업자번호 = '" + sSaup + "' and c.지점코드 = '0' and c.거래처코드 = zz.거래처코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            if (sSumGB == "0")
                stringBuilder.AppendLine(" group by zz.사원번호 ");
            else
                stringBuilder.AppendLine(" group by zz.사원번호,  zz.거래처코드 ");
            if (bNotZero)
                stringBuilder.AppendLine(" having sum(zz.현잔고) <> 0 ");
            return stringBuilder.ToString();
        }

        private string get_get_거래처별잔고(
          string sDay1,
          string sDay2,
          string sInOut,
          string sSumGB,
          string sCust,
          string sDept,
          string sMan,
          string sType,
          bool bDataYes,
          string sSaup)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매출구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매출 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매출현재 ");
            stringBuilder.AppendLine(" \t\t    from T_매출 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '0' ");
            stringBuilder.AppendLine("                 and a.매출일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum( (case when b.매입구분 in ('1', '2') then 1 else -1 end) *  ");
            stringBuilder.AppendLine(" \t\t\t\t    (case when b.과세구분 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t    else  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    (case when a.부가세코드 = '1' or a.부가세코드 = '2' then isnull(b.금액, 0)  ");
            stringBuilder.AppendLine(" \t\t\t\t\t    else isnull(b.금액, 0) + round(isnull(b.금액, 0) * 0.1, 0) end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    end)  ");
            stringBuilder.AppendLine(" \t\t\t\t    ) as 현매입 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp매입현재 ");
            stringBuilder.AppendLine(" \t\t    from T_매입 a ");
            stringBuilder.AppendLine(" \t\t\t    inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '0' ");
            stringBuilder.AppendLine("                 and a.매입일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 현수금합계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp수금현재 ");
            stringBuilder.AppendLine(" \t\t    from T_수금 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '0' ");
            stringBuilder.AppendLine("                 and a.수금일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine(" \t\t\t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t\t\t    , sum(합계금액) as 현지급합계 ");
            stringBuilder.AppendLine(" \t\t    into #Tmp지급현재 ");
            stringBuilder.AppendLine(" \t\t    from T_지급 a ");
            stringBuilder.AppendLine("             where a.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine("                 and a.지점코드 = '0' ");
            stringBuilder.AppendLine("                 and a.지급일자 <= '" + sDay2 + "' ");
            if (sCust != "")
                stringBuilder.AppendLine("                 and a.거래처코드 = '" + sCust + "' ");
            stringBuilder.AppendLine(" \t\t    group by a.사업자번호, a.거래처코드 ");
            stringBuilder.AppendLine(" select ");
            stringBuilder.AppendLine("     x.사원번호 ");
            stringBuilder.AppendLine("     , x.거래처코드 ");
            stringBuilder.AppendLine("     , 0 as 전일잔고 ");
            stringBuilder.AppendLine("     , sum(x.현잔고) as 현잔고 ");
            stringBuilder.AppendLine("     , 0 as 기간매출 ");
            stringBuilder.AppendLine("     , 0 as 기간매출공급가 ");
            stringBuilder.AppendLine("     , 0 as 기간매출서비스박스 ");
            stringBuilder.AppendLine("     , 0 as 기간매출서비스낱개 ");
            stringBuilder.AppendLine("     , 0 as 기간입고단가계박스 ");
            stringBuilder.AppendLine("     , 0 as 기간입고단가계낱개 ");
            stringBuilder.AppendLine("     , 0 as 기간현금금액 ");
            stringBuilder.AppendLine("     , 0 as 기간무통장금액 ");
            stringBuilder.AppendLine("     , 0 as 기간카드금액 ");
            stringBuilder.AppendLine("     , 0 as 기간어음금액 ");
            stringBuilder.AppendLine("     , 0 as 기간수금 ");
            stringBuilder.AppendLine("     , 0 as 기간수금할인 ");
            stringBuilder.AppendLine("     , 0 as 기간수금합계 ");
            stringBuilder.AppendLine("     , 0 as 기간매입 ");
            stringBuilder.AppendLine("     , 0 as 기간지급 ");
            stringBuilder.AppendLine("     , 0 as 기간지급할인 ");
            stringBuilder.AppendLine("     , 0 as 기간지급합계 ");
            stringBuilder.AppendLine(" into #Tmp현잔고 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine("     select a.사업자번호 ");
            stringBuilder.AppendLine(" \t    , a.거래처코드 ");
            stringBuilder.AppendLine(" \t    , a.사원번호 ");
            stringBuilder.AppendLine(" \t    , a.초기잔고 ");
            stringBuilder.AppendLine(" \t    , isnull(k.현매출, 0) as 현매출 ");
            stringBuilder.AppendLine(" \t    , isnull(h.현매입, 0) as 현매입 ");
            stringBuilder.AppendLine(" \t    , isnull(m.현수금합계, 0) as 현수금합계 ");
            stringBuilder.AppendLine(" \t    , isnull(p.현지급합계, 0) as 현지급합계 ");
            if (sInOut == "0")
                stringBuilder.AppendLine(" \t    , isnull(a.초기잔고, 0) + isnull(k.현매출, 0) - isnull(m.현수금합계, 0) - isnull(h.현매입, 0) + isnull(p.현지급합계, 0) as 현잔고 ");
            else
                stringBuilder.AppendLine(" \t    , isnull(a.초기잔고, 0) - isnull(k.현매출, 0) + isnull(m.현수금합계, 0) + isnull(h.현매입, 0) - isnull(p.현지급합계, 0) as 현잔고 ");
            stringBuilder.AppendLine("     from T_거래처정보 a ");
            stringBuilder.AppendLine("         inner join T_사용자정보 u on u.사업자번호 = '" + sSaup + "' and u.지점코드 = a.지점코드 and u.사원번호 = a.사원번호 ");
            if (sMan != "")
                stringBuilder.AppendLine("             and u.사원번호 = '" + sMan + "' ");
            if (sDept != "")
                stringBuilder.AppendLine("             and u.부서코드 = '" + sDept + "' ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp매출현재 k on k.사업자번호 = a.사업자번호 and k.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp매입현재 h on h.사업자번호 = a.사업자번호 and h.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp수금현재 m on m.사업자번호 = a.사업자번호 and m.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" \t    left outer join #Tmp지급현재 p on p.사업자번호 = a.사업자번호 and p.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     where a.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine("         and a.지점코드 = '0' ");
            if (sType != "")
                stringBuilder.AppendLine(" \t    and a.유형코드 = '" + sType + "' ");
            if (sCust != "")
                stringBuilder.AppendLine(" \t    and a.거래처코드 = '" + sCust + "' ");
            if (sInOut == "0")
                stringBuilder.AppendLine(" \t    and a.거래처구분 in ('1', '3') ");
            else
                stringBuilder.AppendLine(" \t    and a.거래처구분 = '2' ");
            stringBuilder.AppendLine("     ) x ");
            stringBuilder.AppendLine(" group by x.사원번호, x.거래처코드 ");
            return stringBuilder.ToString();
        }

        public DataTable fnc_창고별재고현황(
          string sDay1,
          string sDay2,
          string sWare,
          string sProd,
          string sFact,
          string sType,
          bool bOrder,
          bool bNoZero,
          string sSaup,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("\tselect a.창고코드 ");
            stringBuilder.AppendLine("\t\t, a.상품코드 ");
            stringBuilder.AppendLine("\t\t, sum(a.전일매입_총수량)\t\t\tas 전일매입_총수량 ");
            stringBuilder.AppendLine("\t\t, sum(a.전일매입_서비스총수량)\t\tas 전일매입_서비스총수량 ");
            stringBuilder.AppendLine("\t\t, sum(a.전일매출_총수량)\t\t\tas 전일매출_총수량 ");
            stringBuilder.AppendLine("\t\t, sum(a.전일매출_서비스총수량)\t\tas 전일매출_서비스총수량 ");
            stringBuilder.AppendLine(" into #Tmp매입매출계_전일_창고상품 ");
            stringBuilder.AppendLine("\tfrom ( ");
            stringBuilder.AppendLine("\t\tselect x.창고코드 ");
            stringBuilder.AppendLine("\t\t\t, y.상품코드 ");
            stringBuilder.AppendLine("\t\t\t, sum((case when y.매입구분 = '1' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매입구분 = '2' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매입구분 = '3' then -1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매입구분 = '4' then -1  ");
            stringBuilder.AppendLine("\t\t\t\t\telse 0 end) * y.총수량) as 전일매입_총수량 ");
            stringBuilder.AppendLine("\t\t\t, sum((case when y.매입구분 = '1' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매입구분 = '2' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매입구분 = '3' then -1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매입구분 = '4' then -1  ");
            stringBuilder.AppendLine("\t\t\t\t\telse 0 end) * y.서비스총수량) as 전일매입_서비스총수량 ");
            stringBuilder.AppendLine("\t\t\t, 0 as 전일매출_총수량 ");
            stringBuilder.AppendLine("\t\t\t, 0 as 전일매출_서비스총수량 ");
            stringBuilder.AppendLine("\t\tfrom T_매입 x ");
            stringBuilder.AppendLine("\t\t\tinner join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\twhere x.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine("\t\t\tand x.지점코드 = '0' ");
            stringBuilder.AppendLine("\t\t\tand x.매입일자 < @p_day1 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\tgroup by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\tunion all ");
            stringBuilder.AppendLine("\t\tselect x.창고코드 ");
            stringBuilder.AppendLine("\t\t\t, y.상품코드 ");
            stringBuilder.AppendLine("\t\t\t, 0 as 전일매입_총수량 ");
            stringBuilder.AppendLine("\t\t\t, 0 as 전일매입_서비스총수량 ");
            stringBuilder.AppendLine("\t\t\t, sum((case when y.매출구분 = '1' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매출구분 = '2' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매출구분 = '3' then -1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine("\t\t\t\t\telse 0 end) * y.총수량) as 전일매출_총수량 ");
            stringBuilder.AppendLine("\t\t\t, sum((case when y.매출구분 = '1' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매출구분 = '2' then 1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매출구분 = '3' then -1  ");
            stringBuilder.AppendLine("\t\t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine("\t\t\t\t\telse 0 end) * y.서비스총수량) as 전일매출_서비스총수량 ");
            stringBuilder.AppendLine("\t\tfrom T_매출 x ");
            stringBuilder.AppendLine("\t\t\tinner join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\twhere x.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine("\t\t\tand x.지점코드 = '0' ");
            stringBuilder.AppendLine("\t\t\tand x.매출일자 < @p_day1 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine("\t\tgroup by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t) a ");
            stringBuilder.AppendLine("\tgroup by a.창고코드, a.상품코드 ");
            stringBuilder.AppendLine(" select a.창고코드 ");
            stringBuilder.AppendLine(" \t, a.상품코드 ");
            stringBuilder.AppendLine(" \t, sum(a.전일_입고량) as 전일_입고량 ");
            stringBuilder.AppendLine(" \t, sum(a.전일_출고량) as 전일_출고량 ");
            stringBuilder.AppendLine(" into #Tmp창고이동계_전일_창고상품 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" \tselect x.입고창고코드 as 창고코드 ");
            stringBuilder.AppendLine(" \t\t, y.상품코드 ");
            stringBuilder.AppendLine(" \t\t, sum(y.총수량) as 전일_입고량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 전일_출고량 ");
            stringBuilder.AppendLine(" \tfrom T_창고이동 x ");
            stringBuilder.AppendLine(" \t\tinner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine(" \twhere x.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine(" \t\tand x.지점코드 = '0' ");
            stringBuilder.AppendLine(" \t\tand x.수불일자 < @p_day1 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.입고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \tgroup by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" \tunion all ");
            stringBuilder.AppendLine(" \tselect x.출고창고코드 as 창고코드 ");
            stringBuilder.AppendLine(" \t\t, y.상품코드 ");
            stringBuilder.AppendLine(" \t\t, 0 as 전일_입고량 ");
            stringBuilder.AppendLine(" \t\t, sum(y.총수량) as 전일_출고량 ");
            stringBuilder.AppendLine(" \tfrom T_창고이동 x ");
            stringBuilder.AppendLine(" \t\tinner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine(" \twhere x.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine(" \t\tand x.지점코드 = '0' ");
            stringBuilder.AppendLine(" \t\tand x.수불일자 < @p_day1 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.출고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \tgroup by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" ) a ");
            stringBuilder.AppendLine(" group by a.창고코드, a.상품코드 ");
            stringBuilder.AppendLine(" select a.창고코드 ");
            stringBuilder.AppendLine(" \t, a.상품코드 ");
            stringBuilder.AppendLine(" \t, sum(a.기간매입_총수량)\t\t\tas 기간매입_총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간매입_서비스총수량)\t\tas 기간매입_서비스총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간매출_총수량)\t\t\tas 기간매출_총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간매출_서비스총수량)\t\tas 기간매출_서비스총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간판매_총수량)\t\t\tas 기간판매_총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간판매_서비스총수량)\t\tas 기간판매_서비스총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간정상반품_총수량)\t\tas 기간정상반품_총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간정상반품_서비스총수량)\tas 기간정상반품_서비스총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간불량반품_총수량)\t\tas 기간불량반품_총수량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간불량반품_서비스총수량)\tas 기간불량반품_서비스총수량 ");
            stringBuilder.AppendLine(" into #Tmp매입매출계_기간_창고상품 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" \tselect x.창고코드 ");
            stringBuilder.AppendLine(" \t\t, y.상품코드 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매입구분 = '1' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매입구분 = '2' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매입구분 = '3' then -1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매입구분 = '4' then -1  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.총수량) as 기간매입_총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매입구분 = '1' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매입구분 = '2' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매입구분 = '3' then -1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매입구분 = '4' then -1  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.서비스총수량) as 기간매입_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간매출_총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간매출_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간판매_총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간판매_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간정상반품_총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간정상반품_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간불량반품_총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간불량반품_서비스총수량 ");
            stringBuilder.AppendLine(" \tfrom T_매입 x ");
            stringBuilder.AppendLine(" \t\tinner join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine(" \twhere x.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine(" \t\tand x.지점코드 = '0' ");
            stringBuilder.AppendLine(" \t\tand x.매입일자 >= @p_day1 ");
            stringBuilder.AppendLine(" \t\tand x.매입일자 <= @p_day2 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \tgroup by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" \tunion all ");
            stringBuilder.AppendLine(" \tselect x.창고코드 ");
            stringBuilder.AppendLine(" \t\t, y.상품코드 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간매입_총수량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간매입_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then -1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.총수량) as 기간매출_총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then -1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.서비스총수량) as 기간매출_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.총수량) as 기간판매_총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.서비스총수량) as 기간판매_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.총수량) as 기간정상반품_총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.서비스총수량) as 기간정상반품_서비스총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.총수량) as 기간불량반품_총수량 ");
            stringBuilder.AppendLine(" \t\t, sum((case when y.매출구분 = '1' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '2' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '3' then 0  ");
            stringBuilder.AppendLine(" \t\t\t\twhen y.매출구분 = '4' then 1  ");
            stringBuilder.AppendLine(" \t\t\t\telse 0 end) * y.서비스총수량) as 기간불량반품_서비스총수량 ");
            stringBuilder.AppendLine(" \tfrom T_매출 x ");
            stringBuilder.AppendLine(" \t\tinner join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine(" \twhere x.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine(" \t\tand x.지점코드 = '0' ");
            stringBuilder.AppendLine(" \t\tand x.매출일자 >= @p_day1 ");
            stringBuilder.AppendLine(" \t\tand x.매출일자 <= @p_day2 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \tgroup by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" ) a ");
            stringBuilder.AppendLine(" group by a.창고코드, a.상품코드 ");
            stringBuilder.AppendLine(" select a.창고코드 ");
            stringBuilder.AppendLine(" \t, a.상품코드 ");
            stringBuilder.AppendLine(" \t, sum(a.기간_입고량) as 기간_입고량 ");
            stringBuilder.AppendLine(" \t, sum(a.기간_출고량) as 기간_출고량 ");
            stringBuilder.AppendLine(" into #Tmp창고이동계_기간_창고상품 ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" \tselect x.입고창고코드 as 창고코드 ");
            stringBuilder.AppendLine(" \t\t, y.상품코드 ");
            stringBuilder.AppendLine(" \t\t, sum(y.총수량) as 기간_입고량 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간_출고량 ");
            stringBuilder.AppendLine(" \tfrom T_창고이동 x ");
            stringBuilder.AppendLine(" \t\tinner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine(" \twhere x.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine(" \t\tand x.지점코드 = '0' ");
            stringBuilder.AppendLine(" \t\tand x.수불일자 >= @p_day1 ");
            stringBuilder.AppendLine(" \t\tand x.수불일자 <= @p_day2 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.입고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \tgroup by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" \tunion all ");
            stringBuilder.AppendLine(" \tselect x.출고창고코드 ");
            stringBuilder.AppendLine(" \t\t, y.상품코드 ");
            stringBuilder.AppendLine(" \t\t, 0 as 기간_입고량 ");
            stringBuilder.AppendLine(" \t\t, sum(y.총수량) as 기간_출고량 ");
            stringBuilder.AppendLine(" \tfrom T_창고이동 x ");
            stringBuilder.AppendLine(" \t\tinner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine(" \twhere x.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine(" \t\tand x.지점코드 = '0' ");
            stringBuilder.AppendLine(" \t\tand x.수불일자 >= @p_day1 ");
            stringBuilder.AppendLine(" \t\tand x.수불일자 <= @p_day2 ");
            if (sWare != "")
                stringBuilder.AppendLine(" \t\tand x.출고창고코드 = '" + sWare + "' ");
            stringBuilder.AppendLine(" \tgroup by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" ) a ");
            stringBuilder.AppendLine(" group by a.창고코드, a.상품코드 ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("     a.*  ");
            stringBuilder.AppendLine(" from ( ");
            stringBuilder.AppendLine(" select  ");
            stringBuilder.AppendLine("\t    a.코드 as 창고코드 ");
            stringBuilder.AppendLine("\t    , a.명칭 as 창고명 ");
            stringBuilder.AppendLine("\t    , b.정렬순서 ");
            stringBuilder.AppendLine("\t    , b.상품코드 ");
            stringBuilder.AppendLine("\t    , b.상품명 ");
            stringBuilder.AppendLine("\t    , b.규격 ");
            stringBuilder.AppendLine("\t    , b.상품유형코드 ");
            stringBuilder.AppendLine("\t    , b.제조사코드 ");
            stringBuilder.AppendLine("\t    , c.명칭 as 유형명 ");
            stringBuilder.AppendLine("\t    , d.명칭 as 제조사명 ");
            stringBuilder.AppendLine("\t    , convert(numeric(18,2), isnull(e.초기재고, 0) + isnull(q.전일매입_총수량, 0) + isnull(q.전일매입_서비스총수량, 0) ");
            stringBuilder.AppendLine("\t        - isnull(q.전일매출_총수량, 0) - isnull(q.전일매출_서비스총수량, 0) ");
            stringBuilder.AppendLine("\t        + isnull(s.전일_입고량, 0) - isnull(s.전일_출고량, 0) ");
            stringBuilder.AppendLine("\t        + isnull(qq.기간매입_총수량, 0) + isnull(qq.기간매입_서비스총수량, 0) + isnull(ss.기간_입고량, 0) ");
            stringBuilder.AppendLine("\t        - isnull(qq.기간매출_총수량, 0) - isnull(qq.기간매출_서비스총수량, 0) - isnull(ss.기간_출고량, 0) ) as 현재고 ");
            stringBuilder.AppendLine("\t    , isnull(e.현재재고, 0) as 현재재고 ");
            stringBuilder.AppendLine(" from P_창고 a ");
            stringBuilder.AppendLine("\t    left outer join T_상품정보 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and isnull(b.사용여부, '0') <> '2' ");
            stringBuilder.AppendLine("\t    left outer join P_상품유형 c on c.사업자번호 = b.사업자번호 and c.지점코드 = '0' and c.코드 = b.상품유형코드 ");
            stringBuilder.AppendLine("\t    left outer join P_제조사 d on d.사업자번호 = b.사업자번호 and d.지점코드 = '0' and d.코드 = b.제조사코드 ");
            stringBuilder.AppendLine("\t    left outer join T_상품창고별재고 e on e.사업자번호 = b.사업자번호 and e.지점코드 = b.지점코드 and e.상품코드 = b.상품코드 and e.창고코드 = a.코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp매입매출계_전일_창고상품 q on q.창고코드 = a.코드 and q.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp창고이동계_전일_창고상품 s on s.창고코드 = a.코드 and s.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp매입매출계_기간_창고상품 qq on qq.창고코드 = a.코드 and qq.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp창고이동계_기간_창고상품 ss on ss.창고코드 = a.코드 and ss.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where 1=1 ");
            stringBuilder.AppendLine("\t    and a.사업자번호 = '" + sSaup + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '0' ");
            if (sWare != "")
                stringBuilder.AppendLine("\t    and a.코드 = '" + sWare + "' ");
            if (sProd != "")
                stringBuilder.AppendLine("\t    and b.상품코드 = '" + sProd + "' ");
            if (sFact != "")
                stringBuilder.AppendLine("\t    and b.제조사코드 = '" + sFact + "' ");
            if (sType != "")
                stringBuilder.AppendLine("\t    and b.상품유형코드 = '" + sType + "' ");
            stringBuilder.AppendLine(" ) a ");
            stringBuilder.AppendLine(" where 1=1 ");
            if (bNoZero)
                stringBuilder.AppendLine("\t    and a.현재고 <> 0 ");
            if (bOrder)
                stringBuilder.AppendLine(" order by a.창고코드 asc, a.정렬순서 asc, a.상품코드 asc ");
            else
                stringBuilder.AppendLine(" order by a.창고코드 asc, a.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_창고별재고_BakList(string condition, string sDay, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.총수량) as 매입총수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매입구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매입구분 = '4' then -1 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스총수량) as 매입서비스총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp매입 ");
            stringBuilder.AppendLine("\t\t                    from T_매입 x ");
            stringBuilder.AppendLine("\t\t\t                    inner join T_매입항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매입일자 = x.매입일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t                    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t                    and x.매입일자 <= @p_day ");
            stringBuilder.AppendLine("\t\t                    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.총수량) as 매출총수량 ");
            stringBuilder.AppendLine("\t\t                        , sum((case when y.매출구분 = '1' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '2' then 1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '3' then -1 ");
            stringBuilder.AppendLine("\t\t                                    when y.매출구분 = '4' then 0 ");
            stringBuilder.AppendLine("\t\t                                    else 0 end) * y.서비스총수량) as 매출서비스총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp매출 ");
            stringBuilder.AppendLine("\t\t                    from T_매출 x ");
            stringBuilder.AppendLine("\t\t\t                    inner join T_매출항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.매출일자 = x.매출일자 and y.전표번호 = x.전표번호 ");
            stringBuilder.AppendLine("\t\t                    where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("\t\t\t                    and x.매출일자 <= @p_day ");
            stringBuilder.AppendLine("\t\t                    group by x.창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine("                             , sum(y.총수량) as 입고총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp입고 ");
            stringBuilder.AppendLine("                         from T_창고이동 x ");
            stringBuilder.AppendLine("                             inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("                         where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.수불일자 <= @p_day ");
            stringBuilder.AppendLine("                         group by x.입고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine("                             , sum(y.총수량) as 출고총수량 ");
            stringBuilder.AppendLine("\t\t                    into #Tmp출고 ");
            stringBuilder.AppendLine("                         from T_창고이동 x ");
            stringBuilder.AppendLine("                             inner join T_창고이동항목 y on y.사업자번호 = x.사업자번호 and y.지점코드 = x.지점코드 and y.수불일자 = x.수불일자 and y.수불번호 = x.수불번호 ");
            stringBuilder.AppendLine("                         where x.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("                             and x.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("                             and x.수불일자 <= @p_day ");
            stringBuilder.AppendLine("                         group by x.출고창고코드, y.상품코드 ");
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine("     , a.지점코드 ");
            stringBuilder.AppendLine("     , '[' + b.코드 + ']' as 창고코드 ");
            stringBuilder.AppendLine("     , b.명칭 as 창고명 ");
            stringBuilder.AppendLine("     , a.상품코드 ");
            stringBuilder.AppendLine("     , a.상품명 ");
            stringBuilder.AppendLine("     , a.규격 ");
            if (Common.p_strBox == "3")
            {
                stringBuilder.AppendLine("     , dbo.Func_전체박스환산( ");
                stringBuilder.AppendLine("         isnull(c.초기재고, 0) + isnull(q.매입총수량, 0) + isnull(q.매입서비스총수량, 0) + isnull(s.입고총수량, 0) ");
                stringBuilder.AppendLine("         - isnull(r.매출총수량, 0) - isnull(r.매출서비스총수량, 0) - isnull(w.출고총수량, 0) ");
                stringBuilder.AppendLine("         , '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.상품코드) as 현재고_박스 ");
                stringBuilder.AppendLine("     , dbo.Func_전체중간환산( ");
                stringBuilder.AppendLine("         isnull(c.초기재고, 0) + isnull(q.매입총수량, 0) + isnull(q.매입서비스총수량, 0) + isnull(s.입고총수량, 0) ");
                stringBuilder.AppendLine("         - isnull(r.매출총수량, 0) - isnull(r.매출서비스총수량, 0) - isnull(w.출고총수량, 0) ");
                stringBuilder.AppendLine("         , '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.상품코드) as 현재고_중간 ");
                stringBuilder.AppendLine("     , dbo.Func_전체낱개환산( ");
                stringBuilder.AppendLine("         isnull(c.초기재고, 0) + isnull(q.매입총수량, 0) + isnull(q.매입서비스총수량, 0) + isnull(s.입고총수량, 0) ");
                stringBuilder.AppendLine("         - isnull(r.매출총수량, 0) - isnull(r.매출서비스총수량, 0) - isnull(w.출고총수량, 0) ");
                stringBuilder.AppendLine("         , '" + Common.p_strCompID + "', '" + Common.p_strSpotCode + "', a.상품코드) as 현재고_낱개 ");
            }
            stringBuilder.AppendLine("     , convert(numeric(18,2), isnull(c.초기재고, 0) + isnull(q.매입총수량, 0) + isnull(q.매입서비스총수량, 0) + isnull(s.입고총수량, 0) ");
            stringBuilder.AppendLine("         - isnull(r.매출총수량, 0) - isnull(r.매출서비스총수량, 0) - isnull(w.출고총수량, 0)) as 현재고 ");
            stringBuilder.AppendLine(" from T_상품정보 a ");
            stringBuilder.AppendLine("     left outer join P_창고 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 ");
            stringBuilder.AppendLine("     left outer join T_상품창고별재고 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.상품코드 = a.상품코드 and c.창고코드 = b.코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp매입 q on q.상품코드 = a.상품코드 and q.창고코드 = b.코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp매출 r on r.상품코드 = a.상품코드 and r.창고코드 = b.코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp입고 s on s.상품코드 = a.상품코드 and s.입고창고코드 = b.코드 ");
            stringBuilder.AppendLine("\t    left outer join #Tmp출고 w on w.상품코드 = a.상품코드 and w.출고창고코드 = b.코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" order by b.코드 asc, a.상품코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day", (object)sDay);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매출_BakList(
          string condition,
          string sDay1,
          string sDay2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine("     , a.지점코드 ");
            stringBuilder.AppendLine("     , a.매출일자 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.입력방법 ");
            stringBuilder.AppendLine("     , a.매출시각 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , c.거래처명 ");
            stringBuilder.AppendLine("     , a.담당사원 ");
            stringBuilder.AppendLine("     , a.배송사원 ");
            stringBuilder.AppendLine("     , a.창고코드 ");
            stringBuilder.AppendLine("     , a.발행여부 ");
            stringBuilder.AppendLine("     , a.부가세코드 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine("     , a.서명일시 ");
            stringBuilder.AppendLine("     , a.서명 ");
            stringBuilder.AppendLine("     , a.원장서명 ");
            stringBuilder.AppendLine("     , a.인터넷여부 ");
            stringBuilder.AppendLine("     , a.주문관리일자 ");
            stringBuilder.AppendLine("     , a.등록사원번호 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine("     , a.수정사원번호 ");
            stringBuilder.AppendLine("     , a.수정일시 ");
            stringBuilder.AppendLine("     , a.Old_Day ");
            stringBuilder.AppendLine("     , a.Old_Num ");
            stringBuilder.AppendLine("     , a.등록폰번호 ");
            stringBuilder.AppendLine("     , a.수정폰번호 ");
            stringBuilder.AppendLine("     , a.출고차수 ");
            stringBuilder.AppendLine("     , b.항목순번 ");
            stringBuilder.AppendLine("     , b.상품코드 ");
            stringBuilder.AppendLine("     , p.상품명 ");
            stringBuilder.AppendLine("     , p.규격 ");
            stringBuilder.AppendLine("     , b.박스수량 ");
            stringBuilder.AppendLine("     , b.중간수량 ");
            stringBuilder.AppendLine("     , b.낱개수량 ");
            stringBuilder.AppendLine("     , b.총수량 ");
            stringBuilder.AppendLine("     , b.박스단가 ");
            stringBuilder.AppendLine("     , b.낱개단가 ");
            stringBuilder.AppendLine("     , b.금액 ");
            stringBuilder.AppendLine("     , b.서비스박스 ");
            stringBuilder.AppendLine("     , b.서비스낱개 ");
            stringBuilder.AppendLine("     , b.서비스총수량 ");
            stringBuilder.AppendLine("     , b.최종매출일 ");
            stringBuilder.AppendLine("     , b.매출구분 ");
            stringBuilder.AppendLine("     , b.비고 as 상품비고");
            stringBuilder.AppendLine("     , b.과세구분 ");
            stringBuilder.AppendLine("     , b.박스입고단가 ");
            stringBuilder.AppendLine("     , b.낱개입고단가 ");
            stringBuilder.AppendLine("     , b.주문관리일자 ");
            stringBuilder.AppendLine("     , b.인터넷여부 ");
            stringBuilder.AppendLine("     , b.등록일시 as 인터넷등록일시 ");
            stringBuilder.AppendLine(" from T_매출 a ");
            stringBuilder.AppendLine("     inner join T_매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매출일자 = a.매출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     left outer join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join T_상품정보 p on p.사업자번호 = b.사업자번호 and p.지점코드 = b.지점코드 and p.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매출일자 >= @p_day1 ");
            stringBuilder.AppendLine("     and a.매출일자 <= @p_day2 ");
            stringBuilder.AppendLine(" order by a.매출일자 asc, a.전표번호 asc, b.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_수금_BakList(
          string condition,
          string sDay1,
          string sDay2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine("     , a.지점코드 ");
            stringBuilder.AppendLine("     , a.수금일자 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.수금구분 ");
            stringBuilder.AppendLine("     , a.수금시각 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , c.거래처명 ");
            stringBuilder.AppendLine("     , a.담당사원 ");
            stringBuilder.AppendLine("     , a.수금액 ");
            stringBuilder.AppendLine("     , a.할인액 ");
            stringBuilder.AppendLine("     , a.합계금액 ");
            stringBuilder.AppendLine("     , a.어음번호 ");
            stringBuilder.AppendLine("     , a.발행일자 ");
            stringBuilder.AppendLine("     , a.만기일자 ");
            stringBuilder.AppendLine("     , a.발행은행 ");
            stringBuilder.AppendLine("     , a.발행인 ");
            stringBuilder.AppendLine("     , a.배서인 ");
            stringBuilder.AppendLine("     , a.지급처 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine("     , a.계좌순번 ");
            stringBuilder.AppendLine("     , a.매출일자 ");
            stringBuilder.AppendLine("     , a.매출전표번호 ");
            stringBuilder.AppendLine("     , a.등록사원번호 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine("     , a.수정사원번호 ");
            stringBuilder.AppendLine("     , a.수정일시 ");
            stringBuilder.AppendLine("     , a.Old_Day ");
            stringBuilder.AppendLine("     , a.Old_Num ");
            stringBuilder.AppendLine("     , a.등록폰번호 ");
            stringBuilder.AppendLine("     , a.수정폰번호 ");
            stringBuilder.AppendLine(" from T_수금 a ");
            stringBuilder.AppendLine("     left outer join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수금일자 >= @p_day1 ");
            stringBuilder.AppendLine("     and a.수금일자 <= @p_day2 ");
            stringBuilder.AppendLine(" order by a.수금일자 asc, a.전표번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_매입_BakList(
          string condition,
          string sDay1,
          string sDay2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine("     , a.지점코드 ");
            stringBuilder.AppendLine("     , a.매입일자 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.입력방법 ");
            stringBuilder.AppendLine("     , a.매입시각 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , c.거래처명 ");
            stringBuilder.AppendLine("     , a.담당사원 ");
            stringBuilder.AppendLine("     , a.배송사원 ");
            stringBuilder.AppendLine("     , a.창고코드 ");
            stringBuilder.AppendLine("     , a.부가세코드 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine("     , a.등록사원번호 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine("     , a.수정사원번호 ");
            stringBuilder.AppendLine("     , a.수정일시 ");
            stringBuilder.AppendLine("     , a.Old_Day ");
            stringBuilder.AppendLine("     , a.Old_Num ");
            stringBuilder.AppendLine("     , b.항목순번 ");
            stringBuilder.AppendLine("     , b.상품코드 ");
            stringBuilder.AppendLine("     , p.상품명 ");
            stringBuilder.AppendLine("     , p.규격 ");
            stringBuilder.AppendLine("     , b.박스수량 ");
            stringBuilder.AppendLine("     , b.중간수량 ");
            stringBuilder.AppendLine("     , b.낱개수량 ");
            stringBuilder.AppendLine("     , b.총수량 ");
            stringBuilder.AppendLine("     , b.박스단가 ");
            stringBuilder.AppendLine("     , b.낱개단가 ");
            stringBuilder.AppendLine("     , b.금액 ");
            stringBuilder.AppendLine("     , b.서비스박스 ");
            stringBuilder.AppendLine("     , b.서비스낱개 ");
            stringBuilder.AppendLine("     , b.서비스총수량 ");
            stringBuilder.AppendLine("     , b.매입구분 ");
            stringBuilder.AppendLine("     , b.비고 as 상품비고");
            stringBuilder.AppendLine("     , b.과세구분 ");
            stringBuilder.AppendLine(" from T_매입 a ");
            stringBuilder.AppendLine("     inner join T_매입항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.매입일자 = a.매입일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine("     left outer join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine("     left outer join T_상품정보 p on p.사업자번호 = b.사업자번호 and p.지점코드 = b.지점코드 and p.상품코드 = b.상품코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.매입일자 >= @p_day1 ");
            stringBuilder.AppendLine("     and a.매입일자 <= @p_day2 ");
            stringBuilder.AppendLine(" order by a.매입일자 asc, a.전표번호 asc, b.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_지급_BakList(
          string condition,
          string sDay1,
          string sDay2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.사업자번호 ");
            stringBuilder.AppendLine("     , a.지점코드 ");
            stringBuilder.AppendLine("     , a.지급일자 ");
            stringBuilder.AppendLine("     , a.전표번호 ");
            stringBuilder.AppendLine("     , a.지급구분 ");
            stringBuilder.AppendLine("     , a.지급시각 ");
            stringBuilder.AppendLine("     , a.거래처코드 ");
            stringBuilder.AppendLine("     , c.거래처명 ");
            stringBuilder.AppendLine("     , a.담당사원 ");
            stringBuilder.AppendLine("     , a.지급액 ");
            stringBuilder.AppendLine("     , a.할인액 ");
            stringBuilder.AppendLine("     , a.합계금액 ");
            stringBuilder.AppendLine("     , a.어음번호 ");
            stringBuilder.AppendLine("     , a.발행일자 ");
            stringBuilder.AppendLine("     , a.만기일자 ");
            stringBuilder.AppendLine("     , a.발행은행 ");
            stringBuilder.AppendLine("     , a.발행인 ");
            stringBuilder.AppendLine("     , a.배서인 ");
            stringBuilder.AppendLine("     , a.지급처 ");
            stringBuilder.AppendLine("     , a.비고 ");
            stringBuilder.AppendLine("     , a.계좌순번 ");
            stringBuilder.AppendLine("     , a.매입일자 ");
            stringBuilder.AppendLine("     , a.매입전표번호 ");
            stringBuilder.AppendLine("     , a.등록사원번호 ");
            stringBuilder.AppendLine("     , a.등록일시 ");
            stringBuilder.AppendLine("     , a.수정사원번호 ");
            stringBuilder.AppendLine("     , a.수정일시 ");
            stringBuilder.AppendLine("     , a.Old_Day ");
            stringBuilder.AppendLine("     , a.Old_Num ");
            stringBuilder.AppendLine(" from T_지급 a ");
            stringBuilder.AppendLine("     left outer join T_거래처정보 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.거래처코드 = a.거래처코드 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지급일자 >= @p_day1 ");
            stringBuilder.AppendLine("     and a.지급일자 <= @p_day2 ");
            stringBuilder.AppendLine(" order by a.지급일자 asc, a.전표번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_창고이동_BakList(
          string condition,
          string sDay1,
          string sDay2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine(" from T_창고이동 a ");
            stringBuilder.AppendLine("     inner join T_창고이동항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.수불일자 = a.수불일자 and b.수불번호 = a.수불번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.수불일자 >= @p_day1 ");
            stringBuilder.AppendLine("     and a.수불일자 <= @p_day2 ");
            stringBuilder.AppendLine(" order by a.수불일자 asc, a.수불번호 asc, b.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_지출_BakList(
          string condition,
          string sDay1,
          string sDay2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine(" from T_지출 a ");
            stringBuilder.AppendLine("     inner join T_지출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.지출일자 = a.지출일자 and b.전표번호 = a.전표번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.지출일자 >= @p_day1 ");
            stringBuilder.AppendLine("     and a.지출일자 <= @p_day2 ");
            stringBuilder.AppendLine(" order by a.지출일자 asc, a.전표번호 asc, b.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_견적서_BakList(
          string condition,
          string sDay1,
          string sDay2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine(" from T_견적 a ");
            stringBuilder.AppendLine("     inner join T_견적항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.견적일자 = a.견적일자 and b.견적번호 = a.견적번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.견적일자 >= @p_day1 ");
            stringBuilder.AppendLine("     and a.견적일자 <= @p_day2 ");
            stringBuilder.AppendLine(" order by a.견적일자 asc, a.견적번호 asc, b.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_발주서_BakList(
          string condition,
          string sDay1,
          string sDay2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine(" from T_발주 a ");
            stringBuilder.AppendLine("     inner join T_발주항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.발주일자 = a.발주일자 and b.발주번호 = a.발주번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.발주일자 >= @p_day1 ");
            stringBuilder.AppendLine("     and a.발주일자 <= @p_day2 ");
            stringBuilder.AppendLine(" order by a.발주일자 asc, a.발주번호 asc, b.항목순번 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_계산서_BakList(
          string condition,
          string sDay1,
          string sDay2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine("     , c.* ");
            stringBuilder.AppendLine(" from T_계산서매출 a ");
            stringBuilder.AppendLine("     left outer join T_계산서매출항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.계산서일자 = a.계산서일자 and b.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine("     left outer join T_계산서매출수금항목 c on c.사업자번호 = a.사업자번호 and c.지점코드 = a.지점코드 and c.계산서일자 = a.계산서일자 and c.계산서번호 = a.계산서번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and convert(nvarchar(10), a.등록일시, 120) >= @p_day1 ");
            stringBuilder.AppendLine("     and convert(nvarchar(10), a.등록일시, 120) <= @p_day2 ");
            stringBuilder.AppendLine(" order by a.계산서일자 asc, a.계산서번호 asc, b.항목번호 asc, c.항목번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_홈택스_BakList(
          string condition,
          string sDay1,
          string sDay2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine("     , b.* ");
            stringBuilder.AppendLine(" from T_홈택스 a ");
            stringBuilder.AppendLine("     left outer join T_홈택스항목 b on b.사업자번호 = a.사업자번호 and b.지점코드 = a.지점코드 and b.발행일자 = a.발행일자 and b.발행번호 = a.발행번호 ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.발행일자 >= @p_day1 ");
            stringBuilder.AppendLine("     and a.발행일자 <= @p_day2 ");
            stringBuilder.AppendLine(" order by a.발행일자 asc, a.발행번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_장비코드_BakList(string condition, string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine(" from T_장비정보 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine(" order by a.장비코드 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (!sCommand.CommandText.Equals((string)null))
                return this.wAdo.SqlCommandSelect(sCommand, sConn);
            wnLog.writeLog(100, " There is no queryString");
            return (DataTable)null;
        }

        public DataTable fn_장비대여_BakList(
          string condition,
          string sDay1,
          string sDay2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine(" from T_장비대여 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.출고일자 >= @p_day1 ");
            stringBuilder.AppendLine("     and a.출고일자 <= @p_day2 ");
            stringBuilder.AppendLine(" order by a.출고일자 asc, a.출고번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }

        public DataTable fn_장비회수_BakList(
          string condition,
          string sDay1,
          string sDay2,
          string sConn)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(" select a.* ");
            stringBuilder.AppendLine(" from T_장비회수 a ");
            stringBuilder.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            stringBuilder.AppendLine("     and a.지점코드 = '" + Common.p_strSpotCode + "' ");
            stringBuilder.AppendLine("     and a.회수일자 >= @p_day1 ");
            stringBuilder.AppendLine("     and a.회수일자 <= @p_day2 ");
            stringBuilder.AppendLine(" order by a.회수일자 asc, a.회수번호 asc ");
            SqlCommand sCommand = new SqlCommand(stringBuilder.ToString());
            if (sCommand.CommandText.Equals((string)null))
            {
                wnLog.writeLog(100, " There is no queryString");
                return (DataTable)null;
            }
            sCommand.Parameters.AddWithValue("@p_day1", (object)sDay1);
            sCommand.Parameters.AddWithValue("@p_day2", (object)sDay2);
            return this.wAdo.SqlCommandSelect(sCommand, sConn);
        }
    }
}
